package yaml

import (
	"bytes"
	"regexp"

	"github.com/faetools/kit/terminal"
	"github.com/logrusorgru/aurora"
	"github.com/pkg/errors"
	"gopkg.in/yaml.v3"
)

var (
	reAllowedComment = regexp.MustCompile(
		`^$|TODO|\A\W+Code generated by .*; DO NOT EDIT`)
	reIsTemplate = regexp.MustCompile(`: {{`)

	tab    = []byte("\t")
	spaces = []byte("  ")
)

// FormatWithWarnings formats the yaml file and prints warnings about deleted comments.
func FormatWithWarnings(src []byte) ([]byte, error) {
	return format(src, true)
}

// Format formats the yaml file.
func Format(src []byte) ([]byte, error) {
	return format(src, false)
}

func format(src []byte, warnings bool) ([]byte, error) {
	src = bytes.ReplaceAll(src, tab, spaces)

	// Skip empty files and templates.
	if len(src) == 0 || reIsTemplate.Match(src) {
		return src, nil
	}

	n := &yaml.Node{}
	if err := yaml.Unmarshal(src, n); err != nil {
		return nil, errors.Wrap(err, "unmarshalling")
	}

	prettifyYAMLAll(n, warnings)

	b := &bytes.Buffer{}
	enc := yaml.NewEncoder(b)
	enc.SetIndent(1)

	err := enc.Encode(n)
	return b.Bytes(), err
}

func prettifyYAMLAll(n *yaml.Node, warnings bool) {
	for n != nil {
		n = prettifyYALMNode(n, warnings)
	}
}

func prettifyYALMNode(n *yaml.Node, warnings bool) (next *yaml.Node) {
	// Uniform style.
	switch n.Style {
	case yaml.SingleQuotedStyle,
		yaml.DoubleQuotedStyle:
		n.Style = yaml.FlowStyle
	case yaml.FoldedStyle:
		n.Style = yaml.LiteralStyle
	}

	// Strip comments except "Code generated by" and some others
	// TODO control this via options.
	for _, comment := range []*string{
		&n.HeadComment, &n.LineComment, &n.FootComment,
	} {
		if reAllowedComment.MatchString(*comment) {
			continue
		}

		if warnings {
			terminal.Printf(aurora.Yellow,
				"Deleting comment %q in yaml file\n", *comment)
		}
		*comment = ""
	}

	for _, el := range n.Content {
		prettifyYAMLAll(el, warnings)
	}

	return
}
