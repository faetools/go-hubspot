// Code generated by jsonenums -type=Type; DO NOT EDIT.

package repo

import (
	"encoding/json"
	"fmt"
)

var (
	_TypeNameToValue = map[string]Type{
		"Microservice": Microservice,
		"App":          App,
		"GoLibrary":    GoLibrary,
		"DygoSite":     DygoSite,
		"HugoModule":   HugoModule,
		"HugoSite":     HugoSite,
		"Other":        Other,
	}

	_TypeValueToName = map[Type]string{
		Microservice: "Microservice",
		App:          "App",
		GoLibrary:    "GoLibrary",
		DygoSite:     "DygoSite",
		HugoModule:   "HugoModule",
		HugoSite:     "HugoSite",
		Other:        "Other",
	}
)

func init() {
	var v Type
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TypeNameToValue = map[string]Type{
			interface{}(Microservice).(fmt.Stringer).String(): Microservice,
			interface{}(App).(fmt.Stringer).String():          App,
			interface{}(GoLibrary).(fmt.Stringer).String():    GoLibrary,
			interface{}(DygoSite).(fmt.Stringer).String():     DygoSite,
			interface{}(HugoModule).(fmt.Stringer).String():   HugoModule,
			interface{}(HugoSite).(fmt.Stringer).String():     HugoSite,
			interface{}(Other).(fmt.Stringer).String():        Other,
		}
	}
}

// MarshalJSON is generated so Type satisfies json.Marshaler.
func (r Type) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _TypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Type: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Type satisfies json.Unmarshaler.
func (r *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}
	v, ok := _TypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Type %q", s)
	}
	*r = v
	return nil
}
