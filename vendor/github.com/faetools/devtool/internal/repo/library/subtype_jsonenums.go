// Code generated by jsonenums -type=SubType; DO NOT EDIT.

package library

import (
	"encoding/json"
	"fmt"
)

var (
	_SubTypeNameToValue = map[string]SubType{
		"ThirdPartyAPI": ThirdPartyAPI,
		"Other":         Other,
	}

	_SubTypeValueToName = map[SubType]string{
		ThirdPartyAPI: "ThirdPartyAPI",
		Other:         "Other",
	}
)

func init() {
	var v SubType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SubTypeNameToValue = map[string]SubType{
			interface{}(ThirdPartyAPI).(fmt.Stringer).String(): ThirdPartyAPI,
			interface{}(Other).(fmt.Stringer).String():         Other,
		}
	}
}

// MarshalJSON is generated so SubType satisfies json.Marshaler.
func (r SubType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SubTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid SubType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so SubType satisfies json.Unmarshaler.
func (r *SubType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubType should be a string, got %s", data)
	}
	v, ok := _SubTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid SubType %q", s)
	}
	*r = v
	return nil
}
