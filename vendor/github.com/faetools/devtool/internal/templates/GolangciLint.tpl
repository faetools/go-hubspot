# Code generated by devtool; DO NOT EDIT.
run: # options for analysis running
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 30s

  # exit code when at least one issue was found, default is 1
  # issues-exit-code: 1

  # include test files or not, default is true
  # tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: vendor

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  # allow-parallel-runners: false

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # default is "colored-line-number"
  # format: colored-line-number

  # print lines of code with issue, default is true
  # print-issued-lines: true

  # print linter name in the end of issue text, default is true
  # print-linter-name: true

  # make issues output unique by line, default is true
  # uniq-by-line: true

  # add a prefix to the output file references; default is no prefix
  # path-prefix: ""

  # sorts results by: filepath, line and column
  # sort-results: false

# all available settings of specific linters
linters-settings:
  # bidichk:
  # The following configurations check for all mentioned invisible unicode
  # runes. It can be omitted because all runes are enabled by default.
  # left-to-right-embedding: true
  # right-to-left-embedding: true
  # pop-directional-formatting: true
  # left-to-right-override: true
  # right-to-left-override: true
  # left-to-right-isolate: true
  # right-to-left-isolate: true
  # first-strong-isolate: true
  # pop-directional-isolate: true

  cyclop:
    # the maximal code complexity to report
    max-complexity: 10
    # the maximal average package complexity. If it's higher than 0.0 (float) the check is enabled (default 0.0)
    package-average: 3.0
    # should ignore tests (default false)
    # skip-tests: false

  # dogsled:
  # checks assignments with too many blank identifiers; default is 2
  # max-blank-identifiers: 2

  # dupl:
  # tokens count to trigger issue, 150 by default
  # threshold: 100

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # list of functions to exclude from checking, where each entry is a single function to exclude.
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude-functions:
    #   - io/ioutil.ReadFile
    #   - io.Copy(*bytes.Buffer)
    #   - io.Copy(os.Stdout)

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true
    # Check for plain type assertions and type switches
    asserts: true
    # Check for plain error comparisons
    comparison: true

  exhaustive:
    # check switch statements in generated files also
    check-generated: true
    # presence of "default" case in switch statements satisfies exhaustiveness,
    # even if all enum members are not listed
    default-signifies-exhaustive: false
    # enum members matching the supplied regex do not have to be listed in
    # switch statements to satisfy exhaustiveness
    # ignore-enum-members: ""
    # strategy to use when checking exhaustiveness of switch statements; one of:
    # "name", "value"; see documentation for details:
    # https://pkg.go.dev/github.com/nishanths/exhaustive#section-documentation
    # checking-strategy: "value"

  # exhaustivestruct:
  # Struct Patterns is list of expressions to match struct packages and names
  # The struct packages have the form example.com/package.ExampleStruct
  # The matching patterns can use matching syntax from https://pkg.go.dev/path#Match
  # If this list is empty, all structs are tested.
  # struct-patterns:
  #   - '*.Test'
  #   - 'example.com/package.ExampleStruct'

  forbidigo:
    # Forbid the following identifiers (identifiers are written using regexp):
    forbid:
      - ^print.*$
      - 'fmt\.Print.*'
      - 'fmt\.Error.*'
    # Exclude godoc examples from forbidigo checks.  Default is true.
    # exclude_godoc_examples: false

  # funlen:
  #   lines: 60
  #   statements: 40

  # gci:
  #   # put imports beginning with prefix after 3rd-party packages;
  #   # only support one prefix
  #   # if not set, use goimports.local-prefixes
  #   local-prefixes: github.com/org/project

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  # goconst:
  # minimal length of string constant, 3 by default
  # min-len: 3
  # minimum occurrences of constant string count to trigger issue, 3 by default
  # min-occurrences: 3
  # ignore test files, false by default
  # ignore-tests: false
  # look for existing constants matching the values, true by default
  # match-constant: true
  # search also for duplicated numbers, false by default
  # numbers: false
  # minimum value, only works with goconst.numbers, 3 by default
  # min: 3
  # maximum value, only works with goconst.numbers, 3 by default
  # max: 3
  # ignore when constant is not used as function argument, true by default
  # ignore-calls: true

  # gocritic:
  #   # Which checks should be enabled; can't be combined with 'disabled-checks';
  #   # See https://go-critic.github.io/overview#checks-overview
  #   # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
  #   # By default list of stable checks is used.
  #   enabled-checks:
  #     - nestingReduce
  #     - unnamedresult
  #     - ruleguard
  #     - truncateCmp

  #   # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
  #   disabled-checks:
  #     - regexpMust

  #   # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
  #   # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
  #   enabled-tags:
  #     - performance
  #   disabled-tags:
  #     - experimental

  #   # Settings passed to gocritic.
  #   # The settings key is the name of a supported gocritic checker.
  #   # The list of supported checkers can be find in https://go-critic.github.io/overview.
  #   settings:
  #     captLocal: # must be valid enabled check name
  #       # whether to restrict checker to params only (default true)
  #       paramsOnly: true
  #     elseif:
  #       # whether to skip balanced if-else pairs (default true)
  #       skipBalanced: true
  #     hugeParam:
  #       # size in bytes that makes the warning trigger (default 80)
  #       sizeThreshold: 80
  #     nestingReduce:
  #       # min number of statements inside a branch to trigger a warning (default 5)
  #       bodyWidth: 5
  #     rangeExprCopy:
  #       # size in bytes that makes the warning trigger (default 512)
  #       sizeThreshold: 512
  #       # whether to check test functions (default true)
  #       skipTestFuncs: true
  #     rangeValCopy:
  #       # size in bytes that makes the warning trigger (default 128)
  #       sizeThreshold: 32
  #       # whether to check test functions (default true)
  #       skipTestFuncs: true
  #     ruleguard:
  #       # Enable debug to identify which 'Where' condition was rejected.
  #       # The value of the parameter is the name of a function in a ruleguard file.
  #       #
  #       # When a rule is evaluated:
  #       # If:
  #       #   The Match() clause is accepted; and
  #       #   One of the conditions in the Where() clause is rejected,
  #       # Then:
  #       #   ruleguard prints the specific Where() condition that was rejected.
  #       #
  #       # The flag is passed to the ruleguard 'debug-group' argument.
  #       debug: 'emptyDecl'
  #       # Deprecated, use 'failOn' param.
  #       # If set to true, identical to failOn='all', otherwise failOn=''
  #       failOnError: false
  #       # Determines the behavior when an error occurs while parsing ruleguard files.
  #       # If flag is not set, log error and skip rule files that contain an error.
  #       # If flag is set, the value must be a comma-separated list of error conditions.
  #       # - 'all':    fail on all errors.
  #       # - 'import': ruleguard rule imports a package that cannot be found.
  #       # - 'dsl':    gorule file does not comply with the ruleguard DSL.
  #       failOn: dsl
  #       # Comma-separated list of file paths containing ruleguard rules.
  #       # If a path is relative, it is relative to the directory where the golangci-lint command is executed.
  #       # The special '${configDir}' variable is substituted with the absolute directory containing the golangci config file.
  #       # Glob patterns such as 'rules-*.go' may be specified.
  #       rules: '${configDir}/ruleguard/rules-*.go,${configDir}/myrule1.go'
  #     tooManyResultsChecker:
  #       # maximum number of results (default 5)
  #       maxResults: 10
  #     truncateCmp:
  #       # whether to skip int/uint/uintptr types (default true)
  #       skipArchDependent: true
  #     underef:
  #       # whether to skip (*x).method() calls where x is a pointer receiver (default true)
  #       skipRecvDeref: true
  #     unnamedResult:
  #       # whether to check exported functions
  #       checkExported: true

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: all
    # list of regexps for excluding particular comment lines from check
    exclude:
      # exclude comments fully contained in paranthesis
      - '^\(.+\)$'
    # check that each sentence starts with a capital letter
    capital: true

  godox:
    # {{/* report any comments starting with keywords, this is useful for TODO or FIXME comments that */}}
    # might be left in the code accidentally and should be resolved before merging
    keywords: # {{/* default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting */}}
      - TODO
      - BUG
      - FIXME
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging

  # gofmt:
  #   # simplify code: gofmt with `-s` option, true by default
  #   simplify: true

  # gofumpt:
  #   # Select the Go version to target. The default is `1.15`.
  #   lang-version: '1.15'

  #   # Choose whether or not to use the extra rules that are disabled
  #   # by default
  #   extra-rules: false

  # goheader:
  #   values:
  #     const:
  #       # define here const type values in format k:v, for example:
  #       # COMPANY: MY COMPANY
  #     regexp:
  #       # define here regexp type values, for example
  #       # AUTHOR: .*@mycompany\.com
  #   template:
  #     # put here copyright header template for source code files
  #   template-path:
  #     # also as alternative of directive 'template' you may put the path to file with the template source

  # goimports:
  #   # put imports beginning with prefix after 3rd-party packages;
  #   # it's a comma-separated list of prefixes
  #   local-prefixes: github.com/org/project

  # gomnd:
  #   settings:
  #     mnd:
  # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
  # checks: argument,case,condition,operation,return,assign
  # ignored-numbers: 1000
  # ignored-files: magic_.*.go
  # ignored-functions: math.*

  # gomoddirectives:
  # Allow local `replace` directives. Default is false.
  # replace-local: false
  # List of allowed `replace` directives. Default is empty.
  # replace-allow-list:
  #   - launchpad.net/gocheck
  # Allow to not explain why the version has been retracted in the `retract` directives. Default is false.
  # retract-allow-no-explanation: false
  # Forbid the use of the `exclude` directives. Default is false.
  # exclude-forbidden: false

  # gomodguard:
  #   allowed:
  #     modules: # List of allowed modules
  #       # - gopkg.in/yaml.v2
  #     domains: # List of allowed module domains
  #       # - golang.org
  #   blocked:
  #     modules: # List of blocked modules
  # - github.com/uudashr/go-module:                             # Blocked module
  #     recommendations:                                        # Recommended modules that should be used instead (Optional)
  #       - golang.org/x/mod
  #     reason: "`mod` is the official go.mod parser library."  # Reason why the recommended module should be used (Optional)
  # versions: # List of blocked module version constraints
  # - github.com/mitchellh/go-homedir:                          # Blocked module with version constraint
  #     version: "< 1.1.0"                                      # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons
  #     reason: "testing if blocked version constraint works."  # Reason why the version constraint exists. (Optional)
  # local_replace_directives: false # Set to true to raise lint issues for packages that are loaded from a local path via replace directive

  # gosec:
  #   # To select a subset of rules to run.
  #   # Available rules: https://github.com/securego/gosec#available-rules
  #   includes:
  #     - G401
  #     - G306
  #     - G101
  #   # To specify a set of rules to explicitly exclude.
  #   # Available rules: https://github.com/securego/gosec#available-rules
  #   excludes:
  #     - G204
  #   # Exclude generated files
  #   exclude-generated: true
  #   # Filter out the issues with a lower severity than the given value. Valid options are: low, medium, high.
  #   severity: 'low'
  #   # Filter out the issues with a lower confidence than the given value. Valid options are: low, medium, high.
  #   confidence: 'low'
  #   # To specify the configuration of rules.
  #   # The configuration of rules is not fully documented by gosec:
  #   # https://github.com/securego/gosec#configuration
  #   # https://github.com/securego/gosec/blob/569328eade2ccbad4ce2d0f21ee158ab5356a5cf/rules/rulelist.go#L60-L102
  #   config:
  #     G306: '0600'
  #     G101:
  #       pattern: '(?i)example'
  #       ignore_entropy: false
  #       entropy_threshold: '80.0'
  #       per_char_threshold: '3.0'
  #       truncate: '32'

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: '{{ .GoVersion }}'
    # https://staticcheck.io/docs/options#checks
    checks: ['all']

  govet:
    # report about shadowed variables
    # check-shadowing: false

    # settings per analyzer
    # settings:
    #   printf:
    #     funcs: # {{/* TODO not yet programmed */}}
    #       - (github.com/faetools/kit/log.Logger).Debugf
    #       - (github.com/faetools/kit/log.Logger).Infof
    #       - (github.com/faetools/kit/log.Logger).Printf
    #       - (github.com/faetools/kit/log.Logger).Warnf
    #       - (github.com/faetools/kit/log.Logger).Warningf
    #       - (github.com/faetools/kit/log.Logger).Errorf
    #       - (github.com/faetools/kit/log.Logger).Fatalf
    #       - (github.com/faetools/kit/log.Logger).Panicf
    #       - (github.com/faetools/kit/log.Logger).Debug
    #       - (github.com/faetools/kit/log.Logger).Info
    #       - (github.com/faetools/kit/log.Logger).Print
    #       - (github.com/faetools/kit/log.Logger).Warn
    #       - (github.com/faetools/kit/log.Logger).Warning
    #       - (github.com/faetools/kit/log.Logger).Error
    #       - (github.com/faetools/kit/log.Logger).Fatal
    #       - (github.com/faetools/kit/log.Logger).Panic
    #       - (github.com/faetools/kit/log).Debugf
    #       - (github.com/faetools/kit/log).Infof
    #       - (github.com/faetools/kit/log).Printf
    #       - (github.com/faetools/kit/log).Warnf
    #       - (github.com/faetools/kit/log).Warningf
    #       - (github.com/faetools/kit/log).Errorf
    #       - (github.com/faetools/kit/log).Fatalf
    #       - (github.com/faetools/kit/log).Panicf
    #       - (github.com/faetools/kit/log).Debug
    #       - (github.com/faetools/kit/log).Info
    #       - (github.com/faetools/kit/log).Print
    #       - (github.com/faetools/kit/log).Warn
    #       - (github.com/faetools/kit/log).Warning
    #       - (github.com/faetools/kit/log).Error
    #       - (github.com/faetools/kit/log).Fatal
    #       - (github.com/faetools/kit/log).Panic

    # enable or disable analyzers by name
    # run `go tool vet help` to see all analyzers
    # enable:
    #   - atomicalign
    enable-all: true
    disable:
      - shadow
      - fieldalignment # just annoying
    # disable-all: false

  depguard:
    list-type: blacklist
    # include-go-root: false
    packages:
      - github.com/sirupsen/logrus
    packages-with-error-message:
      # specify an error message to output when a blacklisted package is used
      - github.com/sirupsen/logrus: 'logging is allowed only by our own logger'

  # ifshort:
  #   # Maximum length of variable declaration measured in number of lines, after which linter won't suggest using short syntax.
  #   # Has higher priority than max-decl-chars.
  #   max-decl-lines: 1
  #   # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
  #   max-decl-chars: 30

  # importas:
  #   # if set to `true`, force to use alias.
  #   no-unaliased: true
  #   # List of aliases
  #   alias:
  #     # using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package
  #     - pkg: knative.dev/serving/pkg/apis/serving/v1
  #       alias: servingv1
  #     # using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package
  #     - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
  #       alias: autoscalingv1alpha1
  #     # You can specify the package path by regular expression,
  #     # and alias by regular expression expansion syntax like below.
  #     # see https://github.com/julz/importas#use-regular-expression for details
  #     - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
  #       alias: $1$2

  # ireturn:
  # ireturn allows using `allow` and `reject` settings at the same time.
  # Both settings are lists of the keywords and regular expressions matched to interface or package names.
  # keywords:
  # - `empty` for `interface{}`
  # - `error` for errors
  # - `stdlib` for standard library
  # - `anon` for anonymous interfaces

  # By default, it allows using errors, empty interfaces, anonymous interfaces,
  # and interfaces provided by the standard library.
  # allow:
  #   - anon
  #   - error
  #   - empty
  #   - stdlib
  #   # You can specify idiomatic endings for interface
  #   - (or|er)$

  # # Reject patterns
  # reject:
  #   - github.com\/user\/package\/v4\.Type

  # lll:
  #   # max line length, lines longer will be reported. Default is 120.
  #   # '\t' is counted as 1 character by default, and can be changed with the tab-width option
  #   line-length: 120
  #   # tab width in spaces. Default to 1.
  #   tab-width: 1

  # makezero:
  #   # Allow only slices initialized with a length of zero. Default is false.
  #   always: false

  # misspell:
  # Correct spellings using locale preferences for US or UK.
  # Default is to use a neutral variety of English.
  # Setting locale to US will correct the British spelling of 'colour' to 'color'.
  # locale: US
  # ignore-words:
  #   - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 10

  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 4

  # nilnil:
  #   # By default, nilnil checks all returned types below.
  #   checked-types:
  #     - ptr
  #     - func
  #     - iface
  #     - map
  #     - chan

  # nlreturn:
  #   # size of the block (including return statement that is still "OK")
  #   # so no return split required.
  #   block-size: 1

  nolintlint:
    # Disable to ensure that all nolint directives actually have an effect. Default is true.
    allow-unused: false
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    # allow-leading-space: true
    # Exclude following linters from requiring an explanation.  Default is [].
    # allow-no-explanation: []
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific: true

  prealloc:
    # we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  promlinter:
    # Promlinter cannot infer all metrics name in static analysis.
    # Enable strict mode will also include the errors caused by failing to parse the args.
    strict: true
    # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
    # disabled-linters:
    #  - "Help"
    #  - "MetricUnits"
    #  - "Counter"
    #  - "HistogramSummaryReserved"
    #  - "MetricTypeInName"
    #  - "ReservedChars"
    #  - "CamelCase"
    #  - "lintUnitAbbreviations"

  predeclared:
    # comma-separated list of predeclared identifiers to not report on
    # ignore: ''
    # include method names and field names (i.e., qualified names) in checks
    q: true

  # rowserrcheck:
  #   packages:
  #     - github.com/jmoiron/sqlx

  # revive:
  # see https://github.com/mgechev/revive#available-rules for details.
  # ignore-generated-header: true
  # severity: warning
  # rules:
  #   - name: indent-error-flow
  #     severity: warning
  #   - name: add-constant
  #     severity: warning
  #     arguments:
  #       - maxLitCount: '3'
  #         allowStrs: '""'
  #         allowInts: '0,1,2'
  #         allowFloats: '0.0,0.,1.0,1.,2.0,2.'

  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: '{{ .GoVersion }}'
    # https://staticcheck.io/docs/options#checks
    checks: ['all']

  stylecheck:
    # Select the Go version to target. The default is '1.13'.
    go: '{{ .GoVersion }}'
    # https://staticcheck.io/docs/options#checks
    checks: ['all']
    # https://staticcheck.io/docs/options#dot_import_whitelist
    # dot-import-whitelist:
    #   - fmt
    # https://staticcheck.io/docs/options#initialisms
    # initialisms: ['ACL', 'API', 'ASCII', 'CPU', 'CSS', 'DNS', 'EOF', 'GUID', 'HTML', 'HTTP', 'HTTPS', 'ID', 'IP', 'JSON', 'QPS', 'RAM', 'RPC', 'SLA', 'SMTP', 'SQL', 'SSH', 'TCP', 'TLS', 'TTL', 'UDP', 'UI', 'GID', 'UID', 'UUID', 'URI', 'URL', 'UTF8', 'VM', 'XML', 'XMPP', 'XSRF', 'XSS']
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    # http-status-code-whitelist: ['200', '400', '404', '500']

  tagliatelle:
    # check the struct tag name case
    case:
      # use the struct field name to check the name of the struct tag
      use-field-name: true
      rules:
        # any struct tag type can be used.
        # support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
        json: goCamel
        yaml: goKebab
        # xml: camel
        # bson: camel
        # avro: snake
        # mapstructure: kebab

  # testpackage:
  #   # regexp pattern to skip files
  #   skip-regexp: (util|common)_test\.go

  # thelper:
  # The following configurations enable all checks. It can be omitted because all checks are enabled by default.
  # You can enable only required checks deleting unnecessary checks.
  # test:
  #   first: true
  #   name: true
  #   begin: true
  # benchmark:
  #   first: true
  #   name: true
  #   begin: true
  # tb:
  #   first: true
  #   name: true
  #   begin: true

  # tenv:
  # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
  # By default, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
  # all: false

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # If you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: true

  unused:
    # Select the Go version to target. The default is '1.13'.
    go: '{{ .GoVersion }}'

  # varnamelen:
  # The longest distance, in source lines, that is being considered a "small scope." (defaults to 5)
  # Variables used in at most this many lines will be ignored.
  # max-distance: 5
  # The minimum length of a variable's name that is considered "long." (defaults to 3)
  # Variable names that are at least this long will be ignored.
  # min-name-length: 3
  # Check method receiver names. (defaults to false)
  # check-receiver: false
  # Check named return values. (defaults to false)
  # check-return: false
  # Ignore "ok" variables that hold the bool return value of a type assertion. (defaults to false)
  # ignore-type-assert-ok: false
  # Ignore "ok" variables that hold the bool return value of a map index. (defaults to false)
  # ignore-map-index-ok: false
  # Ignore "ok" variables that hold the bool return value of a channel receive. (defaults to false)
  # ignore-chan-recv-ok: false
  # Optional list of variable names that should be ignored completely. (defaults to empty list)
  # ignore-names:
  #   - err
  # Optional list of variable declarations that should be ignored completely. (defaults to empty list)
  # Entries must be in the form of "<variable name> <type>" or "<variable name> *<type>".
  # ignore-decls:
  #   - c echo.Context
  #   - ctx context.Context
  #   - t testing.T
  #   - err error
  #   - i int

  whitespace:
    multi-if: true # Enforces newlines (or comments) after every multi-line if statement
    multi-func: true # Enforces newlines (or comments) after every multi-line function signature

  # wrapcheck:
  # An array of strings that specify substrings of signatures to ignore.
  # If this set, it will override the default set of ignored signatures.
  # See https://github.com/tomarrell/wrapcheck#configuration for more information.
  # ignoreSigs:
  #   - .Errorf(
  #   - errors.New(
  #   - errors.Unwrap(
  #   - .Wrap(
  #   - .Wrapf(
  #   - .WithMessage(
  #   - .WithMessagef(
  #   - .WithStack(
  # ignorePackageGlobs:
  #     - '*_test.go'
  #   - encoding/*
  #   - github.com/pkg/*

  # wsl:
  # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for
  # documentation of available settings. These are the defaults for
  # `golangci-lint`.
  # allow-assign-and-anything: false
  # allow-assign-and-call: true
  # allow-cuddle-declarations: false
  # allow-multiline-assign: true
  # allow-separated-leading-comment: false
  # allow-trailing-comment: false
  # force-case-trailing-whitespace: 0
  # force-err-cuddling: false
  # force-short-decl-cuddling: false
  # strict-append: true

  # The custom section can be used to define linter plugins to be loaded at runtime.
  # See README doc for more info.
  # custom:
  # Each custom linter should have a unique name.
  # example:
  # The path to the plugin *.so. Can be absolute or local. Required for each custom linter
  # path: /path/to/example.so
  # The description of the linter. Optional, just for documentation purposes.
  # description: This is an example usage of a plugin linter.
  # Intended to point to the repo location of the linter. Optional, just for documentation purposes.
  # original-url: github.com/golangci/example-linter

linters:
  enable:
    # Simple linter to check that your code does not contain non-ASCII identifiers
    - asciicheck
    # Checks for dangerous unicode character sequences
    - bidichk
    # checks whether HTTP response body is closed successfully
    - bodyclose
    # check the function whether use a non-inherited context
    - contextcheck
    # checks function and package cyclomatic complexity
    - cyclop
    # Finds unused code
    - deadcode
    # Go linter that checks if package imports are in a list of acceptable packages
    - depguard
    # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - dogsled
    # Tool for code clone detection
    - dupl
    # check for two durations multiplied together
    - durationcheck
    # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errcheck
    # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errname
    # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - errorlint
    # check exhaustiveness of enum switch statements
    - exhaustive
    # Checks if all struct's fields are initialized
    - exhaustivestruct
    # checks for pointers to enclosing loop variables
    - exportloopref
    # Forbids identifiers
    - forbidigo
    # finds forced type assertions
    - forcetypeassert
    # Tool for detection of long functions
    - funlen
    # check that no global variables exist
    #
    # This analyzer checks for global variables and errors on any found.
    #
    # A global variable is a variable declared in package scope and that can be read
    # and written to by any function within the package. Global variables can cause
    # side effects which are difficult to keep track of. A code in one function may
    # change the variables state while another unrelated chunk of code may be
    # effected by it.
    - gochecknoglobals
    # Checks that no init functions are present in Go code
    - gochecknoinits
    # Computes and checks the cognitive complexity of functions
    - gocognit
    # Finds repeated strings that could be replaced by a constant
    - goconst
    # Provides diagnostics that check for bugs, performance and style issues.
    # Extensible without recompilation through dynamic rules.
    # Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.
    - gocritic
    # Computes and checks the cyclomatic complexity of functions
    - gocyclo
    # Check if comments end in a period
    - godot
    # {{/* Tool for detection of FIXME, TODO and other comment keywords */}}
    - godox
    # Golang linter to check the errors handling expressions
    - goerr113
    # Checks if file header matches to pattern
    # - goheader
    # An analyzer to detect magic numbers.
    - gomnd
    # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomoddirectives
    # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    # - gomodguard
    # Checks that printf-like functions are named with f at the end
    - goprintffuncname
    # Inspects source code for security problems
    - gosec
    # Linter for Go source code that specializes in simplifying a code
    - gosimple
    # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - govet
    # Checks that your code uses short syntax for if-statements whenever possible
    - ifshort
    # Enforces consistent import aliases
    - importas
    # Detects when assignments to existing variables are not used
    - ineffassign
    # Accept Interfaces, Return Concrete Types
    # - ireturn
    # Reports long lines
    - lll
    # Finds slice declarations with non-zero initial length
    - makezero
    # Finds commonly misspelled English words in comments
    - misspell
    # Finds naked returns in functions greater than a specified function length
    - nakedret
    # Reports deeply nested if statements
    - nestif
    # Finds the code that returns nil even if it checks that the error is not nil.
    - nilerr
    # Checks that there is no simultaneous return of nil error and an invalid value.
    - nilnil
    # nlreturn checks for a new line before return and branch statements to increase code clarity
    # - nlreturn
    # noctx finds sending http request without context.Context
    - noctx
    # Reports ill-formed or insufficient nolint directives
    - nolintlint
    # paralleltest detects missing usage of t.Parallel() method in your Go test
    - paralleltest
    # Finds slice declarations that could potentially be preallocated
    - prealloc
    # find code that shadows one of Go's predeclared identifiers
    - predeclared
    # Check Prometheus metrics naming via promlint
    - promlinter
    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - revive
    # checks whether Err of rows is checked successfully
    - rowserrcheck
    # Checks that sql.Rows and sql.Stmt are closed.
    - sqlclosecheck
    # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - staticcheck
    # Finds unused struct fields
    - structcheck
    # Stylecheck is a replacement for golint
    - stylecheck
    # Checks the struct tags.
    - tagliatelle
    # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - tenv
    # linter that makes you use a separate _test package
    # - testpackage
    # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - thelper
    # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - tparallel
    # Like the front-end of a Go compiler, parses and type-checks Go code
    - typecheck
    # Remove unnecessary type conversions
    - unconvert
    # Reports unused function parameters
    - unparam
    # Checks Go code for unused constants, variables, functions and types
    - unused
    # Finds unused global variables and constants
    - varcheck
    # checks that the length of a variable's name matches its scope
    # - varnamelen
    # wastedassign finds wasted assignment statements.
    - wastedassign
    # Tool for detection of leading and trailing whitespace
    - whitespace
    # Checks that errors returned from external packages are wrapped
    - wrapcheck
    # Whitespace Linter - Forces you to use empty lines!
    - wsl
  disable:
    # Gci control golang package import order and make it always deterministic.
    # NOTE: already done automatically by running goimports
    - gci
    # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    # NOTE: already done automatically by running goimports
    - goimports
    # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    # NOTE: already done automatically by running gofumpt
    - gofmt
    # Gofumpt checks whether code was gofumpt-ed.
    # NOTE: already done automatically by running gofumpt
    - gofumpt
  # presets:
  #   - bugs
  #   - unused
  # fast: false

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # exclude:
  #   - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  # exclude-rules:
  #   # Exclude some linters from running on tests files.
  #   - path: _test\.go
  #     linters:
  #       - gocyclo
  #       - errcheck
  #       - dupl
  #       - gosec

  #   # Exclude known linters from partially hard-vendored code,
  #   # which is impossible to exclude via "nolint" comments.
  #   - path: internal/hmac/
  #     text: 'weak cryptographic primitive'
  #     linters:
  #       - gosec

  #   # Exclude some staticcheck messages
  #   - linters:
  #       - staticcheck
  #     text: 'SA9003:'

  #   # Exclude lll issues for long lines with go:generate
  #   - linters:
  #       - lll
  #     source: '^//go:generate '

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  # exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  # exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable. By default it's empty.
  # include:
  #   - EXC0002 # disable excluding of issues about comments from golint

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 5

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  # max-same-issues: 3

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  # new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

  # Fix found issues (if it's supported by the linter)
  fix: true
# severity:
# Default value is empty string.
# Set the default severity for issues. If severity rules are defined and the issues
# do not match or no severity is provided to the rule this will be the default
# severity applied. Severities should match the supported severity names of the
# selected out format.
# - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
# -   Checkstyle: https://checkstyle.sourceforge.io/property_types.html#severity
# -       GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
# default-severity: error

# The default value is false.
# If set to true severity-rules regular expressions become case sensitive.
# case-sensitive: false

# Default value is empty list.
# When a list of severity rules are provided, severity information will be added to lint
# issues. Severity rules have the same filtering capability as exclude rules except you
# are allowed to specify one matcher per severity rule.
# Only affects out formats that support setting severity information.
# rules:
#   - linters:
#       - dupl
#     severity: info
