# Code generated by devtool; DO NOT EDIT.
version: 2.1
orbs:
  tool: faetools/service-tool@0.0.9
executors:
  golang-dev:
    docker:
      - image: golang:{{ .GoVersion }}
  # go-kit:
  #   docker:
  #     - image: $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/go-kit:v{{ .DevtoolVersion }}
  #       aws_auth:
  #         aws_access_key_id: $AWS_ACCESS_KEY_ID
  #         aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
commands:
  pactinstall:
    description: 'Command for installing Pact binary'
    parameters:
      PACT_VERSION:
        default: '1.88.66' # needs to be updated automatically
        type: string
    steps:
      - run:
          name: 'Generate Checksum'
          command: |
            touch /tmp/cachechecksum.txt
            echo "<<parameters.PACT_VERSION>>" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - {{"pactinstall-{{ arch }}-v2-{{ checksum \"/tmp/cachechecksum.txt\" }}"}}
      - run:
          name: Install
          command: |
            cd /opt
            if [ -d "/tmp/cache" ]
            then

                echo "using cache";
                mkdir -p /opt/pact/bin
                cp -r /tmp/cache/pact/<<parameters.PACT_VERSION>>/. /opt/pact/.
            else

                echo "pulling from source";
                curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v<<parameters.PACT_VERSION>>/pact-<<parameters.PACT_VERSION>>-linux-x86_64.tar.gz
                tar xzf pact-<<parameters.PACT_VERSION>>-linux-x86_64.tar.gz
                mkdir -p /tmp/cache/pact/<<parameters.PACT_VERSION>>
                cp -r pact/. /tmp/cache/pact/<<parameters.PACT_VERSION>>/.
            fi
      - save_cache:
          key: {{"pactinstall-{{ arch }}-v2-{{ checksum \"/tmp/cachechecksum.txt\" }}"}}
          paths:
            - /tmp/cache
  gh-client-install:
    description: 'Install GH CLI client'
    parameters:
      GH_CLI_VERSION:
        type: string
        default: 1.11.0
    steps:
      - run:
          name: 'Generate Checksum'
          command: |
            touch /tmp/cachechecksum.txt
            echo "<< parameters.GH_CLI_VERSION >>" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - {{"ghclient-{{ arch }}-v1-{{ checksum \"/tmp/cachechecksum.txt\" }}"}}
      - run:
          name: Setup
          working_directory: /tmp
          command: |
            if [ -d "/tmp/cache" ]
            then

              sudo cp /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>/ghclient /usr/local/bin/gh
            else

              mkdir -p /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>
              wget https://github.com/cli/cli/releases/download/v<< parameters.GH_CLI_VERSION >>/gh_<< parameters.GH_CLI_VERSION >>_linux_amd64.tar.gz -O /tmp/ghcli.tar.gz
              tar -xf /tmp/ghcli.tar.gz
              sudo mv /tmp/gh_<< parameters.GH_CLI_VERSION >>_linux_amd64/bin/gh /usr/local/bin/gh
              sudo cp /usr/local/bin/gh /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>/ghclient
            fi
      - save_cache:
          key: {{ "ghclient-{{ arch }}-v1-{{ checksum \"/tmp/cachechecksum.txt\" }}" }}
          paths:
            - /tmp/cache
defaults: &resources
  team: '{{.Team}}'
  datastore_resource_names: '[]'
  datastore_composite_resource_names: '{}'
  object_store_resource_names: '[]'
  object_store_expire_days: '[]'
  assets_resource_names: '[]'
  assets_expire_days: '[]'
  consume_event_names: '{}'
  consume_event_receive_count: '{}'
  consume_event_hashed: true
  gateway_http_type: 'api'
  gateway_rate_limit_second: '5'
  gateway_allowed_payload_size: '1'
parameters:
  validate_pact:
    type: boolean
    default: false
  destroy_pr_capability_environment:
    type: boolean
    default: false
  destroy_pr_capability_version:
    type: string
    default: ''
jobs:
  test-unit:
    machine:
      image: ubuntu-2004:202104-01
    environment:
      GOPRIVATE: github.com/faetools/*
      GOFLAGS: '-mod=vendor'
      GOTESTSUM_VERSION: 1.6.4
      SONAR_SCANNER_VERSION: 4.6.1.2450
      GOLANGCI_LINT_VERSION: {{ .GolangciLintVersion }}
    steps:
      - checkout
      - run:
          name: 'Generate Checksum'
          command: |
            touch /tmp/cachechecksum.txt
            echo "$GOTESTSUM_VERSION-$SONAR_SCANNER_VERSION-$GOLANGCI_LINT_VERSION" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - {{"unit-setup-{{ arch }}-v1-{{ checksum \"/tmp/cachechecksum.txt\" }}"}}
      - run:
          name: 'Setup'
          command: |
            sudo mkdir -p /usr/local/go_workspace/bin
            if [ -d "/tmp/cache" ]
            then

                echo "using cache";
                sudo cp /tmp/cache/gotestsum/${GOTESTSUM_VERSION}/gotestsum /usr/local/bin/gotestsum
                mkdir -p /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux
                cp -r /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}/. /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/.
                sudo cp /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}/golangci-lint /usr/local/go_workspace/bin/golangci-lint
            else

                echo "pulling from source";
                curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION}_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip -P /tmp
                unzip /tmp/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip -d /tmp
                curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/go_workspace/bin v${GOLANGCI_LINT_VERSION}
                mkdir -p /tmp/cache/gotestsum/${GOTESTSUM_VERSION}
                mkdir -p /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}
                mkdir -p /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}
                cp /usr/local/bin/gotestsum /tmp/cache/gotestsum/${GOTESTSUM_VERSION}/gotestsum
                cp -r /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/. /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}/.
                sudo cp /usr/local/go_workspace/bin/golangci-lint /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}/golangci-lint
            fi
            mkdir /tmp/test-results
            mkdir -p /tmp/artifacts
      - save_cache:
          key: {{"unit-setup-{{ arch }}-v1-{{ checksum \"/tmp/cachechecksum.txt\" }}"}}
          paths:
            - /tmp/cache
      - restore_cache:
          keys:
            - {{"v2-golang-cache-{{ arch }}-{{ checksum \"go.sum\" }}"}}
      - run:
          name: 'Go Test'
          environment:
            CI: true
          command: |
						gotestsum --junitfile /tmp/test-results/unit-tests.xml ./... -race -coverprofile=coverage.out -coverpkg=./...
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: 'Golangci Lint'
          command: /usr/local/go_workspace/bin/golangci-lint run --out-format checkstyle --issues-exit-code=0 --timeout=5m0s > report.xml
      - store_artifacts:
          path: ~/project/report.xml
      - run:
          name: 'Code Coverage HTML'
          working_directory: cmd/app
          command: go tool cover -html=../../coverage.out -o /tmp/artifacts/coverage.html
      - store_artifacts:
          path: /tmp/artifacts
      - save_cache:
          key: {{"v2-golang-cache-{{ arch }}-{{ checksum \"go.sum\" }}"}}
          paths:
            - ~/.cache/go-build
            - ~/.cache/golangci-lint
      - run:
          name: 'Check sonar cache'
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]] && [[ "$CIRCLE_BRANCH" != "main" ]] && [[ -z "$CIRCLE_PULL_REQUEST" ]]; then

              circleci-agent step halt
            fi
      # - run:
      #     name: 'Generate Sonar Checksum'
      #     command: |
      #       touch /tmp/sonarchecksum.txt
      #       echo "$SONAR_SCANNER_VERSION" > /tmp/sonarchecksum.txt
      # - restore_cache:
      #     keys:
      #       - {{ "v1-sonar-cache-{{ arch }}-{{ checksum \"/tmp/sonarchecksum.txt\" }}" }}
      # - run:
      #     name: 'Analyse Code'
      #     command: |
      #       if [ "$CIRCLE_BRANCH" = "master" ] || [ "$CIRCLE_BRANCH" = "main" ]; then
      #         /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin/sonar-scanner -Dsonar.projectKey="faetools_$CIRCLE_PROJECT_REPONAME" -Dsonar.organization=fae -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/testdata/*,report.xml,**/*.gen.go,**/*.js,**/fixtures/*,**/mocks/*,cmd/app/**" -Dsonar.tests=. -Dsonar.test.inclusions="**/*_test.go" -Dsonar.test.exclusions="**/vendor/**" -Dsonar.go.coverage.reportPaths=cov.out -Dsonar.go.golangci-lint.reportPaths=report.xml -Dsonar.projectVersion=$(git rev-parse --verify HEAD);
      #       elif [ -n "$CIRCLE_PULL_REQUEST" ]; then
      #         base=$(curl -s -H "Authorization: token $GH_API" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PULL_REQUEST##*/}" | jq -r '.base.ref')
      #         /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin/sonar-scanner -Dsonar.projectKey="faetools_$CIRCLE_PROJECT_REPONAME" -Dsonar.organization=fae -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/testdata/*,report.xml,**/*.gen.go,**/*.js,**/fixtures/*,**/mocks/*,cmd/app/**" -Dsonar.tests=. -Dsonar.test.inclusions="**/*_test.go" -Dsonar.test.exclusions="**/vendor/**" -Dsonar.go.coverage.reportPaths=cov.out -Dsonar.go.golangci-lint.reportPaths=report.xml -Dsonar.pullrequest.key="${CIRCLE_PULL_REQUEST##*/}" -Dsonar.pullrequest.branch="$CIRCLE_BRANCH" -Dsonar.pullrequest.base="$base" -Dsonar.pullrequest.github.repository="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" -Dsonar.pullrequest.provider=github;
      #       else
      #         circleci-agent step halt
      #       fi
      # - save_cache:
      #     key: {{ "v1-sonar-cache-{{ arch }}-{{ checksum \"/tmp/sonarchecksum.txt\" }}" }}
      #     paths:
      #       - ~/.sonar/cache
  test-contract:
    executor: golang-dev
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: 'Run contract tests'
          command: |
            export PATH=$PATH:/opt/pact/bin
            go clean -testcache
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then go test -mod=vendor ./test/contracts/...; fi
            mkdir -p test/contracts/consumer/pacts
      - persist_to_workspace:
          root: /go/src/service/test/
          paths:
            - contracts/consumer/pacts/
      - store_artifacts:
          path: /go/src/service/test/contracts/consumer/logs
      - store_artifacts:
          path: /go/src/service/test/contracts/provider/logs
  pact-contract-upload:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - attach_workspace:
          at: /go/src/service/test/contracts/consumer/pacts/
      - pactinstall
      - run:
          name: 'Pact contract upload'
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer/pacts ]; then cd ./test/contracts/consumer/pacts/ && shopt -s nullglob && for j in *.json; do pact-broker publish --consumer-app-version $CIRCLE_SHA1 --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN $j --tag master; done; fi
  pact-verify:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    environment:
      PACT_WEBHOOK: true
    steps:
      - checkout
      - pactinstall
      - run:
          name: 'Verify Pact'
          command: |
            export PATH=$PATH:/opt/pact/bin
            go test -mod=vendor ./test/contracts/provider/
  can-i-deploy:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: 'Can I Deploy'
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then pact-broker can-i-deploy --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN --pacticipant $CIRCLE_PROJECT_REPONAME --version $CIRCLE_SHA1 --to production --retry-while-unknown 20; fi
  tag-pact-production:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: 'Tag Pact Production'
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then pact-broker create-version-tag --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN --pacticipant $CIRCLE_PROJECT_REPONAME --version $CIRCLE_SHA1 --tag production; fi
  # go-kit-validate:
  #   executor: go-kit
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - run:
  #         name: 'Validate'
  #         command: |
  #           set +e
  #           /dev-tool validate --strict > comment.txt
  #           status=$?
  #           set -eo pipefail
  #           if [ ! -s comment.txt ]; then
  #               /dev-tool ci pr-comment "Service Validation" "No issues found :)"
  #               exit 0
  #           fi
  #           cat comment.txt
  #           /dev-tool ci pr-comment "Service Validation" --file=comment.txt
  #           exit $status
  capability-test:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/capability-testing:latest
    parameters:
      pr:
        type: boolean
        default: false
    environment:
      CIRCLE_RUN_ON_PR: << parameters.pr >>
      PROXY_SERVER: 'https://mountebank-staging.fae-tools.com'
    working_directory: /
    parallelism: 2
    steps:
      - run:
          name: 'Capability Tests'
          command: '/run_tests.sh'
          no_output_timeout: 15m
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: 'Initiate Environment Destruction'
                when: on_fail
                command: |
                  echo "Initiating testing environment destruction"
                  PIPELINE_TRIGGER=$(curl --silent --show-error --fail -H "Content-Type: application/json" -H "Circle-Token: $CIRCLE_API_KEY" --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"destroy_pr_capability_environment":true,"destroy_pr_capability_version":"'"$CIRCLE_SHA1"'"}}' https://circleci.com/api/v2/project/gh/faetools/$CIRCLE_PROJECT_REPONAME/pipeline)
                  PIPELINE_ID=$(echo $PIPELINE_TRIGGER | jq -r ".id")
                  if [[ $PIPELINE_ID = "null" ]]; then echo "No pipeline id found in response"; echo $PIPELINE_TRIGGER; exit 1; fi
                  for i in {1..40}; do

                    WORKFLOW_STATUS=$(curl --silent --show-error --fail -H "Circle-Token: $CIRCLE_API_KEY" https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow | jq -r ".items[0].status")
                    if [[ $WORKFLOW_STATUS == "failed" ]]; then echo "Cleanup has failed, pipeline id $PIPELINE_ID. Please post in #gld-engineering with the CI link"; exit 1; fi
                    if [[ $WORKFLOW_STATUS != "running" && $WORKFLOW_STATUS != "null" && $WORKFLOW_STATUS != "failing" ]]; then echo "Remains of this test have been successfully removed"; exit 0; fi
                    if [[ $WORKFLOW_STATUS == "failing" ]]; then echo "Cleanup is not going well, prepare for failure"; fi
                    echo "."
                    sleep 15
                  done
                  echo "Destroy job failed to run or failed to complete after 10 minutes, please post in #gld-engineering with the CI link"
                  exit 1
      - store_test_results:
          path: /results
  # integration-tests:
  #   machine:
  #     image: ubuntu-2004:202104-01
  #   environment:
  #     GO111MODULE: 'on'
  #     GOFLAGS: '-mod=vendor'
  #     TEST_SERVICE_ADDR: 'http://localhost:8080'
  #     CI: 'true'
  #     GOOS: 'linux'
  #     CGO_ENABLED: '0'
  #   steps:
  #     - checkout
  #     - run:
  #         name: 'Install latest dev-tool'
  #         command: |
  #           ASSET_ID=$(curl --silent https://$GH_API:@api.github.com/repos/faetools/go-kit/releases/latest | jq -r ".assets | map(select(.name == \"dev-tool-linux-amd64.tar.gz\"))[0].id")
  #           if [[ "$ASSET_ID" == "null" ]]; then echo "Unable to get latest dev-tool release"; exit 1; fi
  #           curl --silent https://$GH_API:@api.github.com/repos/faetools/go-kit/releases/assets/$ASSET_ID -H "Accept: application/octet-stream" -L -O -J
  #           tar -xvf dev-tool-linux-amd64.tar.gz
  #     - restore_cache:
  #         keys:
  #           - {{"v1-golang-build-cache-{{ arch }}-{{ checksum \"go.sum\" }}"}}
  #     - run:
  #         name: 'Build Integration Image'
  #         command: 'go test -tags=integration -c -o integration github.com/faetools/$CIRCLE_PROJECT_REPONAME/cmd/app'
  #     - run:
  #         name: 'Start docker resources'
  #         command: './dev-tool docker up'
  #     - run:
  #         name: 'Start Service'
  #         command: './dev-tool run'
  #         background: true
  #     - save_cache:
  #         key: {{"v1-golang-build-cache-{{ arch }}-{{ checksum \"go.sum\" }}"}}
  #         paths:
  #           - ~/.cache/go-build
  #     - run:
  #         name: 'Wait for service to start'
  #         command: 'until $(curl --output /dev/null --silent --fail $TEST_SERVICE_ADDR/ping); do sleep 5; done'
  #         no_output_timeout: 2m
  #     - run:
  #         name: 'Run Integration Tests'
  #         command: 'if [ -f ./integration ]; then ./integration; fi'
  # service-json-diff:
  #   executor: go-kit
  #   working_directory: ~/project
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - run:
  #         name: Diff
  #         command: |
  #           if [ -n "$CIRCLE_PULL_REQUEST" ]; then
  #             apk add --no-cache jq curl
  #             base=$(curl -s -H "Authorization: token $GH_API" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PULL_REQUEST##*/}" | jq -r '.base.ref')
  #             output=$(git diff $base $CIRCLE_BRANCH -- service.json)
  #             if [[ ! -z "$output" ]]; then
  #               echo $output;
  #               echo -e 'diff is below. a = base branch, b = this branch' >> /tmp/gitcomment.txt;
  #               echo -e '```text' >> /tmp/gitcomment.txt;
  #               echo -e "$output" >> /tmp/gitcomment.txt;
  #               echo -e '```' >> /tmp/gitcomment.txt;
  #               /dev-tool ci pr-comment "service.json has been changed" --file=/tmp/gitcomment.txt
  #             fi
  #           fi
  # service-compiles:
    # executor: go-kit
    # working_directory: ~/project
    # resource_class: small
    # steps:
    #   - checkout
    #   - run:
    #       name: Check Service Compiles
    #       command: /dev-tool run --compile-only
workflows:
  master:
    unless: << pipeline.parameters.validate_pact >>
    jobs:
      - test-unit:
          name: Unit Tests
          # context: code-analysis
          filters:
            branches:
              only:
                - master
                # - staging
      - tool/build-amd:
          name: Build AMD
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
                # - staging
      - tool/build-arm:
          name: Build ARM
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
                # - staging
      - tool/build-combine:
          name: Build Combine
          context:
            - aws-production
            - default-region
          requires:
            - 'Build AMD'
            - 'Build ARM'
          filters:
            branches:
              only:
                - master
                # - staging
      - test-contract:
          name: Contract Tests
          # context: pactflow
          filters:
            branches:
              only:
                - master
                # - staging
      - pact-contract-upload:
          name: Pact Contract Upload
          # context: pactflow
          filters:
            branches:
              only:
                - master
                # - staging
          requires:
            - 'Contract Tests'
            - 'Unit Tests'
      - can-i-deploy:
          name: Can I Deploy
          # context: pactflow
          requires:
            - 'Pact Contract Upload'
          filters:
            branches:
              only:
                - master
                # - staging
      - tag-pact-production:
          name: Tag Pact Production
          # context: pactflow
          requires:
            - 'Can I Deploy'
          filters:
            branches:
              only:
                - master
                # - staging
      # - tool/resource-creation:
      #     name: Staging Resource Creation
      # #     # context: staging-resources-creator
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           # - staging
      #     requires:
      #       - 'Build Combine'
      #       - 'Unit Tests'
      #       - 'Can I Deploy'
      #     service_name_prefix: staging
      #     !!merge <<: *resources
      # - tool/deploy:
      #     name: Staging Deploy
      #     context: aws-production
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           # - staging
      #     # requires:
      #     #   - 'Staging Resource Creation'
      #     account_id: "378547578369"
      #     platform_environment: staging
      #     service_chart: 'fae/service-tool'
      #     service_chart_version: '0.12.0'
      #     sentry: false
      # - capability-test:
      #     name: 'Capability Tests'
      #     context: staging-capability-tests
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - staging
      #     requires:
      #       - 'Staging Deploy'
      - tool/resource-creation:
          name: Production Resource Creation
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
          requires:
            - Build Combine
            - Unit Tests
            - Can I Deploy
            # - Staging Deploy
          service_name_prefix: production
          !!merge <<: *resources
      - tool/deploy:
          name: Production Deploy
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
          requires:
            - Production Resource Creation
          account_id: "378547578369"
          platform_environment: production
          service_chart: fae/service-tool
          service_chart_version: 0.12.0
          sentry: false
  # rollback:
  #   jobs:
  #     - hold:
  #         name: 'Initiate Production Rollback'
  #         type: approval
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - staging
  #     - tool/rollback:
  #         name: Production Rollback
  #         context: aws-production
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - staging
  #         requires:
  #           - 'Initiate Production Rollback'
  #         account_id: '[insert production account ID here]'
  #         platform_environment: production
  pr:
    unless: << pipeline.parameters.destroy_pr_capability_environment >>
    jobs:
      - test-unit:
          name: Unit Tests
          context: code-analysis
          filters:
            branches:
              ignore:
                - master
                - main
      - test-contract:
          name: Contract Tests
          # context: pactflow
          filters:
            branches:
              ignore:
                - master
                - main
      # - service-json-diff:
      #     name: Service.json Diff
      #     context: aws-production
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - staging
      # - go-kit-validate:
      #     name: Go Kit Validate
      #     context: aws-production
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - staging
      {{ if and false .IsMicroservice }}
      - service-compiles:
          name: Service Compiles
          context: aws-production
          filters:
            branches:
              ignore:
                - master
                # - staging
      {{ end }}
      # - integration-tests:
      #           name: Integration Tests
      #           context: aws-production
      #           filters:
      #               branches:
      #                   ignore:
      #                       - master
      #                       - staging
  pact:
    when: << pipeline.parameters.validate_pact >>
    jobs:
      - pact-verify:
          name: Verify Pact
          context: pactflow
          filters:
            branches:
              only:
                - master
                - main
