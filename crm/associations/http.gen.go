// Package associations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package associations

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2Scopes        = "oauth2.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponsePublicAssociationStatus.
const (
	BatchResponsePublicAssociationStatusCANCELED BatchResponsePublicAssociationStatus = "CANCELED"

	BatchResponsePublicAssociationStatusCOMPLETE BatchResponsePublicAssociationStatus = "COMPLETE"

	BatchResponsePublicAssociationStatusPENDING BatchResponsePublicAssociationStatus = "PENDING"

	BatchResponsePublicAssociationStatusPROCESSING BatchResponsePublicAssociationStatus = "PROCESSING"
)

// Defines values for BatchResponsePublicAssociationMultiStatus.
const (
	BatchResponsePublicAssociationMultiStatusCANCELED BatchResponsePublicAssociationMultiStatus = "CANCELED"

	BatchResponsePublicAssociationMultiStatusCOMPLETE BatchResponsePublicAssociationMultiStatus = "COMPLETE"

	BatchResponsePublicAssociationMultiStatusPENDING BatchResponsePublicAssociationMultiStatus = "PENDING"

	BatchResponsePublicAssociationMultiStatusPROCESSING BatchResponsePublicAssociationMultiStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// AssociatedId defines model for AssociatedId.
type AssociatedId struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// BatchInputPublicAssociation defines model for BatchInputPublicAssociation.
type BatchInputPublicAssociation struct {
	Inputs []PublicAssociation `json:"inputs"`
}

// BatchInputPublicObjectId defines model for BatchInputPublicObjectId.
type BatchInputPublicObjectId struct {
	Inputs []PublicObjectId `json:"inputs"`
}

// BatchResponsePublicAssociation defines model for BatchResponsePublicAssociation.
type BatchResponsePublicAssociation struct {
	CompletedAt time.Time                            `json:"completedAt"`
	Errors      *[]StandardError                     `json:"errors,omitempty"`
	NumErrors   *int32                               `json:"numErrors,omitempty"`
	RequestedAt *time.Time                           `json:"requestedAt,omitempty"`
	Results     []PublicAssociation                  `json:"results"`
	StartedAt   time.Time                            `json:"startedAt"`
	Status      BatchResponsePublicAssociationStatus `json:"status"`
}

// BatchResponsePublicAssociationStatus defines model for BatchResponsePublicAssociation.Status.
type BatchResponsePublicAssociationStatus string

// BatchResponsePublicAssociationMulti defines model for BatchResponsePublicAssociationMulti.
type BatchResponsePublicAssociationMulti struct {
	CompletedAt time.Time                                 `json:"completedAt"`
	Errors      *[]StandardError                          `json:"errors,omitempty"`
	NumErrors   *int32                                    `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                `json:"requestedAt,omitempty"`
	Results     []PublicAssociationMulti                  `json:"results"`
	StartedAt   time.Time                                 `json:"startedAt"`
	Status      BatchResponsePublicAssociationMultiStatus `json:"status"`
}

// BatchResponsePublicAssociationMultiStatus defines model for BatchResponsePublicAssociationMulti.Status.
type BatchResponsePublicAssociationMultiStatus string

// CollectionResponsePublicAssociationDefiniton defines model for CollectionResponsePublicAssociationDefiniton.
type CollectionResponsePublicAssociationDefiniton struct {
	Paging  *Paging                      `json:"paging,omitempty"`
	Results []PublicAssociationDefiniton `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage `json:"next,omitempty"`
}

// PublicAssociation defines model for PublicAssociation.
type PublicAssociation struct {
	From PublicObjectId `json:"from"`
	To   PublicObjectId `json:"to"`
	Type string         `json:"type"`
}

// PublicAssociationDefiniton defines model for PublicAssociationDefiniton.
type PublicAssociationDefiniton struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PublicAssociationMulti defines model for PublicAssociationMulti.
type PublicAssociationMulti struct {
	From PublicObjectId `json:"from"`

	// The IDs of objects that are associated with the object identified by the ID in 'from'.
	To []AssociatedId `json:"to"`
}

// PublicObjectId defines model for PublicObjectId.
type PublicObjectId struct {
	// The unique ID that identifies an object.
	Id string `json:"id"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONBody defines parameters for Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive.
type Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONBody BatchInputPublicAssociation

// Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONBody defines parameters for Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate.
type Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONBody BatchInputPublicAssociation

// Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONBody defines parameters for Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead.
type Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONBody BatchInputPublicObjectId

// Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody defines body for Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive for application/json ContentType.
type Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONBody

// Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody defines body for Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate for application/json ContentType.
type Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONBody

// Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody defines body for Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead for application/json ContentType.
type Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll request
	Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequestWithBody(c.Server, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequest(c.Server, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequestWithBody(c.Server, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequest(c.Server, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequestWithBody(c.Server, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequest(c.Server, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllRequest(c.Server, fromObjectType, toObjectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequest calls the generic Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive builder with application/json body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequest(server string, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequestWithBody(server, fromObjectType, toObjectType, "application/json", bodyReader)
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequestWithBody generates requests for Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive with any type of body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveRequestWithBody(server string, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/archive", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequest calls the generic Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate builder with application/json body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequest(server string, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequestWithBody(server, fromObjectType, toObjectType, "application/json", bodyReader)
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequestWithBody generates requests for Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate with any type of body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateRequestWithBody(server string, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/create", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequest calls the generic Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead builder with application/json body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequest(server string, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequestWithBody(server, fromObjectType, toObjectType, "application/json", bodyReader)
}

// NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequestWithBody generates requests for Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead with any type of body
func NewPostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadRequestWithBody(server string, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/read", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllRequest generates requests for Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll
func NewGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllRequest(server string, fromObjectType string, toObjectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/associations/%s/%s/types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse, error)

	// Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse, error)

	// Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead request with any body
	Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse, error)
	Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse, error)

	// Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll request
	Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllWithResponse(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...RequestEditorFn) (*Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse, error)
}

type Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponsePublicAssociation
	JSON207      *BatchResponsePublicAssociation
}

// Status returns HTTPResponse.Status
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponsePublicAssociationMulti
	JSON207      *BatchResponsePublicAssociationMulti
}

// Status returns HTTPResponse.Status
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePublicAssociationDefiniton
}

// Status returns HTTPResponse.Status
func (r Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBodyWithResponse request with arbitrary body returning *Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse
func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchive(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse(rsp)
}

// Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse
func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreate(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse(rsp)
}

// Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBodyWithResponse request with arbitrary body returning *Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse
func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithResponse(ctx context.Context, fromObjectType string, toObjectType string, body Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3associationsFromObjectTypeToObjectTypebatchreadRead(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse(rsp)
}

// Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllWithResponse request returning *Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse
func (c *ClientWithResponses) Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllWithResponse(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...RequestEditorFn) (*Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse, error) {
	rsp, err := c.Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAll(ctx, fromObjectType, toObjectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse(rsp)
}

// ParsePostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse parses an HTTP response from a Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveWithResponse call
func ParsePostcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse(rsp *http.Response) (*Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3associationsFromObjectTypeToObjectTypebatcharchiveArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse parses an HTTP response from a Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateWithResponse call
func ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse(rsp *http.Response) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3associationsFromObjectTypeToObjectTypebatchcreateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponsePublicAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponsePublicAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse parses an HTTP response from a Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadWithResponse call
func ParsePostcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse(rsp *http.Response) (*Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3associationsFromObjectTypeToObjectTypebatchreadReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponsePublicAssociationMulti
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponsePublicAssociationMulti
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParseGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse parses an HTTP response from a Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllWithResponse call
func ParseGetcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse(rsp *http.Response) (*Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3associationsFromObjectTypeToObjectTypetypesGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePublicAssociationDefiniton
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
