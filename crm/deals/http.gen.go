// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package deals

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2Scopes        = "oauth2.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseSimplePublicObjectStatus.
const (
	BatchResponseSimplePublicObjectStatusCANCELED BatchResponseSimplePublicObjectStatus = "CANCELED"

	BatchResponseSimplePublicObjectStatusCOMPLETE BatchResponseSimplePublicObjectStatus = "COMPLETE"

	BatchResponseSimplePublicObjectStatusPENDING BatchResponseSimplePublicObjectStatus = "PENDING"

	BatchResponseSimplePublicObjectStatusPROCESSING BatchResponseSimplePublicObjectStatus = "PROCESSING"
)

// Defines values for BatchResponseSimplePublicObjectWithErrorsStatus.
const (
	BatchResponseSimplePublicObjectWithErrorsStatusCANCELED BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"

	BatchResponseSimplePublicObjectWithErrorsStatusCOMPLETE BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"

	BatchResponseSimplePublicObjectWithErrorsStatusPENDING BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"

	BatchResponseSimplePublicObjectWithErrorsStatusPROCESSING BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for FilterOperator.
const (
	FilterOperatorBETWEEN FilterOperator = "BETWEEN"

	FilterOperatorCONTAINSTOKEN FilterOperator = "CONTAINS_TOKEN"

	FilterOperatorEQ FilterOperator = "EQ"

	FilterOperatorGT FilterOperator = "GT"

	FilterOperatorGTE FilterOperator = "GTE"

	FilterOperatorHASPROPERTY FilterOperator = "HAS_PROPERTY"

	FilterOperatorIN FilterOperator = "IN"

	FilterOperatorLT FilterOperator = "LT"

	FilterOperatorLTE FilterOperator = "LTE"

	FilterOperatorNEQ FilterOperator = "NEQ"

	FilterOperatorNOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"

	FilterOperatorNOTHASPROPERTY FilterOperator = "NOT_HAS_PROPERTY"

	FilterOperatorNOTIN FilterOperator = "NOT_IN"
)

// AssociatedId defines model for AssociatedId.
type AssociatedId struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// BatchInputSimplePublicObjectBatchInput defines model for BatchInputSimplePublicObjectBatchInput.
type BatchInputSimplePublicObjectBatchInput struct {
	Inputs []SimplePublicObjectBatchInput `json:"inputs"`
}

// BatchInputSimplePublicObjectId defines model for BatchInputSimplePublicObjectId.
type BatchInputSimplePublicObjectId struct {
	Inputs []SimplePublicObjectId `json:"inputs"`
}

// BatchInputSimplePublicObjectInput defines model for BatchInputSimplePublicObjectInput.
type BatchInputSimplePublicObjectInput struct {
	Inputs []SimplePublicObjectInput `json:"inputs"`
}

// BatchReadInputSimplePublicObjectId defines model for BatchReadInputSimplePublicObjectId.
type BatchReadInputSimplePublicObjectId struct {
	IdProperty *string                `json:"idProperty,omitempty"`
	Inputs     []SimplePublicObjectId `json:"inputs"`
	Properties []string               `json:"properties"`
}

// BatchResponseSimplePublicObject defines model for BatchResponseSimplePublicObject.
type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time                              `json:"completedAt"`
	Links       *BatchResponseSimplePublicObject_Links `json:"links,omitempty"`
	RequestedAt *time.Time                             `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                   `json:"results"`
	StartedAt   time.Time                              `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectStatus  `json:"status"`
}

// BatchResponseSimplePublicObject_Links defines model for BatchResponseSimplePublicObject.Links.
type BatchResponseSimplePublicObject_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectStatus defines model for BatchResponseSimplePublicObject.Status.
type BatchResponseSimplePublicObjectStatus string

// BatchResponseSimplePublicObjectWithErrors defines model for BatchResponseSimplePublicObjectWithErrors.
type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                        `json:"completedAt"`
	Errors      *[]StandardError                                 `json:"errors,omitempty"`
	Links       *BatchResponseSimplePublicObjectWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                           `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                       `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                             `json:"results"`
	StartedAt   time.Time                                        `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus  `json:"status"`
}

// BatchResponseSimplePublicObjectWithErrors_Links defines model for BatchResponseSimplePublicObjectWithErrors.Links.
type BatchResponseSimplePublicObjectWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectWithErrorsStatus defines model for BatchResponseSimplePublicObjectWithErrors.Status.
type BatchResponseSimplePublicObjectWithErrorsStatus string

// CollectionResponseAssociatedId defines model for CollectionResponseAssociatedId.
type CollectionResponseAssociatedId struct {
	Paging  *Paging        `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseAssociatedIdForwardPaging defines model for CollectionResponseAssociatedIdForwardPaging.
type CollectionResponseAssociatedIdForwardPaging struct {
	Paging  *ForwardPaging `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseSimplePublicObjectWithAssociationsForwardPaging defines model for CollectionResponseSimplePublicObjectWithAssociationsForwardPaging.
type CollectionResponseSimplePublicObjectWithAssociationsForwardPaging struct {
	Paging  *ForwardPaging                       `json:"paging,omitempty"`
	Results []SimplePublicObjectWithAssociations `json:"results"`
}

// CollectionResponseWithTotalSimplePublicObjectForwardPaging defines model for CollectionResponseWithTotalSimplePublicObjectForwardPaging.
type CollectionResponseWithTotalSimplePublicObjectForwardPaging struct {
	Paging  *ForwardPaging       `json:"paging,omitempty"`
	Results []SimplePublicObject `json:"results"`
	Total   int32                `json:"total"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Filter defines model for Filter.
type Filter struct {
	// null
	Operator     FilterOperator `json:"operator"`
	PropertyName string         `json:"propertyName"`
	Value        *string        `json:"value,omitempty"`
}

// null
type FilterOperator string

// FilterGroup defines model for FilterGroup.
type FilterGroup struct {
	Filters []Filter `json:"filters"`
}

// ForwardPaging defines model for ForwardPaging.
type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage     `json:"next,omitempty"`
	Prev *PreviousPage `json:"prev,omitempty"`
}

// PreviousPage defines model for PreviousPage.
type PreviousPage struct {
	Before string  `json:"before"`
	Link   *string `json:"link,omitempty"`
}

// PublicObjectSearchRequest defines model for PublicObjectSearchRequest.
type PublicObjectSearchRequest struct {
	After        int32         `json:"after"`
	FilterGroups []FilterGroup `json:"filterGroups"`
	Limit        int32         `json:"limit"`
	Properties   []string      `json:"properties"`
	Query        *string       `json:"query,omitempty"`
	Sorts        []string      `json:"sorts"`
}

// SimplePublicObject defines model for SimplePublicObject.
type SimplePublicObject struct {
	Archived   *bool                         `json:"archived,omitempty"`
	ArchivedAt *time.Time                    `json:"archivedAt,omitempty"`
	CreatedAt  time.Time                     `json:"createdAt"`
	Id         string                        `json:"id"`
	Properties SimplePublicObject_Properties `json:"properties"`
	UpdatedAt  time.Time                     `json:"updatedAt"`
}

// SimplePublicObject_Properties defines model for SimplePublicObject.Properties.
type SimplePublicObject_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectBatchInput defines model for SimplePublicObjectBatchInput.
type SimplePublicObjectBatchInput struct {
	Id         string                                  `json:"id"`
	Properties SimplePublicObjectBatchInput_Properties `json:"properties"`
}

// SimplePublicObjectBatchInput_Properties defines model for SimplePublicObjectBatchInput.Properties.
type SimplePublicObjectBatchInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectId defines model for SimplePublicObjectId.
type SimplePublicObjectId struct {
	Id string `json:"id"`
}

// SimplePublicObjectInput defines model for SimplePublicObjectInput.
type SimplePublicObjectInput struct {
	Properties SimplePublicObjectInput_Properties `json:"properties"`
}

// SimplePublicObjectInput_Properties defines model for SimplePublicObjectInput.Properties.
type SimplePublicObjectInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectWithAssociations defines model for SimplePublicObjectWithAssociations.
type SimplePublicObjectWithAssociations struct {
	Archived     *bool                                            `json:"archived,omitempty"`
	ArchivedAt   *time.Time                                       `json:"archivedAt,omitempty"`
	Associations *SimplePublicObjectWithAssociations_Associations `json:"associations,omitempty"`
	CreatedAt    time.Time                                        `json:"createdAt"`
	Id           string                                           `json:"id"`
	Properties   SimplePublicObjectWithAssociations_Properties    `json:"properties"`
	UpdatedAt    time.Time                                        `json:"updatedAt"`
}

// SimplePublicObjectWithAssociations_Associations defines model for SimplePublicObjectWithAssociations.Associations.
type SimplePublicObjectWithAssociations_Associations struct {
	AdditionalProperties map[string]CollectionResponseAssociatedId `json:"-"`
}

// SimplePublicObjectWithAssociations_Properties defines model for SimplePublicObjectWithAssociations.Properties.
type SimplePublicObjectWithAssociations_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getcrmv3objectsdealsGetPageParams defines parameters for Getcrmv3objectsdealsGetPage.
type Getcrmv3objectsdealsGetPageParams struct {
	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsdealsCreateJSONBody defines parameters for Postcrmv3objectsdealsCreate.
type Postcrmv3objectsdealsCreateJSONBody SimplePublicObjectInput

// Postcrmv3objectsdealsbatcharchiveArchiveJSONBody defines parameters for Postcrmv3objectsdealsbatcharchiveArchive.
type Postcrmv3objectsdealsbatcharchiveArchiveJSONBody BatchInputSimplePublicObjectId

// Postcrmv3objectsdealsbatchcreateCreateJSONBody defines parameters for Postcrmv3objectsdealsbatchcreateCreate.
type Postcrmv3objectsdealsbatchcreateCreateJSONBody BatchInputSimplePublicObjectInput

// Postcrmv3objectsdealsbatchreadReadJSONBody defines parameters for Postcrmv3objectsdealsbatchreadRead.
type Postcrmv3objectsdealsbatchreadReadJSONBody BatchReadInputSimplePublicObjectId

// Postcrmv3objectsdealsbatchreadReadParams defines parameters for Postcrmv3objectsdealsbatchreadRead.
type Postcrmv3objectsdealsbatchreadReadParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsdealsbatchupdateUpdateJSONBody defines parameters for Postcrmv3objectsdealsbatchupdateUpdate.
type Postcrmv3objectsdealsbatchupdateUpdateJSONBody BatchInputSimplePublicObjectBatchInput

// Postcrmv3objectsdealssearchDoSearchJSONBody defines parameters for Postcrmv3objectsdealssearchDoSearch.
type Postcrmv3objectsdealssearchDoSearchJSONBody PublicObjectSearchRequest

// Getcrmv3objectsdealsDealIdGetByIdParams defines parameters for Getcrmv3objectsdealsDealIdGetById.
type Getcrmv3objectsdealsDealIdGetByIdParams struct {
	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`

	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Patchcrmv3objectsdealsDealIdUpdateJSONBody defines parameters for Patchcrmv3objectsdealsDealIdUpdate.
type Patchcrmv3objectsdealsDealIdUpdateJSONBody SimplePublicObjectInput

// Patchcrmv3objectsdealsDealIdUpdateParams defines parameters for Patchcrmv3objectsdealsDealIdUpdate.
type Patchcrmv3objectsdealsDealIdUpdateParams struct {
	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams defines parameters for Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll.
type Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams struct {
	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`
}

// Postcrmv3objectsdealsCreateJSONRequestBody defines body for Postcrmv3objectsdealsCreate for application/json ContentType.
type Postcrmv3objectsdealsCreateJSONRequestBody Postcrmv3objectsdealsCreateJSONBody

// Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody defines body for Postcrmv3objectsdealsbatcharchiveArchive for application/json ContentType.
type Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody Postcrmv3objectsdealsbatcharchiveArchiveJSONBody

// Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody defines body for Postcrmv3objectsdealsbatchcreateCreate for application/json ContentType.
type Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody Postcrmv3objectsdealsbatchcreateCreateJSONBody

// Postcrmv3objectsdealsbatchreadReadJSONRequestBody defines body for Postcrmv3objectsdealsbatchreadRead for application/json ContentType.
type Postcrmv3objectsdealsbatchreadReadJSONRequestBody Postcrmv3objectsdealsbatchreadReadJSONBody

// Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody defines body for Postcrmv3objectsdealsbatchupdateUpdate for application/json ContentType.
type Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody Postcrmv3objectsdealsbatchupdateUpdateJSONBody

// Postcrmv3objectsdealssearchDoSearchJSONRequestBody defines body for Postcrmv3objectsdealssearchDoSearch for application/json ContentType.
type Postcrmv3objectsdealssearchDoSearchJSONRequestBody Postcrmv3objectsdealssearchDoSearchJSONBody

// Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody defines body for Patchcrmv3objectsdealsDealIdUpdate for application/json ContentType.
type Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody Patchcrmv3objectsdealsDealIdUpdateJSONBody

// Getter for additional properties for BatchResponseSimplePublicObject_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObject_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObject_Links
func (a *BatchResponseSimplePublicObject_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObject_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObject_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObjectWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links
func (a *BatchResponseSimplePublicObjectWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObjectWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObjectWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObject_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObject_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObject_Properties
func (a *SimplePublicObject_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a *SimplePublicObject_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a SimplePublicObject_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectBatchInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectBatchInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectBatchInput_Properties
func (a *SimplePublicObjectBatchInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectBatchInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectBatchInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectInput_Properties
func (a *SimplePublicObjectInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Associations. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Associations) Get(fieldName string) (value CollectionResponseAssociatedId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Associations
func (a *SimplePublicObjectWithAssociations_Associations) Set(fieldName string, value CollectionResponseAssociatedId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Associations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
		for fieldName, fieldBuf := range object {
			var fieldVal CollectionResponseAssociatedId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Associations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Properties
func (a *SimplePublicObjectWithAssociations_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3objectsdealsGetPage request
	Getcrmv3objectsdealsGetPage(ctx context.Context, params *Getcrmv3objectsdealsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealsCreate request with any body
	Postcrmv3objectsdealsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealsCreate(ctx context.Context, body Postcrmv3objectsdealsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealsbatcharchiveArchive request with any body
	Postcrmv3objectsdealsbatcharchiveArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealsbatcharchiveArchive(ctx context.Context, body Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealsbatchcreateCreate request with any body
	Postcrmv3objectsdealsbatchcreateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealsbatchcreateCreate(ctx context.Context, body Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealsbatchreadRead request with any body
	Postcrmv3objectsdealsbatchreadReadWithBody(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealsbatchreadRead(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, body Postcrmv3objectsdealsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealsbatchupdateUpdate request with any body
	Postcrmv3objectsdealsbatchupdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealsbatchupdateUpdate(ctx context.Context, body Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsdealssearchDoSearch request with any body
	Postcrmv3objectsdealssearchDoSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsdealssearchDoSearch(ctx context.Context, body Postcrmv3objectsdealssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsdealsDealIdArchive request
	Deletecrmv3objectsdealsDealIdArchive(ctx context.Context, dealId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsdealsDealIdGetById request
	Getcrmv3objectsdealsDealIdGetById(ctx context.Context, dealId string, params *Getcrmv3objectsdealsDealIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3objectsdealsDealIdUpdate request with any body
	Patchcrmv3objectsdealsDealIdUpdateWithBody(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3objectsdealsDealIdUpdate(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, body Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll(ctx context.Context, dealId string, toObjectType string, params *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3objectsdealsGetPage(ctx context.Context, params *Getcrmv3objectsdealsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsdealsGetPageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsCreate(ctx context.Context, body Postcrmv3objectsdealsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatcharchiveArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatcharchiveArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatcharchiveArchive(ctx context.Context, body Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatcharchiveArchiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchcreateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchcreateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchcreateCreate(ctx context.Context, body Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchcreateCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchreadReadWithBody(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchreadReadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchreadRead(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, body Postcrmv3objectsdealsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchreadReadRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchupdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchupdateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealsbatchupdateUpdate(ctx context.Context, body Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealsbatchupdateUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealssearchDoSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealssearchDoSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsdealssearchDoSearch(ctx context.Context, body Postcrmv3objectsdealssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsdealssearchDoSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsdealsDealIdArchive(ctx context.Context, dealId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsdealsDealIdArchiveRequest(c.Server, dealId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsdealsDealIdGetById(ctx context.Context, dealId string, params *Getcrmv3objectsdealsDealIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsdealsDealIdGetByIdRequest(c.Server, dealId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsdealsDealIdUpdateWithBody(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsdealsDealIdUpdateRequestWithBody(c.Server, dealId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsdealsDealIdUpdate(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, body Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsdealsDealIdUpdateRequest(c.Server, dealId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll(ctx context.Context, dealId string, toObjectType string, params *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllRequest(c.Server, dealId, toObjectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(c.Server, dealId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(c.Server, dealId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3objectsdealsGetPageRequest generates requests for Getcrmv3objectsdealsGetPage
func NewGetcrmv3objectsdealsGetPageRequest(server string, params *Getcrmv3objectsdealsGetPageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3objectsdealsCreateRequest calls the generic Postcrmv3objectsdealsCreate builder with application/json body
func NewPostcrmv3objectsdealsCreateRequest(server string, body Postcrmv3objectsdealsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealsCreateRequestWithBody generates requests for Postcrmv3objectsdealsCreate with any type of body
func NewPostcrmv3objectsdealsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsdealsbatcharchiveArchiveRequest calls the generic Postcrmv3objectsdealsbatcharchiveArchive builder with application/json body
func NewPostcrmv3objectsdealsbatcharchiveArchiveRequest(server string, body Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealsbatcharchiveArchiveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealsbatcharchiveArchiveRequestWithBody generates requests for Postcrmv3objectsdealsbatcharchiveArchive with any type of body
func NewPostcrmv3objectsdealsbatcharchiveArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/batch/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsdealsbatchcreateCreateRequest calls the generic Postcrmv3objectsdealsbatchcreateCreate builder with application/json body
func NewPostcrmv3objectsdealsbatchcreateCreateRequest(server string, body Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealsbatchcreateCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealsbatchcreateCreateRequestWithBody generates requests for Postcrmv3objectsdealsbatchcreateCreate with any type of body
func NewPostcrmv3objectsdealsbatchcreateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/batch/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsdealsbatchreadReadRequest calls the generic Postcrmv3objectsdealsbatchreadRead builder with application/json body
func NewPostcrmv3objectsdealsbatchreadReadRequest(server string, params *Postcrmv3objectsdealsbatchreadReadParams, body Postcrmv3objectsdealsbatchreadReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealsbatchreadReadRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealsbatchreadReadRequestWithBody generates requests for Postcrmv3objectsdealsbatchreadRead with any type of body
func NewPostcrmv3objectsdealsbatchreadReadRequestWithBody(server string, params *Postcrmv3objectsdealsbatchreadReadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/batch/read")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsdealsbatchupdateUpdateRequest calls the generic Postcrmv3objectsdealsbatchupdateUpdate builder with application/json body
func NewPostcrmv3objectsdealsbatchupdateUpdateRequest(server string, body Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealsbatchupdateUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealsbatchupdateUpdateRequestWithBody generates requests for Postcrmv3objectsdealsbatchupdateUpdate with any type of body
func NewPostcrmv3objectsdealsbatchupdateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/batch/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsdealssearchDoSearchRequest calls the generic Postcrmv3objectsdealssearchDoSearch builder with application/json body
func NewPostcrmv3objectsdealssearchDoSearchRequest(server string, body Postcrmv3objectsdealssearchDoSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsdealssearchDoSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsdealssearchDoSearchRequestWithBody generates requests for Postcrmv3objectsdealssearchDoSearch with any type of body
func NewPostcrmv3objectsdealssearchDoSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3objectsdealsDealIdArchiveRequest generates requests for Deletecrmv3objectsdealsDealIdArchive
func NewDeletecrmv3objectsdealsDealIdArchiveRequest(server string, dealId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3objectsdealsDealIdGetByIdRequest generates requests for Getcrmv3objectsdealsDealIdGetById
func NewGetcrmv3objectsdealsDealIdGetByIdRequest(server string, dealId string, params *Getcrmv3objectsdealsDealIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3objectsdealsDealIdUpdateRequest calls the generic Patchcrmv3objectsdealsDealIdUpdate builder with application/json body
func NewPatchcrmv3objectsdealsDealIdUpdateRequest(server string, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, body Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3objectsdealsDealIdUpdateRequestWithBody(server, dealId, params, "application/json", bodyReader)
}

// NewPatchcrmv3objectsdealsDealIdUpdateRequestWithBody generates requests for Patchcrmv3objectsdealsDealIdUpdate with any type of body
func NewPatchcrmv3objectsdealsDealIdUpdateRequestWithBody(server string, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllRequest generates requests for Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll
func NewGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllRequest(server string, dealId string, toObjectType string, params *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s/associations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest generates requests for Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive
func NewDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(server string, dealId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest generates requests for Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate
func NewPutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(server string, dealId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dealId", runtime.ParamLocationPath, dealId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/deals/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3objectsdealsGetPage request
	Getcrmv3objectsdealsGetPageWithResponse(ctx context.Context, params *Getcrmv3objectsdealsGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsGetPageResponse, error)

	// Postcrmv3objectsdealsCreate request with any body
	Postcrmv3objectsdealsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsCreateResponse, error)
	Postcrmv3objectsdealsCreateWithResponse(ctx context.Context, body Postcrmv3objectsdealsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsCreateResponse, error)

	// Postcrmv3objectsdealsbatcharchiveArchive request with any body
	Postcrmv3objectsdealsbatcharchiveArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatcharchiveArchiveResponse, error)
	Postcrmv3objectsdealsbatcharchiveArchiveWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatcharchiveArchiveResponse, error)

	// Postcrmv3objectsdealsbatchcreateCreate request with any body
	Postcrmv3objectsdealsbatchcreateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchcreateCreateResponse, error)
	Postcrmv3objectsdealsbatchcreateCreateWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchcreateCreateResponse, error)

	// Postcrmv3objectsdealsbatchreadRead request with any body
	Postcrmv3objectsdealsbatchreadReadWithBodyWithResponse(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchreadReadResponse, error)
	Postcrmv3objectsdealsbatchreadReadWithResponse(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, body Postcrmv3objectsdealsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchreadReadResponse, error)

	// Postcrmv3objectsdealsbatchupdateUpdate request with any body
	Postcrmv3objectsdealsbatchupdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchupdateUpdateResponse, error)
	Postcrmv3objectsdealsbatchupdateUpdateWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchupdateUpdateResponse, error)

	// Postcrmv3objectsdealssearchDoSearch request with any body
	Postcrmv3objectsdealssearchDoSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealssearchDoSearchResponse, error)
	Postcrmv3objectsdealssearchDoSearchWithResponse(ctx context.Context, body Postcrmv3objectsdealssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealssearchDoSearchResponse, error)

	// Deletecrmv3objectsdealsDealIdArchive request
	Deletecrmv3objectsdealsDealIdArchiveWithResponse(ctx context.Context, dealId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsdealsDealIdArchiveResponse, error)

	// Getcrmv3objectsdealsDealIdGetById request
	Getcrmv3objectsdealsDealIdGetByIdWithResponse(ctx context.Context, dealId string, params *Getcrmv3objectsdealsDealIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsDealIdGetByIdResponse, error)

	// Patchcrmv3objectsdealsDealIdUpdate request with any body
	Patchcrmv3objectsdealsDealIdUpdateWithBodyWithResponse(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsdealsDealIdUpdateResponse, error)
	Patchcrmv3objectsdealsDealIdUpdateWithResponse(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, body Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsdealsDealIdUpdateResponse, error)

	// Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, dealId string, toObjectType string, params *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse, error)

	// Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error)

	// Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error)
}

type Getcrmv3objectsdealsGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsdealsGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsdealsGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealsbatcharchiveArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealsbatcharchiveArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealsbatcharchiveArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealsbatchcreateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealsbatchcreateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealsbatchcreateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealsbatchreadReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealsbatchreadReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealsbatchreadReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealsbatchupdateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealsbatchupdateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealsbatchupdateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsdealssearchDoSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseWithTotalSimplePublicObjectForwardPaging
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsdealssearchDoSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsdealssearchDoSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsdealsDealIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsdealsDealIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsdealsDealIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsdealsDealIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsdealsDealIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsdealsDealIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3objectsdealsDealIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3objectsdealsDealIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3objectsdealsDealIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseAssociatedIdForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3objectsdealsGetPageWithResponse request returning *Getcrmv3objectsdealsGetPageResponse
func (c *ClientWithResponses) Getcrmv3objectsdealsGetPageWithResponse(ctx context.Context, params *Getcrmv3objectsdealsGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsGetPageResponse, error) {
	rsp, err := c.Getcrmv3objectsdealsGetPage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsdealsGetPageResponse(rsp)
}

// Postcrmv3objectsdealsCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealsCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsdealsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealsCreateWithResponse(ctx context.Context, body Postcrmv3objectsdealsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsCreateResponse(rsp)
}

// Postcrmv3objectsdealsbatcharchiveArchiveWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealsbatcharchiveArchiveResponse
func (c *ClientWithResponses) Postcrmv3objectsdealsbatcharchiveArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatcharchiveArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatcharchiveArchiveResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealsbatcharchiveArchiveWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatcharchiveArchive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatcharchiveArchiveResponse(rsp)
}

// Postcrmv3objectsdealsbatchcreateCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealsbatchcreateCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsdealsbatchcreateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchcreateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchcreateCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealsbatchcreateCreateWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchcreateCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchcreateCreateResponse(rsp)
}

// Postcrmv3objectsdealsbatchreadReadWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealsbatchreadReadResponse
func (c *ClientWithResponses) Postcrmv3objectsdealsbatchreadReadWithBodyWithResponse(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchreadReadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchreadReadResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealsbatchreadReadWithResponse(ctx context.Context, params *Postcrmv3objectsdealsbatchreadReadParams, body Postcrmv3objectsdealsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchreadRead(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchreadReadResponse(rsp)
}

// Postcrmv3objectsdealsbatchupdateUpdateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealsbatchupdateUpdateResponse
func (c *ClientWithResponses) Postcrmv3objectsdealsbatchupdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchupdateUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchupdateUpdateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealsbatchupdateUpdateWithResponse(ctx context.Context, body Postcrmv3objectsdealsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealsbatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsdealsbatchupdateUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealsbatchupdateUpdateResponse(rsp)
}

// Postcrmv3objectsdealssearchDoSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsdealssearchDoSearchResponse
func (c *ClientWithResponses) Postcrmv3objectsdealssearchDoSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealssearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsdealssearchDoSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealssearchDoSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsdealssearchDoSearchWithResponse(ctx context.Context, body Postcrmv3objectsdealssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsdealssearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsdealssearchDoSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsdealssearchDoSearchResponse(rsp)
}

// Deletecrmv3objectsdealsDealIdArchiveWithResponse request returning *Deletecrmv3objectsdealsDealIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsdealsDealIdArchiveWithResponse(ctx context.Context, dealId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsdealsDealIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsdealsDealIdArchive(ctx, dealId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsdealsDealIdArchiveResponse(rsp)
}

// Getcrmv3objectsdealsDealIdGetByIdWithResponse request returning *Getcrmv3objectsdealsDealIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3objectsdealsDealIdGetByIdWithResponse(ctx context.Context, dealId string, params *Getcrmv3objectsdealsDealIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsDealIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3objectsdealsDealIdGetById(ctx, dealId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsdealsDealIdGetByIdResponse(rsp)
}

// Patchcrmv3objectsdealsDealIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3objectsdealsDealIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3objectsdealsDealIdUpdateWithBodyWithResponse(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsdealsDealIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsdealsDealIdUpdateWithBody(ctx, dealId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsdealsDealIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3objectsdealsDealIdUpdateWithResponse(ctx context.Context, dealId string, params *Patchcrmv3objectsdealsDealIdUpdateParams, body Patchcrmv3objectsdealsDealIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsdealsDealIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsdealsDealIdUpdate(ctx, dealId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsdealsDealIdUpdateResponse(rsp)
}

// Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllWithResponse request returning *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse
func (c *ClientWithResponses) Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, dealId string, toObjectType string, params *Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse, error) {
	rsp, err := c.Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAll(ctx, dealId, toObjectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse(rsp)
}

// Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse request returning *Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx, dealId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp)
}

// Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse request returning *Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse
func (c *ClientWithResponses) Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, dealId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	rsp, err := c.Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx, dealId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp)
}

// ParseGetcrmv3objectsdealsGetPageResponse parses an HTTP response from a Getcrmv3objectsdealsGetPageWithResponse call
func ParseGetcrmv3objectsdealsGetPageResponse(rsp *http.Response) (*Getcrmv3objectsdealsGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsdealsGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsdealsCreateResponse parses an HTTP response from a Postcrmv3objectsdealsCreateWithResponse call
func ParsePostcrmv3objectsdealsCreateResponse(rsp *http.Response) (*Postcrmv3objectsdealsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsdealsbatcharchiveArchiveResponse parses an HTTP response from a Postcrmv3objectsdealsbatcharchiveArchiveWithResponse call
func ParsePostcrmv3objectsdealsbatcharchiveArchiveResponse(rsp *http.Response) (*Postcrmv3objectsdealsbatcharchiveArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealsbatcharchiveArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3objectsdealsbatchcreateCreateResponse parses an HTTP response from a Postcrmv3objectsdealsbatchcreateCreateWithResponse call
func ParsePostcrmv3objectsdealsbatchcreateCreateResponse(rsp *http.Response) (*Postcrmv3objectsdealsbatchcreateCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealsbatchcreateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsdealsbatchreadReadResponse parses an HTTP response from a Postcrmv3objectsdealsbatchreadReadWithResponse call
func ParsePostcrmv3objectsdealsbatchreadReadResponse(rsp *http.Response) (*Postcrmv3objectsdealsbatchreadReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealsbatchreadReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsdealsbatchupdateUpdateResponse parses an HTTP response from a Postcrmv3objectsdealsbatchupdateUpdateWithResponse call
func ParsePostcrmv3objectsdealsbatchupdateUpdateResponse(rsp *http.Response) (*Postcrmv3objectsdealsbatchupdateUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealsbatchupdateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsdealssearchDoSearchResponse parses an HTTP response from a Postcrmv3objectsdealssearchDoSearchWithResponse call
func ParsePostcrmv3objectsdealssearchDoSearchResponse(rsp *http.Response) (*Postcrmv3objectsdealssearchDoSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsdealssearchDoSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseWithTotalSimplePublicObjectForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsdealsDealIdArchiveResponse parses an HTTP response from a Deletecrmv3objectsdealsDealIdArchiveWithResponse call
func ParseDeletecrmv3objectsdealsDealIdArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsdealsDealIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsdealsDealIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3objectsdealsDealIdGetByIdResponse parses an HTTP response from a Getcrmv3objectsdealsDealIdGetByIdWithResponse call
func ParseGetcrmv3objectsdealsDealIdGetByIdResponse(rsp *http.Response) (*Getcrmv3objectsdealsDealIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsdealsDealIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3objectsdealsDealIdUpdateResponse parses an HTTP response from a Patchcrmv3objectsdealsDealIdUpdateWithResponse call
func ParsePatchcrmv3objectsdealsDealIdUpdateResponse(rsp *http.Response) (*Patchcrmv3objectsdealsDealIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3objectsdealsDealIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse parses an HTTP response from a Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllWithResponse call
func ParseGetcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse(rsp *http.Response) (*Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsdealsDealIdassociationsToObjectTypeGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseAssociatedIdForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse parses an HTTP response from a Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse call
func ParseDeletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse parses an HTTP response from a Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse call
func ParsePutcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp *http.Response) (*Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3objectsdealsDealIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
