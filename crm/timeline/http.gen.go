// Package timeline provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package timeline

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
	Oauth2_legacyScopes     = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseTimelineEventResponseStatus.
const (
	BatchResponseTimelineEventResponseStatusCANCELED BatchResponseTimelineEventResponseStatus = "CANCELED"

	BatchResponseTimelineEventResponseStatusCOMPLETE BatchResponseTimelineEventResponseStatus = "COMPLETE"

	BatchResponseTimelineEventResponseStatusPENDING BatchResponseTimelineEventResponseStatus = "PENDING"

	BatchResponseTimelineEventResponseStatusPROCESSING BatchResponseTimelineEventResponseStatus = "PROCESSING"
)

// Defines values for BatchResponseTimelineEventResponseWithErrorsStatus.
const (
	BatchResponseTimelineEventResponseWithErrorsStatusCANCELED BatchResponseTimelineEventResponseWithErrorsStatus = "CANCELED"

	BatchResponseTimelineEventResponseWithErrorsStatusCOMPLETE BatchResponseTimelineEventResponseWithErrorsStatus = "COMPLETE"

	BatchResponseTimelineEventResponseWithErrorsStatusPENDING BatchResponseTimelineEventResponseWithErrorsStatus = "PENDING"

	BatchResponseTimelineEventResponseWithErrorsStatusPROCESSING BatchResponseTimelineEventResponseWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for TimelineEventTemplateTokenType.
const (
	TimelineEventTemplateTokenTypeDate TimelineEventTemplateTokenType = "date"

	TimelineEventTemplateTokenTypeEnumeration TimelineEventTemplateTokenType = "enumeration"

	TimelineEventTemplateTokenTypeNumber TimelineEventTemplateTokenType = "number"

	TimelineEventTemplateTokenTypeString TimelineEventTemplateTokenType = "string"
)

// Used to create timeline events in batches.
type BatchInputTimelineEvent struct {
	// A collection of timeline events we want to create.
	Inputs []TimelineEvent `json:"inputs"`
}

// The state of the batch event request.
type BatchResponseTimelineEventResponse struct {
	// The time the request was completed.
	CompletedAt time.Time                                 `json:"completedAt"`
	Links       *BatchResponseTimelineEventResponse_Links `json:"links,omitempty"`

	// The time the request occurred.
	RequestedAt *time.Time `json:"requestedAt,omitempty"`

	// Successfully created events.
	Results []TimelineEventResponse `json:"results"`

	// The time the request began processing.
	StartedAt time.Time `json:"startedAt"`

	// The status of the batch response. Should always be COMPLETED if processed.
	Status BatchResponseTimelineEventResponseStatus `json:"status"`
}

// BatchResponseTimelineEventResponse_Links defines model for BatchResponseTimelineEventResponse.Links.
type BatchResponseTimelineEventResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// The status of the batch response. Should always be COMPLETED if processed.
type BatchResponseTimelineEventResponseStatus string

// BatchResponseTimelineEventResponseWithErrors defines model for BatchResponseTimelineEventResponseWithErrors.
type BatchResponseTimelineEventResponseWithErrors struct {
	CompletedAt time.Time                                           `json:"completedAt"`
	Errors      *[]StandardError                                    `json:"errors,omitempty"`
	Links       *BatchResponseTimelineEventResponseWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                              `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                          `json:"requestedAt,omitempty"`
	Results     []TimelineEventResponse                             `json:"results"`
	StartedAt   time.Time                                           `json:"startedAt"`
	Status      BatchResponseTimelineEventResponseWithErrorsStatus  `json:"status"`
}

// BatchResponseTimelineEventResponseWithErrors_Links defines model for BatchResponseTimelineEventResponseWithErrors.Links.
type BatchResponseTimelineEventResponseWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseTimelineEventResponseWithErrorsStatus defines model for BatchResponseTimelineEventResponseWithErrors.Status.
type BatchResponseTimelineEventResponseWithErrorsStatus string

// CollectionResponseTimelineEventTemplateNoPaging defines model for CollectionResponseTimelineEventTemplateNoPaging.
type CollectionResponseTimelineEventTemplateNoPaging struct {
	Results []TimelineEventTemplate `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// The details Markdown rendered as HTML.
type EventDetail struct {
	// The details Markdown rendered as HTML.
	Details string `json:"details"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// The state of the timeline event.
type TimelineEvent struct {
	// The event domain (often paired with utk).
	Domain *string `json:"domain,omitempty"`

	// The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`).
	Email *string `json:"email,omitempty"`

	// The event template ID.
	EventTemplateId string `json:"eventTemplateId"`

	// Additional event-specific data that can be interpreted by the template's markdown.
	ExtraData *map[string]interface{} `json:"extraData,omitempty"`

	// Identifier for the event. This is optional, and we recommend you do not pass this in. We will create one for you if you omit this. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness.
	Id string `json:"id"`

	// The CRM object identifier. This is required for every event other than contacts (where utk or email can be used).
	ObjectId       *string              `json:"objectId,omitempty"`
	TimelineIFrame *TimelineEventIFrame `json:"timelineIFrame,omitempty"`

	// The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// A collection of token keys and values associated with the template tokens.
	Tokens TimelineEvent_Tokens `json:"tokens"`

	// Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie.
	Utk *string `json:"utk,omitempty"`
}

// A collection of token keys and values associated with the template tokens.
type TimelineEvent_Tokens struct {
	AdditionalProperties map[string]string `json:"-"`
}

// TimelineEventIFrame defines model for TimelineEventIFrame.
type TimelineEventIFrame struct {
	// The label of the modal window that displays the iframe contents.
	HeaderLabel string `json:"headerLabel"`

	// The height of the modal window in pixels.
	Height int32 `json:"height"`

	// The text displaying the link that will display the iframe.
	LinkLabel string `json:"linkLabel"`

	// The URI of the iframe contents.
	Url string `json:"url"`

	// The width of the modal window in pixels.
	Width int32 `json:"width"`
}

// The current state of the timeline event.
type TimelineEventResponse struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The event domain (often paired with utk).
	Domain *string `json:"domain,omitempty"`

	// The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`).
	Email *string `json:"email,omitempty"`

	// The event template ID.
	EventTemplateId string `json:"eventTemplateId"`

	// Additional event-specific data that can be interpreted by the template's markdown.
	ExtraData *map[string]interface{} `json:"extraData,omitempty"`

	// Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness.
	Id string `json:"id"`

	// The CRM object identifier. This is required for every event other than contacts (where utk or email can be used).
	ObjectId *string `json:"objectId,omitempty"`

	// The ObjectType associated with the EventTemplate.
	ObjectType     string               `json:"objectType"`
	TimelineIFrame *TimelineEventIFrame `json:"timelineIFrame,omitempty"`

	// The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// A collection of token keys and values associated with the template tokens.
	Tokens TimelineEventResponse_Tokens `json:"tokens"`

	// Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie.
	Utk *string `json:"utk,omitempty"`
}

// A collection of token keys and values associated with the template tokens.
type TimelineEventResponse_Tokens struct {
	AdditionalProperties map[string]string `json:"-"`
}

// The current state of the template definition.
type TimelineEventTemplate struct {
	// The date and time that the Event Template was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
	DetailTemplate *string `json:"detailTemplate,omitempty"`

	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
	HeaderTemplate *string `json:"headerTemplate,omitempty"`

	// The template ID.
	Id string `json:"id"`

	// The template name.
	Name string `json:"name"`

	// The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported.
	ObjectType string `json:"objectType"`

	// A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
	Tokens []TimelineEventTemplateToken `json:"tokens"`

	// The date and time that the Event Template was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// State of the template definition being created.
type TimelineEventTemplateCreateRequest struct {
	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
	DetailTemplate *string `json:"detailTemplate,omitempty"`

	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
	HeaderTemplate *string `json:"headerTemplate,omitempty"`

	// The template name.
	Name string `json:"name"`

	// The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported.
	ObjectType string `json:"objectType"`

	// A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
	Tokens []TimelineEventTemplateToken `json:"tokens"`
}

// State of the token definition.
type TimelineEventTemplateToken struct {
	// The date and time that the Event Template Token was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Used for list segmentation and reporting.
	Label string `json:"label"`

	// The name of the token referenced in the templates. This must be unique for the specific template. It may only contain alphanumeric characters, periods, dashes, or underscores (. - _).
	Name string `json:"name"`

	// The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API.
	ObjectPropertyName *string `json:"objectPropertyName,omitempty"`

	// If type is `enumeration`, we should have a list of options to choose from.
	Options []TimelineEventTemplateTokenOption `json:"options"`

	// The data type of the token. You can currently choose from [string, number, date, enumeration].
	Type TimelineEventTemplateTokenType `json:"type"`

	// The date and time that the Event Template Token was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// The data type of the token. You can currently choose from [string, number, date, enumeration].
type TimelineEventTemplateTokenType string

// TimelineEventTemplateTokenOption defines model for TimelineEventTemplateTokenOption.
type TimelineEventTemplateTokenOption struct {
	Label string `json:"label"`
	Value string `json:"value"`
}

// State of the token definition for update requests.
type TimelineEventTemplateTokenUpdateRequest struct {
	// Used for list segmentation and reporting.
	Label string `json:"label"`

	// The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API.
	ObjectPropertyName *string `json:"objectPropertyName,omitempty"`

	// If type is `enumeration`, we should have a list of options to choose from.
	Options []TimelineEventTemplateTokenOption `json:"options"`
}

// State of the template definition being updated.
type TimelineEventTemplateUpdateRequest struct {
	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
	DetailTemplate *string `json:"detailTemplate,omitempty"`

	// This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
	HeaderTemplate *string `json:"headerTemplate,omitempty"`

	// The template ID.
	Id string `json:"id"`

	// The template name.
	Name string `json:"name"`

	// A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
	Tokens []TimelineEventTemplateToken `json:"tokens"`
}

// Postintegratorstimelinev3eventsCreateJSONBody defines parameters for Postintegratorstimelinev3eventsCreate.
type Postintegratorstimelinev3eventsCreateJSONBody TimelineEvent

// Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONBody defines parameters for Postintegratorstimelinev3eventsbatchcreateCreateBatch.
type Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONBody BatchInputTimelineEvent

// Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams defines parameters for Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById.
type Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams struct {
	// Set to 'true', we want to render the `detailTemplate` instead of the `headerTemplate`.
	Detail *bool `json:"detail,omitempty"`
}

// Postintegratorstimelinev3AppIdeventTemplatesCreateJSONBody defines parameters for Postintegratorstimelinev3AppIdeventTemplatesCreate.
type Postintegratorstimelinev3AppIdeventTemplatesCreateJSONBody TimelineEventTemplateCreateRequest

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONBody defines parameters for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate.
type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONBody TimelineEventTemplateUpdateRequest

// Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONBody defines parameters for Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate.
type Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONBody TimelineEventTemplateToken

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONBody defines parameters for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate.
type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONBody TimelineEventTemplateTokenUpdateRequest

// Postintegratorstimelinev3eventsCreateJSONRequestBody defines body for Postintegratorstimelinev3eventsCreate for application/json ContentType.
type Postintegratorstimelinev3eventsCreateJSONRequestBody Postintegratorstimelinev3eventsCreateJSONBody

// Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody defines body for Postintegratorstimelinev3eventsbatchcreateCreateBatch for application/json ContentType.
type Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONBody

// Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody defines body for Postintegratorstimelinev3AppIdeventTemplatesCreate for application/json ContentType.
type Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody Postintegratorstimelinev3AppIdeventTemplatesCreateJSONBody

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody defines body for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate for application/json ContentType.
type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONBody

// Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody defines body for Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate for application/json ContentType.
type Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONBody

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody defines body for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate for application/json ContentType.
type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONBody

// Getter for additional properties for BatchResponseTimelineEventResponse_Links. Returns the specified
// element and whether it was found
func (a BatchResponseTimelineEventResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseTimelineEventResponse_Links
func (a *BatchResponseTimelineEventResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseTimelineEventResponse_Links to handle AdditionalProperties
func (a *BatchResponseTimelineEventResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseTimelineEventResponse_Links to handle AdditionalProperties
func (a BatchResponseTimelineEventResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseTimelineEventResponseWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseTimelineEventResponseWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseTimelineEventResponseWithErrors_Links
func (a *BatchResponseTimelineEventResponseWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseTimelineEventResponseWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseTimelineEventResponseWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseTimelineEventResponseWithErrors_Links to handle AdditionalProperties
func (a BatchResponseTimelineEventResponseWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimelineEvent_Tokens. Returns the specified
// element and whether it was found
func (a TimelineEvent_Tokens) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimelineEvent_Tokens
func (a *TimelineEvent_Tokens) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimelineEvent_Tokens to handle AdditionalProperties
func (a *TimelineEvent_Tokens) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimelineEvent_Tokens to handle AdditionalProperties
func (a TimelineEvent_Tokens) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TimelineEventResponse_Tokens. Returns the specified
// element and whether it was found
func (a TimelineEventResponse_Tokens) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TimelineEventResponse_Tokens
func (a *TimelineEventResponse_Tokens) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TimelineEventResponse_Tokens to handle AdditionalProperties
func (a *TimelineEventResponse_Tokens) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TimelineEventResponse_Tokens to handle AdditionalProperties
func (a TimelineEventResponse_Tokens) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postintegratorstimelinev3eventsCreate request with any body
	Postintegratorstimelinev3eventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postintegratorstimelinev3eventsCreate(ctx context.Context, body Postintegratorstimelinev3eventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postintegratorstimelinev3eventsbatchcreateCreateBatch request with any body
	Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postintegratorstimelinev3eventsbatchcreateCreateBatch(ctx context.Context, body Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById(ctx context.Context, eventTemplateId string, eventId string, params *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getintegratorstimelinev3AppIdeventTemplatesGetAll request
	Getintegratorstimelinev3AppIdeventTemplatesGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postintegratorstimelinev3AppIdeventTemplatesCreate request with any body
	Postintegratorstimelinev3AppIdeventTemplatesCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postintegratorstimelinev3AppIdeventTemplatesCreate(ctx context.Context, appId int32, body Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive request
	Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById request
	Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate request with any body
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate(ctx context.Context, appId int32, eventTemplateId string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate request with any body
	Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate(ctx context.Context, appId int32, eventTemplateId string, body Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive request
	Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate request with any body
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBody(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postintegratorstimelinev3eventsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3eventsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3eventsCreate(ctx context.Context, body Postintegratorstimelinev3eventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3eventsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3eventsbatchcreateCreateBatch(ctx context.Context, body Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdRequest(c.Server, eventTemplateId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdRequest(c.Server, eventTemplateId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById(ctx context.Context, eventTemplateId string, eventId string, params *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdRequest(c.Server, eventTemplateId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getintegratorstimelinev3AppIdeventTemplatesGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetintegratorstimelinev3AppIdeventTemplatesGetAllRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3AppIdeventTemplatesCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3AppIdeventTemplatesCreate(ctx context.Context, appId int32, body Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveRequest(c.Server, appId, eventTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdRequest(c.Server, appId, eventTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequestWithBody(c.Server, appId, eventTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate(ctx context.Context, appId int32, eventTemplateId string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequest(c.Server, appId, eventTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequestWithBody(c.Server, appId, eventTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate(ctx context.Context, appId int32, eventTemplateId string, body Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequest(c.Server, appId, eventTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveRequest(c.Server, appId, eventTemplateId, tokenName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBody(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequestWithBody(c.Server, appId, eventTemplateId, tokenName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequest(c.Server, appId, eventTemplateId, tokenName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostintegratorstimelinev3eventsCreateRequest calls the generic Postintegratorstimelinev3eventsCreate builder with application/json body
func NewPostintegratorstimelinev3eventsCreateRequest(server string, body Postintegratorstimelinev3eventsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostintegratorstimelinev3eventsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostintegratorstimelinev3eventsCreateRequestWithBody generates requests for Postintegratorstimelinev3eventsCreate with any type of body
func NewPostintegratorstimelinev3eventsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequest calls the generic Postintegratorstimelinev3eventsbatchcreateCreateBatch builder with application/json body
func NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequest(server string, body Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequestWithBody generates requests for Postintegratorstimelinev3eventsbatchcreateCreateBatch with any type of body
func NewPostintegratorstimelinev3eventsbatchcreateCreateBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/events/batch/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdRequest generates requests for Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById
func NewGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdRequest(server string, eventTemplateId string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdRequest generates requests for Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById
func NewGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdRequest(server string, eventTemplateId string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s/detail", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdRequest generates requests for Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById
func NewGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdRequest(server string, eventTemplateId string, eventId string, params *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s/render", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Detail != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetintegratorstimelinev3AppIdeventTemplatesGetAllRequest generates requests for Getintegratorstimelinev3AppIdeventTemplatesGetAll
func NewGetintegratorstimelinev3AppIdeventTemplatesGetAllRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequest calls the generic Postintegratorstimelinev3AppIdeventTemplatesCreate builder with application/json body
func NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequest(server string, appId int32, body Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequestWithBody generates requests for Postintegratorstimelinev3AppIdeventTemplatesCreate with any type of body
func NewPostintegratorstimelinev3AppIdeventTemplatesCreateRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveRequest generates requests for Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive
func NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveRequest(server string, appId int32, eventTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdRequest generates requests for Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById
func NewGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdRequest(server string, appId int32, eventTemplateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequest calls the generic Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate builder with application/json body
func NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequest(server string, appId int32, eventTemplateId string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequestWithBody(server, appId, eventTemplateId, "application/json", bodyReader)
}

// NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequestWithBody generates requests for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate with any type of body
func NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateRequestWithBody(server string, appId int32, eventTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequest calls the generic Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate builder with application/json body
func NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequest(server string, appId int32, eventTemplateId string, body Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequestWithBody(server, appId, eventTemplateId, "application/json", bodyReader)
}

// NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequestWithBody generates requests for Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate with any type of body
func NewPostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateRequestWithBody(server string, appId int32, eventTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveRequest generates requests for Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive
func NewDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveRequest(server string, appId int32, eventTemplateId string, tokenName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tokenName", runtime.ParamLocationPath, tokenName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequest calls the generic Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate builder with application/json body
func NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequest(server string, appId int32, eventTemplateId string, tokenName string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequestWithBody(server, appId, eventTemplateId, tokenName, "application/json", bodyReader)
}

// NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequestWithBody generates requests for Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate with any type of body
func NewPutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateRequestWithBody(server string, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tokenName", runtime.ParamLocationPath, tokenName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postintegratorstimelinev3eventsCreate request with any body
	Postintegratorstimelinev3eventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsCreateResponse, error)
	Postintegratorstimelinev3eventsCreateWithResponse(ctx context.Context, body Postintegratorstimelinev3eventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsCreateResponse, error)

	// Postintegratorstimelinev3eventsbatchcreateCreateBatch request with any body
	Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse, error)
	Postintegratorstimelinev3eventsbatchcreateCreateBatchWithResponse(ctx context.Context, body Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse, error)

	// Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById request
	Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, params *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse, error)

	// Getintegratorstimelinev3AppIdeventTemplatesGetAll request
	Getintegratorstimelinev3AppIdeventTemplatesGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse, error)

	// Postintegratorstimelinev3AppIdeventTemplatesCreate request with any body
	Postintegratorstimelinev3AppIdeventTemplatesCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesCreateResponse, error)
	Postintegratorstimelinev3AppIdeventTemplatesCreateWithResponse(ctx context.Context, appId int32, body Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesCreateResponse, error)

	// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive request
	Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveWithResponse(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse, error)

	// Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById request
	Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdWithResponse(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse, error)

	// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate request with any body
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse, error)
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithResponse(ctx context.Context, appId int32, eventTemplateId string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse, error)

	// Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate request with any body
	Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse, error)
	Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithResponse(ctx context.Context, appId int32, eventTemplateId string, body Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse, error)

	// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive request
	Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...RequestEditorFn) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse, error)

	// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate request with any body
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse, error)
	Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse, error)
}

type Postintegratorstimelinev3eventsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimelineEventResponse
}

// Status returns HTTPResponse.Status
func (r Postintegratorstimelinev3eventsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postintegratorstimelinev3eventsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseTimelineEventResponse
	JSON207      *BatchResponseTimelineEventResponseWithErrors
}

// Status returns HTTPResponse.Status
func (r Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventResponse
}

// Status returns HTTPResponse.Status
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventDetail
}

// Status returns HTTPResponse.Status
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseTimelineEventTemplateNoPaging
}

// Status returns HTTPResponse.Status
func (r Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postintegratorstimelinev3AppIdeventTemplatesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r Postintegratorstimelinev3AppIdeventTemplatesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postintegratorstimelinev3AppIdeventTemplatesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplateToken
}

// Status returns HTTPResponse.Status
func (r Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplateToken
}

// Status returns HTTPResponse.Status
func (r Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postintegratorstimelinev3eventsCreateWithBodyWithResponse request with arbitrary body returning *Postintegratorstimelinev3eventsCreateResponse
func (c *ClientWithResponses) Postintegratorstimelinev3eventsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3eventsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3eventsCreateResponse(rsp)
}

func (c *ClientWithResponses) Postintegratorstimelinev3eventsCreateWithResponse(ctx context.Context, body Postintegratorstimelinev3eventsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3eventsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3eventsCreateResponse(rsp)
}

// Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBodyWithResponse request with arbitrary body returning *Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse
func (c *ClientWithResponses) Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse, error) {
	rsp, err := c.Postintegratorstimelinev3eventsbatchcreateCreateBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3eventsbatchcreateCreateBatchResponse(rsp)
}

func (c *ClientWithResponses) Postintegratorstimelinev3eventsbatchcreateCreateBatchWithResponse(ctx context.Context, body Postintegratorstimelinev3eventsbatchcreateCreateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse, error) {
	rsp, err := c.Postintegratorstimelinev3eventsbatchcreateCreateBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3eventsbatchcreateCreateBatchResponse(rsp)
}

// Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdWithResponse request returning *Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse
func (c *ClientWithResponses) Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse, error) {
	rsp, err := c.Getintegratorstimelinev3eventsEventTemplateIdEventIdGetById(ctx, eventTemplateId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse(rsp)
}

// Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdWithResponse request returning *Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse
func (c *ClientWithResponses) Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse, error) {
	rsp, err := c.Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailById(ctx, eventTemplateId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse(rsp)
}

// Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdWithResponse request returning *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse
func (c *ClientWithResponses) Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdWithResponse(ctx context.Context, eventTemplateId string, eventId string, params *Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdParams, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse, error) {
	rsp, err := c.Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderById(ctx, eventTemplateId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse(rsp)
}

// Getintegratorstimelinev3AppIdeventTemplatesGetAllWithResponse request returning *Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse
func (c *ClientWithResponses) Getintegratorstimelinev3AppIdeventTemplatesGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse, error) {
	rsp, err := c.Getintegratorstimelinev3AppIdeventTemplatesGetAll(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetintegratorstimelinev3AppIdeventTemplatesGetAllResponse(rsp)
}

// Postintegratorstimelinev3AppIdeventTemplatesCreateWithBodyWithResponse request with arbitrary body returning *Postintegratorstimelinev3AppIdeventTemplatesCreateResponse
func (c *ClientWithResponses) Postintegratorstimelinev3AppIdeventTemplatesCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3AppIdeventTemplatesCreateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3AppIdeventTemplatesCreateResponse(rsp)
}

func (c *ClientWithResponses) Postintegratorstimelinev3AppIdeventTemplatesCreateWithResponse(ctx context.Context, appId int32, body Postintegratorstimelinev3AppIdeventTemplatesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3AppIdeventTemplatesCreate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3AppIdeventTemplatesCreateResponse(rsp)
}

// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveWithResponse request returning *Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse
func (c *ClientWithResponses) Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveWithResponse(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse, error) {
	rsp, err := c.Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchive(ctx, appId, eventTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse(rsp)
}

// Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdWithResponse request returning *Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse
func (c *ClientWithResponses) Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdWithResponse(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...RequestEditorFn) (*Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse, error) {
	rsp, err := c.Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetById(ctx, appId, eventTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse(rsp)
}

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBodyWithResponse request with arbitrary body returning *Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse
func (c *ClientWithResponses) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse, error) {
	rsp, err := c.Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithBody(ctx, appId, eventTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithResponse(ctx context.Context, appId int32, eventTemplateId string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse, error) {
	rsp, err := c.Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdate(ctx, appId, eventTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse(rsp)
}

// Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBodyWithResponse request with arbitrary body returning *Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse
func (c *ClientWithResponses) Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithBody(ctx, appId, eventTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse(rsp)
}

func (c *ClientWithResponses) Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithResponse(ctx context.Context, appId int32, eventTemplateId string, body Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse, error) {
	rsp, err := c.Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreate(ctx, appId, eventTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse(rsp)
}

// Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveWithResponse request returning *Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse
func (c *ClientWithResponses) Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...RequestEditorFn) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse, error) {
	rsp, err := c.Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchive(ctx, appId, eventTemplateId, tokenName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse(rsp)
}

// Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBodyWithResponse request with arbitrary body returning *Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse
func (c *ClientWithResponses) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBodyWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse, error) {
	rsp, err := c.Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithBody(ctx, appId, eventTemplateId, tokenName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse(rsp)
}

func (c *ClientWithResponses) Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithResponse(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse, error) {
	rsp, err := c.Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdate(ctx, appId, eventTemplateId, tokenName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse(rsp)
}

// ParsePostintegratorstimelinev3eventsCreateResponse parses an HTTP response from a Postintegratorstimelinev3eventsCreateWithResponse call
func ParsePostintegratorstimelinev3eventsCreateResponse(rsp *http.Response) (*Postintegratorstimelinev3eventsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postintegratorstimelinev3eventsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostintegratorstimelinev3eventsbatchcreateCreateBatchResponse parses an HTTP response from a Postintegratorstimelinev3eventsbatchcreateCreateBatchWithResponse call
func ParsePostintegratorstimelinev3eventsbatchcreateCreateBatchResponse(rsp *http.Response) (*Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postintegratorstimelinev3eventsbatchcreateCreateBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseTimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseTimelineEventResponseWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse parses an HTTP response from a Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdWithResponse call
func ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse(rsp *http.Response) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getintegratorstimelinev3eventsEventTemplateIdEventIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse parses an HTTP response from a Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdWithResponse call
func ParseGetintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse(rsp *http.Response) (*Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getintegratorstimelinev3eventsEventTemplateIdEventIddetailGetDetailByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse parses an HTTP response from a Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdWithResponse call
func ParseGetintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse(rsp *http.Response) (*Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getintegratorstimelinev3eventsEventTemplateIdEventIdrenderGetRenderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetintegratorstimelinev3AppIdeventTemplatesGetAllResponse parses an HTTP response from a Getintegratorstimelinev3AppIdeventTemplatesGetAllWithResponse call
func ParseGetintegratorstimelinev3AppIdeventTemplatesGetAllResponse(rsp *http.Response) (*Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getintegratorstimelinev3AppIdeventTemplatesGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseTimelineEventTemplateNoPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostintegratorstimelinev3AppIdeventTemplatesCreateResponse parses an HTTP response from a Postintegratorstimelinev3AppIdeventTemplatesCreateWithResponse call
func ParsePostintegratorstimelinev3AppIdeventTemplatesCreateResponse(rsp *http.Response) (*Postintegratorstimelinev3AppIdeventTemplatesCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postintegratorstimelinev3AppIdeventTemplatesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse parses an HTTP response from a Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveWithResponse call
func ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse(rsp *http.Response) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse parses an HTTP response from a Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdWithResponse call
func ParseGetintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse(rsp *http.Response) (*Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getintegratorstimelinev3AppIdeventTemplatesEventTemplateIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse parses an HTTP response from a Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateWithResponse call
func ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse(rsp *http.Response) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse parses an HTTP response from a Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateWithResponse call
func ParsePostintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse(rsp *http.Response) (*Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplateToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse parses an HTTP response from a Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveWithResponse call
func ParseDeleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse(rsp *http.Response) (*Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse parses an HTTP response from a Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateWithResponse call
func ParsePutintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse(rsp *http.Response) (*Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putintegratorstimelinev3AppIdeventTemplatesEventTemplateIdtokensTokenNameUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplateToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
