// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package properties

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2Scopes        = "oauth2.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponsePropertyStatus.
const (
	BatchResponsePropertyStatusCANCELED BatchResponsePropertyStatus = "CANCELED"

	BatchResponsePropertyStatusCOMPLETE BatchResponsePropertyStatus = "COMPLETE"

	BatchResponsePropertyStatusPENDING BatchResponsePropertyStatus = "PENDING"

	BatchResponsePropertyStatusPROCESSING BatchResponsePropertyStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for PropertyCreateFieldType.
const (
	PropertyCreateFieldTypeBooleancheckbox PropertyCreateFieldType = "booleancheckbox"

	PropertyCreateFieldTypeCheckbox PropertyCreateFieldType = "checkbox"

	PropertyCreateFieldTypeDate PropertyCreateFieldType = "date"

	PropertyCreateFieldTypeFile PropertyCreateFieldType = "file"

	PropertyCreateFieldTypeNumber PropertyCreateFieldType = "number"

	PropertyCreateFieldTypeRadio PropertyCreateFieldType = "radio"

	PropertyCreateFieldTypeSelect PropertyCreateFieldType = "select"

	PropertyCreateFieldTypeText PropertyCreateFieldType = "text"

	PropertyCreateFieldTypeTextarea PropertyCreateFieldType = "textarea"
)

// Defines values for PropertyCreateType.
const (
	PropertyCreateTypeDate PropertyCreateType = "date"

	PropertyCreateTypeDatetime PropertyCreateType = "datetime"

	PropertyCreateTypeEnumeration PropertyCreateType = "enumeration"

	PropertyCreateTypeNumber PropertyCreateType = "number"

	PropertyCreateTypeString PropertyCreateType = "string"
)

// Defines values for PropertyUpdateFieldType.
const (
	PropertyUpdateFieldTypeBooleancheckbox PropertyUpdateFieldType = "booleancheckbox"

	PropertyUpdateFieldTypeCheckbox PropertyUpdateFieldType = "checkbox"

	PropertyUpdateFieldTypeDate PropertyUpdateFieldType = "date"

	PropertyUpdateFieldTypeFile PropertyUpdateFieldType = "file"

	PropertyUpdateFieldTypeNumber PropertyUpdateFieldType = "number"

	PropertyUpdateFieldTypeRadio PropertyUpdateFieldType = "radio"

	PropertyUpdateFieldTypeSelect PropertyUpdateFieldType = "select"

	PropertyUpdateFieldTypeText PropertyUpdateFieldType = "text"

	PropertyUpdateFieldTypeTextarea PropertyUpdateFieldType = "textarea"
)

// Defines values for PropertyUpdateType.
const (
	PropertyUpdateTypeDate PropertyUpdateType = "date"

	PropertyUpdateTypeDatetime PropertyUpdateType = "datetime"

	PropertyUpdateTypeEnumeration PropertyUpdateType = "enumeration"

	PropertyUpdateTypeNumber PropertyUpdateType = "number"

	PropertyUpdateTypeString PropertyUpdateType = "string"
)

// BatchInputPropertyCreate defines model for BatchInputPropertyCreate.
type BatchInputPropertyCreate struct {
	Inputs []PropertyCreate `json:"inputs"`
}

// BatchInputPropertyName defines model for BatchInputPropertyName.
type BatchInputPropertyName struct {
	Inputs []PropertyName `json:"inputs"`
}

// BatchReadInputPropertyName defines model for BatchReadInputPropertyName.
type BatchReadInputPropertyName struct {
	Archived bool           `json:"archived"`
	Inputs   []PropertyName `json:"inputs"`
}

// BatchResponseProperty defines model for BatchResponseProperty.
type BatchResponseProperty struct {
	CompletedAt time.Time                    `json:"completedAt"`
	Errors      *[]StandardError             `json:"errors,omitempty"`
	Links       *BatchResponseProperty_Links `json:"links,omitempty"`
	NumErrors   *int32                       `json:"numErrors,omitempty"`
	RequestedAt *time.Time                   `json:"requestedAt,omitempty"`
	Results     []Property                   `json:"results"`
	StartedAt   time.Time                    `json:"startedAt"`
	Status      BatchResponsePropertyStatus  `json:"status"`
}

// BatchResponseProperty_Links defines model for BatchResponseProperty.Links.
type BatchResponseProperty_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponsePropertyStatus defines model for BatchResponseProperty.Status.
type BatchResponsePropertyStatus string

// CollectionResponseProperty defines model for CollectionResponseProperty.
type CollectionResponseProperty struct {
	Paging  *Paging    `json:"paging,omitempty"`
	Results []Property `json:"results"`
}

// CollectionResponsePropertyGroup defines model for CollectionResponsePropertyGroup.
type CollectionResponsePropertyGroup struct {
	Paging  *Paging         `json:"paging,omitempty"`
	Results []PropertyGroup `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Option defines model for Option.
type Option struct {
	// A description of the option.
	Description *string `json:"description,omitempty"`

	// Options are displayed in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Hidden options will not be displayed in HubSpot.
	Hidden bool `json:"hidden"`

	// A human-readable option label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal value of the option, which must be used when setting the property value through the API.
	Value string `json:"value"`
}

// OptionInput defines model for OptionInput.
type OptionInput struct {
	// A description of the option.
	Description *string `json:"description,omitempty"`

	// Options are shown in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Hidden options won't be shown in HubSpot.
	Hidden bool `json:"hidden"`

	// A human-readable option label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal value of the option, which must be used when setting the property value through the API.
	Value string `json:"value"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage `json:"next,omitempty"`
}

// Property defines model for Property.
type Property struct {
	// Whether or not the property is archived.
	Archived *bool `json:"archived,omitempty"`

	// When the property was archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties.
	Calculated *bool      `json:"calculated,omitempty"`
	CreatedAt  *time.Time `json:"createdAt,omitempty"`

	// The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot.
	CreatedUserId *string `json:"createdUserId,omitempty"`

	// A description of the property that will be shown as help text in HubSpot.
	Description string `json:"description"`

	// Properties are shown in order, starting with the lowest positive integer value.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// For default properties, true indicates that the options are stored externally to the property settings.
	ExternalOptions *bool `json:"externalOptions,omitempty"`

	// Controls how the property appears in HubSpot.
	FieldType string `json:"fieldType"`

	// Whether or not the property can be used in a HubSpot form.
	FormField *bool `json:"formField,omitempty"`

	// The name of the property group the property belongs to.
	GroupName string `json:"groupName"`

	// Whether or not the property's value must be unique. Once set, this can't be changed.
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`

	// Whether or not the property will be hidden from the HubSpot UI. It's recommended this be set to false for custom properties.
	Hidden *bool `json:"hidden,omitempty"`

	// This will be true for default object properties built into HubSpot.
	HubspotDefined *bool `json:"hubspotDefined,omitempty"`

	// A human-readable property label that will be shown in HubSpot.
	Label                string                        `json:"label"`
	ModificationMetadata *PropertyModificationMetadata `json:"modificationMetadata,omitempty"`

	// The internal property name, which must be used when referencing the property via the API.
	Name string `json:"name"`

	// A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
	Options []Option `json:"options"`

	// If this property is related to other object(s), they'll be listed here.
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`

	// Whether or not the property will display the currency symbol set in the account settings.
	ShowCurrencySymbol *bool `json:"showCurrencySymbol,omitempty"`

	// The property data type.
	Type      string     `json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot.
	UpdatedUserId *string `json:"updatedUserId,omitempty"`
}

// PropertyCreate defines model for PropertyCreate.
type PropertyCreate struct {
	// A description of the property that will be shown as help text in HubSpot.
	Description *string `json:"description,omitempty"`

	// Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Controls how the property appears in HubSpot.
	FieldType PropertyCreateFieldType `json:"fieldType"`

	// Whether or not the property can be used in a HubSpot form.
	FormField *bool `json:"formField,omitempty"`

	// The name of the property group the property belongs to.
	GroupName string `json:"groupName"`

	// Whether or not the property's value must be unique. Once set, this can't be changed.
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`

	// If true, the property won't be visible and can't be used in HubSpot.
	Hidden *bool `json:"hidden,omitempty"`

	// A human-readable property label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal property name, which must be used when referencing the property via the API.
	Name string `json:"name"`

	// A list of valid options for the property. This field is required for enumerated properties.
	Options *[]OptionInput `json:"options,omitempty"`

	// The data type of the property.
	Type PropertyCreateType `json:"type"`
}

// Controls how the property appears in HubSpot.
type PropertyCreateFieldType string

// The data type of the property.
type PropertyCreateType string

// An ID for a group of properties
type PropertyGroup struct {
	Archived bool `json:"archived"`

	// Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
	DisplayOrder int32 `json:"displayOrder"`

	// A human-readable label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal property group name, which must be used when referencing the property group via the API.
	Name string `json:"name"`
}

// PropertyGroupCreate defines model for PropertyGroupCreate.
type PropertyGroupCreate struct {
	// Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A human-readable label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal property group name, which must be used when referencing the property group via the API.
	Name string `json:"name"`
}

// PropertyGroupUpdate defines model for PropertyGroupUpdate.
type PropertyGroupUpdate struct {
	// Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A human-readable label that will be shown in HubSpot.
	Label *string `json:"label,omitempty"`
}

// PropertyModificationMetadata defines model for PropertyModificationMetadata.
type PropertyModificationMetadata struct {
	Archivable         bool  `json:"archivable"`
	ReadOnlyDefinition bool  `json:"readOnlyDefinition"`
	ReadOnlyOptions    *bool `json:"readOnlyOptions,omitempty"`
	ReadOnlyValue      bool  `json:"readOnlyValue"`
}

// PropertyName defines model for PropertyName.
type PropertyName struct {
	// The name of the property to read or modify.
	Name string `json:"name"`
}

// PropertyUpdate defines model for PropertyUpdate.
type PropertyUpdate struct {
	// A description of the property that will be shown as help text in HubSpot.
	Description *string `json:"description,omitempty"`

	// Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the Property to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Controls how the property appears in HubSpot.
	FieldType *PropertyUpdateFieldType `json:"fieldType,omitempty"`

	// Whether or not the property can be used in a HubSpot form.
	FormField *bool `json:"formField,omitempty"`

	// The name of the property group the property belongs to.
	GroupName *string `json:"groupName,omitempty"`

	// If true, the property won't be visible and can't be used in HubSpot.
	Hidden *bool `json:"hidden,omitempty"`

	// A human-readable property label that will be shown in HubSpot.
	Label *string `json:"label,omitempty"`

	// A list of valid options for the property.
	Options *[]OptionInput `json:"options,omitempty"`

	// The data type of the property.
	Type *PropertyUpdateType `json:"type,omitempty"`
}

// Controls how the property appears in HubSpot.
type PropertyUpdateFieldType string

// The data type of the property.
type PropertyUpdateType string

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getcrmv3propertiesObjectTypeGetAllParams defines parameters for Getcrmv3propertiesObjectTypeGetAll.
type Getcrmv3propertiesObjectTypeGetAllParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3propertiesObjectTypeCreateJSONBody defines parameters for Postcrmv3propertiesObjectTypeCreate.
type Postcrmv3propertiesObjectTypeCreateJSONBody PropertyCreate

// Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONBody defines parameters for Postcrmv3propertiesObjectTypebatcharchiveArchive.
type Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONBody BatchInputPropertyName

// Postcrmv3propertiesObjectTypebatchcreateCreateJSONBody defines parameters for Postcrmv3propertiesObjectTypebatchcreateCreate.
type Postcrmv3propertiesObjectTypebatchcreateCreateJSONBody BatchInputPropertyCreate

// Postcrmv3propertiesObjectTypebatchreadReadJSONBody defines parameters for Postcrmv3propertiesObjectTypebatchreadRead.
type Postcrmv3propertiesObjectTypebatchreadReadJSONBody BatchReadInputPropertyName

// Postcrmv3propertiesObjectTypegroupsCreateJSONBody defines parameters for Postcrmv3propertiesObjectTypegroupsCreate.
type Postcrmv3propertiesObjectTypegroupsCreateJSONBody PropertyGroupCreate

// Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONBody defines parameters for Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate.
type Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONBody PropertyGroupUpdate

// Getcrmv3propertiesObjectTypePropertyNameGetByNameParams defines parameters for Getcrmv3propertiesObjectTypePropertyNameGetByName.
type Getcrmv3propertiesObjectTypePropertyNameGetByNameParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONBody defines parameters for Patchcrmv3propertiesObjectTypePropertyNameUpdate.
type Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONBody PropertyUpdate

// Postcrmv3propertiesObjectTypeCreateJSONRequestBody defines body for Postcrmv3propertiesObjectTypeCreate for application/json ContentType.
type Postcrmv3propertiesObjectTypeCreateJSONRequestBody Postcrmv3propertiesObjectTypeCreateJSONBody

// Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody defines body for Postcrmv3propertiesObjectTypebatcharchiveArchive for application/json ContentType.
type Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONBody

// Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody defines body for Postcrmv3propertiesObjectTypebatchcreateCreate for application/json ContentType.
type Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody Postcrmv3propertiesObjectTypebatchcreateCreateJSONBody

// Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody defines body for Postcrmv3propertiesObjectTypebatchreadRead for application/json ContentType.
type Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody Postcrmv3propertiesObjectTypebatchreadReadJSONBody

// Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody defines body for Postcrmv3propertiesObjectTypegroupsCreate for application/json ContentType.
type Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody Postcrmv3propertiesObjectTypegroupsCreateJSONBody

// Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody defines body for Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate for application/json ContentType.
type Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONBody

// Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody defines body for Patchcrmv3propertiesObjectTypePropertyNameUpdate for application/json ContentType.
type Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONBody

// Getter for additional properties for BatchResponseProperty_Links. Returns the specified
// element and whether it was found
func (a BatchResponseProperty_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseProperty_Links
func (a *BatchResponseProperty_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseProperty_Links to handle AdditionalProperties
func (a *BatchResponseProperty_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseProperty_Links to handle AdditionalProperties
func (a BatchResponseProperty_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3propertiesObjectTypeGetAll request
	Getcrmv3propertiesObjectTypeGetAll(ctx context.Context, objectType string, params *Getcrmv3propertiesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3propertiesObjectTypeCreate request with any body
	Postcrmv3propertiesObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3propertiesObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3propertiesObjectTypebatcharchiveArchive request with any body
	Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3propertiesObjectTypebatcharchiveArchive(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3propertiesObjectTypebatchcreateCreate request with any body
	Postcrmv3propertiesObjectTypebatchcreateCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3propertiesObjectTypebatchcreateCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3propertiesObjectTypebatchreadRead request with any body
	Postcrmv3propertiesObjectTypebatchreadReadWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3propertiesObjectTypebatchreadRead(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3propertiesObjectTypegroupsGetAll request
	Getcrmv3propertiesObjectTypegroupsGetAll(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3propertiesObjectTypegroupsCreate request with any body
	Postcrmv3propertiesObjectTypegroupsCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3propertiesObjectTypegroupsCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3propertiesObjectTypegroupsGroupNameArchive request
	Deletecrmv3propertiesObjectTypegroupsGroupNameArchive(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3propertiesObjectTypegroupsGroupNameGetByName request
	Getcrmv3propertiesObjectTypegroupsGroupNameGetByName(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate request with any body
	Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBody(ctx context.Context, objectType string, groupName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate(ctx context.Context, objectType string, groupName string, body Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3propertiesObjectTypePropertyNameArchive request
	Deletecrmv3propertiesObjectTypePropertyNameArchive(ctx context.Context, objectType string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3propertiesObjectTypePropertyNameGetByName request
	Getcrmv3propertiesObjectTypePropertyNameGetByName(ctx context.Context, objectType string, propertyName string, params *Getcrmv3propertiesObjectTypePropertyNameGetByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3propertiesObjectTypePropertyNameUpdate request with any body
	Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBody(ctx context.Context, objectType string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3propertiesObjectTypePropertyNameUpdate(ctx context.Context, objectType string, propertyName string, body Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3propertiesObjectTypeGetAll(ctx context.Context, objectType string, params *Getcrmv3propertiesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3propertiesObjectTypeGetAllRequest(c.Server, objectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypeCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypeCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatcharchiveArchive(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatchcreateCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatchcreateCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatchcreateCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatchcreateCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatchreadReadWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatchreadReadRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypebatchreadRead(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypebatchreadReadRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3propertiesObjectTypegroupsGetAll(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3propertiesObjectTypegroupsGetAllRequest(c.Server, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypegroupsCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypegroupsCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3propertiesObjectTypegroupsCreate(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3propertiesObjectTypegroupsCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3propertiesObjectTypegroupsGroupNameArchive(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveRequest(c.Server, objectType, groupName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3propertiesObjectTypegroupsGroupNameGetByName(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameRequest(c.Server, objectType, groupName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBody(ctx context.Context, objectType string, groupName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequestWithBody(c.Server, objectType, groupName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate(ctx context.Context, objectType string, groupName string, body Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequest(c.Server, objectType, groupName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3propertiesObjectTypePropertyNameArchive(ctx context.Context, objectType string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3propertiesObjectTypePropertyNameArchiveRequest(c.Server, objectType, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3propertiesObjectTypePropertyNameGetByName(ctx context.Context, objectType string, propertyName string, params *Getcrmv3propertiesObjectTypePropertyNameGetByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3propertiesObjectTypePropertyNameGetByNameRequest(c.Server, objectType, propertyName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBody(ctx context.Context, objectType string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequestWithBody(c.Server, objectType, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3propertiesObjectTypePropertyNameUpdate(ctx context.Context, objectType string, propertyName string, body Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequest(c.Server, objectType, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3propertiesObjectTypeGetAllRequest generates requests for Getcrmv3propertiesObjectTypeGetAll
func NewGetcrmv3propertiesObjectTypeGetAllRequest(server string, objectType string, params *Getcrmv3propertiesObjectTypeGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3propertiesObjectTypeCreateRequest calls the generic Postcrmv3propertiesObjectTypeCreate builder with application/json body
func NewPostcrmv3propertiesObjectTypeCreateRequest(server string, objectType string, body Postcrmv3propertiesObjectTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3propertiesObjectTypeCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3propertiesObjectTypeCreateRequestWithBody generates requests for Postcrmv3propertiesObjectTypeCreate with any type of body
func NewPostcrmv3propertiesObjectTypeCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequest calls the generic Postcrmv3propertiesObjectTypebatcharchiveArchive builder with application/json body
func NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequest(server string, objectType string, body Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequestWithBody generates requests for Postcrmv3propertiesObjectTypebatcharchiveArchive with any type of body
func NewPostcrmv3propertiesObjectTypebatcharchiveArchiveRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/batch/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3propertiesObjectTypebatchcreateCreateRequest calls the generic Postcrmv3propertiesObjectTypebatchcreateCreate builder with application/json body
func NewPostcrmv3propertiesObjectTypebatchcreateCreateRequest(server string, objectType string, body Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3propertiesObjectTypebatchcreateCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3propertiesObjectTypebatchcreateCreateRequestWithBody generates requests for Postcrmv3propertiesObjectTypebatchcreateCreate with any type of body
func NewPostcrmv3propertiesObjectTypebatchcreateCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/batch/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3propertiesObjectTypebatchreadReadRequest calls the generic Postcrmv3propertiesObjectTypebatchreadRead builder with application/json body
func NewPostcrmv3propertiesObjectTypebatchreadReadRequest(server string, objectType string, body Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3propertiesObjectTypebatchreadReadRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3propertiesObjectTypebatchreadReadRequestWithBody generates requests for Postcrmv3propertiesObjectTypebatchreadRead with any type of body
func NewPostcrmv3propertiesObjectTypebatchreadReadRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/batch/read", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3propertiesObjectTypegroupsGetAllRequest generates requests for Getcrmv3propertiesObjectTypegroupsGetAll
func NewGetcrmv3propertiesObjectTypegroupsGetAllRequest(server string, objectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3propertiesObjectTypegroupsCreateRequest calls the generic Postcrmv3propertiesObjectTypegroupsCreate builder with application/json body
func NewPostcrmv3propertiesObjectTypegroupsCreateRequest(server string, objectType string, body Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3propertiesObjectTypegroupsCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3propertiesObjectTypegroupsCreateRequestWithBody generates requests for Postcrmv3propertiesObjectTypegroupsCreate with any type of body
func NewPostcrmv3propertiesObjectTypegroupsCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveRequest generates requests for Deletecrmv3propertiesObjectTypegroupsGroupNameArchive
func NewDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveRequest(server string, objectType string, groupName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameRequest generates requests for Getcrmv3propertiesObjectTypegroupsGroupNameGetByName
func NewGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameRequest(server string, objectType string, groupName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequest calls the generic Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate builder with application/json body
func NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequest(server string, objectType string, groupName string, body Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequestWithBody(server, objectType, groupName, "application/json", bodyReader)
}

// NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequestWithBody generates requests for Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate with any type of body
func NewPatchcrmv3propertiesObjectTypegroupsGroupNameUpdateRequestWithBody(server string, objectType string, groupName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupName", runtime.ParamLocationPath, groupName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3propertiesObjectTypePropertyNameArchiveRequest generates requests for Deletecrmv3propertiesObjectTypePropertyNameArchive
func NewDeletecrmv3propertiesObjectTypePropertyNameArchiveRequest(server string, objectType string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "propertyName", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3propertiesObjectTypePropertyNameGetByNameRequest generates requests for Getcrmv3propertiesObjectTypePropertyNameGetByName
func NewGetcrmv3propertiesObjectTypePropertyNameGetByNameRequest(server string, objectType string, propertyName string, params *Getcrmv3propertiesObjectTypePropertyNameGetByNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "propertyName", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequest calls the generic Patchcrmv3propertiesObjectTypePropertyNameUpdate builder with application/json body
func NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequest(server string, objectType string, propertyName string, body Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequestWithBody(server, objectType, propertyName, "application/json", bodyReader)
}

// NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequestWithBody generates requests for Patchcrmv3propertiesObjectTypePropertyNameUpdate with any type of body
func NewPatchcrmv3propertiesObjectTypePropertyNameUpdateRequestWithBody(server string, objectType string, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "propertyName", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3propertiesObjectTypeGetAll request
	Getcrmv3propertiesObjectTypeGetAllWithResponse(ctx context.Context, objectType string, params *Getcrmv3propertiesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypeGetAllResponse, error)

	// Postcrmv3propertiesObjectTypeCreate request with any body
	Postcrmv3propertiesObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypeCreateResponse, error)
	Postcrmv3propertiesObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypeCreateResponse, error)

	// Postcrmv3propertiesObjectTypebatcharchiveArchive request with any body
	Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse, error)
	Postcrmv3propertiesObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse, error)

	// Postcrmv3propertiesObjectTypebatchcreateCreate request with any body
	Postcrmv3propertiesObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchcreateCreateResponse, error)
	Postcrmv3propertiesObjectTypebatchcreateCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchcreateCreateResponse, error)

	// Postcrmv3propertiesObjectTypebatchreadRead request with any body
	Postcrmv3propertiesObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchreadReadResponse, error)
	Postcrmv3propertiesObjectTypebatchreadReadWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchreadReadResponse, error)

	// Getcrmv3propertiesObjectTypegroupsGetAll request
	Getcrmv3propertiesObjectTypegroupsGetAllWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypegroupsGetAllResponse, error)

	// Postcrmv3propertiesObjectTypegroupsCreate request with any body
	Postcrmv3propertiesObjectTypegroupsCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypegroupsCreateResponse, error)
	Postcrmv3propertiesObjectTypegroupsCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypegroupsCreateResponse, error)

	// Deletecrmv3propertiesObjectTypegroupsGroupNameArchive request
	Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveWithResponse(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse, error)

	// Getcrmv3propertiesObjectTypegroupsGroupNameGetByName request
	Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameWithResponse(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse, error)

	// Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate request with any body
	Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBodyWithResponse(ctx context.Context, objectType string, groupName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse, error)
	Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithResponse(ctx context.Context, objectType string, groupName string, body Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse, error)

	// Deletecrmv3propertiesObjectTypePropertyNameArchive request
	Deletecrmv3propertiesObjectTypePropertyNameArchiveWithResponse(ctx context.Context, objectType string, propertyName string, reqEditors ...RequestEditorFn) (*Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse, error)

	// Getcrmv3propertiesObjectTypePropertyNameGetByName request
	Getcrmv3propertiesObjectTypePropertyNameGetByNameWithResponse(ctx context.Context, objectType string, propertyName string, params *Getcrmv3propertiesObjectTypePropertyNameGetByNameParams, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse, error)

	// Patchcrmv3propertiesObjectTypePropertyNameUpdate request with any body
	Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBodyWithResponse(ctx context.Context, objectType string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse, error)
	Patchcrmv3propertiesObjectTypePropertyNameUpdateWithResponse(ctx context.Context, objectType string, propertyName string, body Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse, error)
}

type Getcrmv3propertiesObjectTypeGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseProperty
}

// Status returns HTTPResponse.Status
func (r Getcrmv3propertiesObjectTypeGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3propertiesObjectTypeGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3propertiesObjectTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Property
}

// Status returns HTTPResponse.Status
func (r Postcrmv3propertiesObjectTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3propertiesObjectTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3propertiesObjectTypebatchcreateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseProperty
	JSON207      *BatchResponseProperty
}

// Status returns HTTPResponse.Status
func (r Postcrmv3propertiesObjectTypebatchcreateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3propertiesObjectTypebatchcreateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3propertiesObjectTypebatchreadReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseProperty
	JSON207      *BatchResponseProperty
}

// Status returns HTTPResponse.Status
func (r Postcrmv3propertiesObjectTypebatchreadReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3propertiesObjectTypebatchreadReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3propertiesObjectTypegroupsGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePropertyGroup
}

// Status returns HTTPResponse.Status
func (r Getcrmv3propertiesObjectTypegroupsGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3propertiesObjectTypegroupsGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3propertiesObjectTypegroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PropertyGroup
}

// Status returns HTTPResponse.Status
func (r Postcrmv3propertiesObjectTypegroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3propertiesObjectTypegroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PropertyGroup
}

// Status returns HTTPResponse.Status
func (r Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PropertyGroup
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Property
}

// Status returns HTTPResponse.Status
func (r Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Property
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3propertiesObjectTypeGetAllWithResponse request returning *Getcrmv3propertiesObjectTypeGetAllResponse
func (c *ClientWithResponses) Getcrmv3propertiesObjectTypeGetAllWithResponse(ctx context.Context, objectType string, params *Getcrmv3propertiesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypeGetAllResponse, error) {
	rsp, err := c.Getcrmv3propertiesObjectTypeGetAll(ctx, objectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3propertiesObjectTypeGetAllResponse(rsp)
}

// Postcrmv3propertiesObjectTypeCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3propertiesObjectTypeCreateResponse
func (c *ClientWithResponses) Postcrmv3propertiesObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypeCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3propertiesObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypeCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypeCreateResponse(rsp)
}

// Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBodyWithResponse request with arbitrary body returning *Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse
func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatcharchiveArchiveWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatcharchiveArchiveResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatcharchiveArchive(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatcharchiveArchiveResponse(rsp)
}

// Postcrmv3propertiesObjectTypebatchcreateCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3propertiesObjectTypebatchcreateCreateResponse
func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatchcreateCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatchcreateCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatchcreateCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatchcreateCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatchcreateCreateResponse(rsp)
}

// Postcrmv3propertiesObjectTypebatchreadReadWithBodyWithResponse request with arbitrary body returning *Postcrmv3propertiesObjectTypebatchreadReadResponse
func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatchreadReadWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatchreadReadResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3propertiesObjectTypebatchreadReadWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypebatchreadRead(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypebatchreadReadResponse(rsp)
}

// Getcrmv3propertiesObjectTypegroupsGetAllWithResponse request returning *Getcrmv3propertiesObjectTypegroupsGetAllResponse
func (c *ClientWithResponses) Getcrmv3propertiesObjectTypegroupsGetAllWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypegroupsGetAllResponse, error) {
	rsp, err := c.Getcrmv3propertiesObjectTypegroupsGetAll(ctx, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3propertiesObjectTypegroupsGetAllResponse(rsp)
}

// Postcrmv3propertiesObjectTypegroupsCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3propertiesObjectTypegroupsCreateResponse
func (c *ClientWithResponses) Postcrmv3propertiesObjectTypegroupsCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypegroupsCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypegroupsCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypegroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3propertiesObjectTypegroupsCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3propertiesObjectTypegroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3propertiesObjectTypegroupsCreateResponse, error) {
	rsp, err := c.Postcrmv3propertiesObjectTypegroupsCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3propertiesObjectTypegroupsCreateResponse(rsp)
}

// Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveWithResponse request returning *Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse
func (c *ClientWithResponses) Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveWithResponse(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse, error) {
	rsp, err := c.Deletecrmv3propertiesObjectTypegroupsGroupNameArchive(ctx, objectType, groupName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse(rsp)
}

// Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameWithResponse request returning *Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse
func (c *ClientWithResponses) Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameWithResponse(ctx context.Context, objectType string, groupName string, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse, error) {
	rsp, err := c.Getcrmv3propertiesObjectTypegroupsGroupNameGetByName(ctx, objectType, groupName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse(rsp)
}

// Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse
func (c *ClientWithResponses) Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBodyWithResponse(ctx context.Context, objectType string, groupName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse, error) {
	rsp, err := c.Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithBody(ctx, objectType, groupName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithResponse(ctx context.Context, objectType string, groupName string, body Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse, error) {
	rsp, err := c.Patchcrmv3propertiesObjectTypegroupsGroupNameUpdate(ctx, objectType, groupName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse(rsp)
}

// Deletecrmv3propertiesObjectTypePropertyNameArchiveWithResponse request returning *Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse
func (c *ClientWithResponses) Deletecrmv3propertiesObjectTypePropertyNameArchiveWithResponse(ctx context.Context, objectType string, propertyName string, reqEditors ...RequestEditorFn) (*Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse, error) {
	rsp, err := c.Deletecrmv3propertiesObjectTypePropertyNameArchive(ctx, objectType, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3propertiesObjectTypePropertyNameArchiveResponse(rsp)
}

// Getcrmv3propertiesObjectTypePropertyNameGetByNameWithResponse request returning *Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse
func (c *ClientWithResponses) Getcrmv3propertiesObjectTypePropertyNameGetByNameWithResponse(ctx context.Context, objectType string, propertyName string, params *Getcrmv3propertiesObjectTypePropertyNameGetByNameParams, reqEditors ...RequestEditorFn) (*Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse, error) {
	rsp, err := c.Getcrmv3propertiesObjectTypePropertyNameGetByName(ctx, objectType, propertyName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3propertiesObjectTypePropertyNameGetByNameResponse(rsp)
}

// Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse
func (c *ClientWithResponses) Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBodyWithResponse(ctx context.Context, objectType string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse, error) {
	rsp, err := c.Patchcrmv3propertiesObjectTypePropertyNameUpdateWithBody(ctx, objectType, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3propertiesObjectTypePropertyNameUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3propertiesObjectTypePropertyNameUpdateWithResponse(ctx context.Context, objectType string, propertyName string, body Patchcrmv3propertiesObjectTypePropertyNameUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse, error) {
	rsp, err := c.Patchcrmv3propertiesObjectTypePropertyNameUpdate(ctx, objectType, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3propertiesObjectTypePropertyNameUpdateResponse(rsp)
}

// ParseGetcrmv3propertiesObjectTypeGetAllResponse parses an HTTP response from a Getcrmv3propertiesObjectTypeGetAllWithResponse call
func ParseGetcrmv3propertiesObjectTypeGetAllResponse(rsp *http.Response) (*Getcrmv3propertiesObjectTypeGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3propertiesObjectTypeGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3propertiesObjectTypeCreateResponse parses an HTTP response from a Postcrmv3propertiesObjectTypeCreateWithResponse call
func ParsePostcrmv3propertiesObjectTypeCreateResponse(rsp *http.Response) (*Postcrmv3propertiesObjectTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3propertiesObjectTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostcrmv3propertiesObjectTypebatcharchiveArchiveResponse parses an HTTP response from a Postcrmv3propertiesObjectTypebatcharchiveArchiveWithResponse call
func ParsePostcrmv3propertiesObjectTypebatcharchiveArchiveResponse(rsp *http.Response) (*Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3propertiesObjectTypebatcharchiveArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3propertiesObjectTypebatchcreateCreateResponse parses an HTTP response from a Postcrmv3propertiesObjectTypebatchcreateCreateWithResponse call
func ParsePostcrmv3propertiesObjectTypebatchcreateCreateResponse(rsp *http.Response) (*Postcrmv3propertiesObjectTypebatchcreateCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3propertiesObjectTypebatchcreateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3propertiesObjectTypebatchreadReadResponse parses an HTTP response from a Postcrmv3propertiesObjectTypebatchreadReadWithResponse call
func ParsePostcrmv3propertiesObjectTypebatchreadReadResponse(rsp *http.Response) (*Postcrmv3propertiesObjectTypebatchreadReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3propertiesObjectTypebatchreadReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParseGetcrmv3propertiesObjectTypegroupsGetAllResponse parses an HTTP response from a Getcrmv3propertiesObjectTypegroupsGetAllWithResponse call
func ParseGetcrmv3propertiesObjectTypegroupsGetAllResponse(rsp *http.Response) (*Getcrmv3propertiesObjectTypegroupsGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3propertiesObjectTypegroupsGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePropertyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3propertiesObjectTypegroupsCreateResponse parses an HTTP response from a Postcrmv3propertiesObjectTypegroupsCreateWithResponse call
func ParsePostcrmv3propertiesObjectTypegroupsCreateResponse(rsp *http.Response) (*Postcrmv3propertiesObjectTypegroupsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3propertiesObjectTypegroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PropertyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse parses an HTTP response from a Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveWithResponse call
func ParseDeletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse(rsp *http.Response) (*Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3propertiesObjectTypegroupsGroupNameArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse parses an HTTP response from a Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameWithResponse call
func ParseGetcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse(rsp *http.Response) (*Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3propertiesObjectTypegroupsGroupNameGetByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PropertyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse parses an HTTP response from a Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateWithResponse call
func ParsePatchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse(rsp *http.Response) (*Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3propertiesObjectTypegroupsGroupNameUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PropertyGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3propertiesObjectTypePropertyNameArchiveResponse parses an HTTP response from a Deletecrmv3propertiesObjectTypePropertyNameArchiveWithResponse call
func ParseDeletecrmv3propertiesObjectTypePropertyNameArchiveResponse(rsp *http.Response) (*Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3propertiesObjectTypePropertyNameArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3propertiesObjectTypePropertyNameGetByNameResponse parses an HTTP response from a Getcrmv3propertiesObjectTypePropertyNameGetByNameWithResponse call
func ParseGetcrmv3propertiesObjectTypePropertyNameGetByNameResponse(rsp *http.Response) (*Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3propertiesObjectTypePropertyNameGetByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3propertiesObjectTypePropertyNameUpdateResponse parses an HTTP response from a Patchcrmv3propertiesObjectTypePropertyNameUpdateWithResponse call
func ParsePatchcrmv3propertiesObjectTypePropertyNameUpdateResponse(rsp *http.Response) (*Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3propertiesObjectTypePropertyNameUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
