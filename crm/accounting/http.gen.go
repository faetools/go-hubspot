// Package accounting provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package accounting

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for AccountingExtensionInvoiceStatus.
const (
	AccountingExtensionInvoiceStatusCLOSED AccountingExtensionInvoiceStatus = "CLOSED"

	AccountingExtensionInvoiceStatusCREATED AccountingExtensionInvoiceStatus = "CREATED"

	AccountingExtensionInvoiceStatusOVERDUE AccountingExtensionInvoiceStatus = "OVERDUE"

	AccountingExtensionInvoiceStatusPAID AccountingExtensionInvoiceStatus = "PAID"

	AccountingExtensionInvoiceStatusSENT AccountingExtensionInvoiceStatus = "SENT"

	AccountingExtensionInvoiceStatusVOIDED AccountingExtensionInvoiceStatus = "VOIDED"
)

// Defines values for ActionResponseStatus.
const (
	ActionResponseStatusCANCELED ActionResponseStatus = "CANCELED"

	ActionResponseStatusCOMPLETE ActionResponseStatus = "COMPLETE"

	ActionResponseStatusPENDING ActionResponseStatus = "PENDING"

	ActionResponseStatusPROCESSING ActionResponseStatus = "PROCESSING"
)

// Defines values for CustomerSearchResponseExternalResult.
const (
	CustomerSearchResponseExternalResultERR CustomerSearchResponseExternalResult = "ERR"

	CustomerSearchResponseExternalResultOK CustomerSearchResponseExternalResult = "OK"
)

// Defines values for ExchangeRateResponseResult.
const (
	ExchangeRateResponseResultERR ExchangeRateResponseResult = "ERR"

	ExchangeRateResponseResultOK ExchangeRateResponseResult = "OK"
)

// Defines values for InvoicePdfResponseResult.
const (
	InvoicePdfResponseResultERR InvoicePdfResponseResult = "ERR"

	InvoicePdfResponseResultOK InvoicePdfResponseResult = "OK"
)

// Defines values for InvoiceReadResponseInvoiceStatus.
const (
	InvoiceReadResponseInvoiceStatusCLOSED InvoiceReadResponseInvoiceStatus = "CLOSED"

	InvoiceReadResponseInvoiceStatusCREATED InvoiceReadResponseInvoiceStatus = "CREATED"

	InvoiceReadResponseInvoiceStatusNONE InvoiceReadResponseInvoiceStatus = "NONE"

	InvoiceReadResponseInvoiceStatusOVERDUE InvoiceReadResponseInvoiceStatus = "OVERDUE"

	InvoiceReadResponseInvoiceStatusPAID InvoiceReadResponseInvoiceStatus = "PAID"

	InvoiceReadResponseInvoiceStatusSENT InvoiceReadResponseInvoiceStatus = "SENT"

	InvoiceReadResponseInvoiceStatusUNPAID InvoiceReadResponseInvoiceStatus = "UNPAID"

	InvoiceReadResponseInvoiceStatusVOIDED InvoiceReadResponseInvoiceStatus = "VOIDED"
)

// Defines values for InvoiceSearchResponseResult.
const (
	InvoiceSearchResponseResultERR InvoiceSearchResponseResult = "ERR"

	InvoiceSearchResponseResultOK InvoiceSearchResponseResult = "OK"
)

// Defines values for InvoiceUpdateResponseInvoiceStatus.
const (
	InvoiceUpdateResponseInvoiceStatusCLOSED InvoiceUpdateResponseInvoiceStatus = "CLOSED"

	InvoiceUpdateResponseInvoiceStatusCREATED InvoiceUpdateResponseInvoiceStatus = "CREATED"

	InvoiceUpdateResponseInvoiceStatusNONE InvoiceUpdateResponseInvoiceStatus = "NONE"

	InvoiceUpdateResponseInvoiceStatusOVERDUE InvoiceUpdateResponseInvoiceStatus = "OVERDUE"

	InvoiceUpdateResponseInvoiceStatusPAID InvoiceUpdateResponseInvoiceStatus = "PAID"

	InvoiceUpdateResponseInvoiceStatusSENT InvoiceUpdateResponseInvoiceStatus = "SENT"

	InvoiceUpdateResponseInvoiceStatusUNPAID InvoiceUpdateResponseInvoiceStatus = "UNPAID"

	InvoiceUpdateResponseInvoiceStatusVOIDED InvoiceUpdateResponseInvoiceStatus = "VOIDED"
)

// Defines values for InvoicesResponseExternalResult.
const (
	InvoicesResponseExternalResultERR InvoicesResponseExternalResult = "ERR"

	InvoicesResponseExternalResultOK InvoicesResponseExternalResult = "OK"
)

// Defines values for ProductSearchResponseResult.
const (
	ProductSearchResponseResultERR ProductSearchResponseResult = "ERR"

	ProductSearchResponseResultOK ProductSearchResponseResult = "OK"
)

// Defines values for ResultIdAccountingResponseResult.
const (
	ResultIdAccountingResponseResultERR ResultIdAccountingResponseResult = "ERR"

	ResultIdAccountingResponseResultOK ResultIdAccountingResponseResult = "OK"
)

// Defines values for TaxSearchResponseResult.
const (
	TaxSearchResponseResultERR TaxSearchResponseResult = "ERR"

	TaxSearchResponseResultOK TaxSearchResponseResult = "OK"
)

// Defines values for TermsResponseResult.
const (
	TermsResponseResultERR TermsResponseResult = "ERR"

	TermsResponseResultOK TermsResponseResult = "OK"
)

// Defines values for UpdatedContactCustomerType.
const (
	UpdatedContactCustomerTypeCOMPANY UpdatedContactCustomerType = "COMPANY"

	UpdatedContactCustomerTypeCONTACT UpdatedContactCustomerType = "CONTACT"
)

// Defines values for UpdatedContactSyncAction.
const (
	UpdatedContactSyncActionCREATE UpdatedContactSyncAction = "CREATE"

	UpdatedContactSyncActionDELETE UpdatedContactSyncAction = "DELETE"

	UpdatedContactSyncActionUPDATE UpdatedContactSyncAction = "UPDATE"
)

// Defines values for UpdatedProductSyncAction.
const (
	UpdatedProductSyncActionCREATE UpdatedProductSyncAction = "CREATE"

	UpdatedProductSyncActionDELETE UpdatedProductSyncAction = "DELETE"

	UpdatedProductSyncActionUPDATE UpdatedProductSyncAction = "UPDATE"
)

// The URL Settings, which defines the URL endpoints that HubSpot will send requests to an external accounting application for certain actions.
type AccountingAppSettings struct {
	// The ID of the accounting app. This is the identifier of the application created in your HubSpot developer portal.
	AppId int32 `json:"appId"`

	// Outlines the features that are supported by the external accounting system.
	Features *AccountingFeatures `json:"features,omitempty"`

	// The URL endpoints that HubSpot will send requests to an external accounting system for certain actions.
	Urls AccountingAppUrls `json:"urls"`
}

// The URL endpoints that HubSpot will send requests to an external accounting system for certain actions.
type AccountingAppUrls struct {
	// A URL that specifies the endpoint where a new customer can be created.
	CreateCustomerUrl *string `json:"createCustomerUrl,omitempty"`

	// A URL that specifies the endpoint where an invoices can be created.
	CreateInvoiceUrl *string `json:"createInvoiceUrl,omitempty"`

	// A template URL that indicates the endpoint where a customer can be fetched by ID. Note that ${CUSTOMER_ID} in this URL will be replaced by the actual customer ID. For example: https://myapp.com/api/customers/${CUSTOMER_ID}
	CustomerUrlTemplate string `json:"customerUrlTemplate"`

	// A URL that specifies the endpoint where exchange rates can be queried.
	ExchangeRateUrl *string `json:"exchangeRateUrl,omitempty"`

	// A URL that specifies the endpoint where an invoice PDF can be retrieved.
	GetInvoicePdfUrl string `json:"getInvoicePdfUrl"`

	// A URL that specifies the endpoint where invoices can be retrieved.
	GetInvoiceUrl string `json:"getInvoiceUrl"`

	// A URL that specifies the endpoint where payment terms can be retrieved.
	GetTermsUrl *string `json:"getTermsUrl,omitempty"`

	// A template URL that indicates the endpoint where an invoice can be fetched by ID. Note that ${INVOICE_ID} in this URL will be replaced by the actual invoice ID. For example: https://myapp.com/api/invoices/${INVOICE_ID}
	InvoiceUrlTemplate string `json:"invoiceUrlTemplate"`

	// A template URL that indicates the endpoint where a product can be fetched by ID. Note that ${PRODUCT_ID} in this URL will be replaced by the actual product ID. For example: https://myapp.com/api/products/${PRODUCT_ID}
	ProductUrlTemplate string  `json:"productUrlTemplate"`
	SearchCountUrl     *string `json:"searchCountUrl,omitempty"`

	// A URL that specifies the endpoint where a customer search can be performed.
	SearchCustomerUrl string `json:"searchCustomerUrl"`

	// A URL that specifies the endpoint where an invoice search can be performed.
	SearchInvoiceUrl *string `json:"searchInvoiceUrl,omitempty"`

	// A URL that specifies the endpoint where a product search can be performed.
	SearchProductUrl *string `json:"searchProductUrl,omitempty"`

	// A URL that specifies the endpoint where a tax search can be performed.
	SearchTaxUrl *string `json:"searchTaxUrl,omitempty"`
	SearchUrl    *string `json:"searchUrl,omitempty"`
}

// Representation of a customer in the external accounting system.
type AccountingExtensionCustomer struct {
	// Represents an address of a customer
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// The ISO 4217 currency code that represents the currency the customer should be billed in.
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// The customer's email address
	EmailAddress *string `json:"emailAddress,omitempty"`

	// The ID of the customer in the external accounting system.
	Id string `json:"id"`

	// The customer's full name
	Name string `json:"name"`
}

// Representation of an invoice in the external accounting system.
type AccountingExtensionInvoice struct {
	// The total amount due.
	AmountDue float32 `json:"amountDue"`

	// The remaining outstanding balance due.
	Balance *float32 `json:"balance,omitempty"`

	// The ISO 4217 currency code that represents the currency of this invoice.
	Currency string `json:"currency"`

	// The ID of the customer that this invoice is for.
	CustomerId *string `json:"customerId,omitempty"`

	// The name of the customer that this invoice is for.
	CustomerName string `json:"customerName"`

	// The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)
	DueDate openapi_types.Date `json:"dueDate"`

	// A link to the invoice in the external accounting system.
	InvoiceLink string `json:"invoiceLink"`

	// The invoice number
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// The currency status of the invoice.
	Status AccountingExtensionInvoiceStatus `json:"status"`
}

// The currency status of the invoice.
type AccountingExtensionInvoiceStatus string

// Representation of payment terms that are defined in the external accounting system. One of 'dueDays' or 'dueDate' is required.
type AccountingExtensionTerm struct {
	// The due date for payment of the invoice, in ISO-8601 date format (yyyy-MM-dd)
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// The number of days that these payment terms represent.
	DueDays *int32 `json:"dueDays,omitempty"`

	// The ID of the payment terms in the external accounting system.
	Id string `json:"id"`

	// The display name of the payment terms.
	Name string `json:"name"`
}

// Outlines the features that are supported by the external accounting system.
type AccountingFeatures struct {
	// Indicates what elements of creating invoices in HubSpot is supported for the integration.
	CreateInvoice CreateInvoiceFeature `json:"createInvoice"`

	// Indicates if importing invoices from the external account system into HubSpot is supported for the integration.
	ImportInvoice ImportInvoiceFeature `json:"importInvoice"`

	// Indicates if syncing objects from the external account system into HubSpot is supported for the integration.
	// This is a map, where the key is one of `CONTACT` or `PRODUCT`, to indicate which type of object you do or don't support syncing.
	// For example:
	// ```
	//   "sync": {
	//     "CONTACT": {
	//       "toHubSpot": true
	//     },
	//     "PRODUCT": {
	//       "toHubSpot": true
	//     }
	//   }
	// ```
	Sync AccountingFeatures_Sync `json:"sync"`
}

// Indicates if syncing objects from the external account system into HubSpot is supported for the integration.
// This is a map, where the key is one of `CONTACT` or `PRODUCT`, to indicate which type of object you do or don't support syncing.
// For example:
// ```
//   "sync": {
//     "CONTACT": {
//       "toHubSpot": true
//     },
//     "PRODUCT": {
//       "toHubSpot": true
//     }
//   }
// ```
type AccountingFeatures_Sync struct {
	AdditionalProperties map[string]ObjectSyncFeature `json:"-"`
}

// ActionResponse defines model for ActionResponse.
type ActionResponse struct {
	CompletedAt time.Time             `json:"completedAt"`
	Links       *ActionResponse_Links `json:"links,omitempty"`
	RequestedAt *time.Time            `json:"requestedAt,omitempty"`
	StartedAt   time.Time             `json:"startedAt"`
	Status      ActionResponseStatus  `json:"status"`
}

// ActionResponse_Links defines model for ActionResponse.Links.
type ActionResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ActionResponseStatus defines model for ActionResponse.Status.
type ActionResponseStatus string

// Represents an address of a customer
type Address struct {
	// The city of the address.
	City *string `json:"city,omitempty"`

	// The country of the address.
	Country *string `json:"country,omitempty"`

	// A region of the county of the address.  May represent county, state etc.
	CountrySubDivisionCode *string `json:"countrySubDivisionCode,omitempty"`

	// The first line of the address.
	LineOne *string `json:"lineOne,omitempty"`

	// The postcode/zipcode of the address.
	PostalCode *string `json:"postalCode,omitempty"`
}

// Indicates what elements of creating invoices in HubSpot is supported for the integration.
type CreateInvoiceFeature struct {
	// Indicates if creating invoices in HubSpot is supported for the integration.
	Enabled bool `json:"enabled"`

	// Lists the individual aspects of creating invoices that are enabled for the integration, as part of the create invoice flow in HubSpot.
	SubFeatures CreateInvoiceSubFeatures `json:"subFeatures"`
}

// Lists the individual aspects of creating invoices that are enabled for the integration, as part of the create invoice flow in HubSpot.
type CreateInvoiceSubFeatures struct {
	// Indicates if a new customer can be created in the external accounting system.
	CreateCustomer bool `json:"createCustomer"`

	// Indicates if the external accounting system supports fetching exchange rates when create an invoice in HubSpot for a customer billed in a different currency.
	ExchangeRates bool `json:"exchangeRates"`

	// Indicates if a visible comment can be added to invoices.
	InvoiceComments bool `json:"invoiceComments"`

	// Indicates if invoice-level discounts can be added to invoices.
	InvoiceDiscounts bool `json:"invoiceDiscounts"`

	// Indicates if taxes can be specified by the HubSpot user for line items.
	Taxes bool `json:"taxes"`

	// Indicates if the external accounting system supports fetching payment terms.
	Terms bool `json:"terms"`
}

// Information about the account in your external account system.
type CreateUserAccountRequestExternal struct {
	// The id of the account in your system.
	AccountId string `json:"accountId"`

	// The name of the account in your system. This is normally the name visible to your users.
	AccountName string `json:"accountName"`

	// The default currency that this account uses.
	CurrencyCode string `json:"currencyCode"`
}

// A response to a search for customers.
type CustomerSearchResponseExternal struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result CustomerSearchResponseExternalResult `json:"@result"`

	// The list of customers that matched the search criteria.
	Customers []AccountingExtensionCustomer `json:"customers"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type CustomerSearchResponseExternalResult string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A response to the request for an exchange rate value. It represents the exchange rate from the source currency to the target currency.
type ExchangeRateResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result ExchangeRateResponseResult `json:"@result"`

	// The exchange rate between the 2 currencies
	ExchangeRate float32 `json:"exchangeRate"`

	// The ISO 4217 currency code that represents the source currency of the exchange rate.
	SourceCurrencyCode string `json:"sourceCurrencyCode"`

	// The ISO 4217 currency code that represents the target currency of the exchange rate.
	TargetCurrencyCode string `json:"targetCurrencyCode"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type ExchangeRateResponseResult string

// Indicates if importing invoices from the external account system into HubSpot is supported for the integration.
type ImportInvoiceFeature struct {
	// Indicates if importing invoices from the external account system into HubSpot.
	Enabled bool `json:"enabled"`
}

// InvoiceCreatePaymentRequest defines model for InvoiceCreatePaymentRequest.
type InvoiceCreatePaymentRequest struct {
	// The amount that this payment is for.
	AmountPaid float32 `json:"amountPaid"`

	// The ISO 4217 currency code that represents the currency of the payment.
	CurrencyCode string `json:"currencyCode"`

	// The id of this payment in the external accounting system.
	ExternalPaymentId string `json:"externalPaymentId"`

	// The datetime that this payment was received.
	PaymentDateTime time.Time `json:"paymentDateTime"`
}

// A response that contains the PDF of an invoice
type InvoicePdfResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *InvoicePdfResponseResult `json:"@result,omitempty"`

	// The bytes of the invoice PDF.
	Invoice []byte `json:"invoice"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type InvoicePdfResponseResult string

// The invoice data stored in HubSpot
type InvoiceReadResponse struct {
	Archived   bool       `json:"archived"`
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// The remaining balance due for the invoice.
	BalanceDue float32 `json:"balanceDue"`

	// The datetime that the invoice was created in HubSpot.
	CreatedAt time.Time `json:"createdAt"`

	// The ISO 4217 currency code that represents the currency of the invoice.
	CurrencyCode string `json:"currencyCode"`

	// The due date of the invoice
	DueDate openapi_types.Date `json:"dueDate"`

	// The id of the account in the external accounting system that this invoice is related to.
	ExternalAccountId string `json:"externalAccountId"`

	// The datetime that the invoice was created in the external accounting system.
	ExternalCreateDateTime *int64 `json:"externalCreateDateTime,omitempty"`

	// The invoice number. Note that this is _not_ the ID of the invoice, but the number that the billed customer will see.
	ExternalInvoiceNumber *string `json:"externalInvoiceNumber,omitempty"`

	// The id of the customer in the external accounting system that the invoice was sent to.
	ExternalRecipientId string `json:"externalRecipientId"`

	// The id of this invoice in the external accounting system.
	Id string `json:"id"`

	// The status of the invoice
	InvoiceStatus InvoiceReadResponseInvoiceStatus `json:"invoiceStatus"`

	// Indicated is the invoice has been voided or not.
	IsVoided bool `json:"isVoided"`

	// The datetime that that invoice was sent to the customer.
	ReceivedByRecipientDate *int64 `json:"receivedByRecipientDate,omitempty"`

	// The total amount that this invoice is for.
	TotalAmountBilled float32 `json:"totalAmountBilled"`

	// The datetime that the invoice was last updated in HubSpot.
	UpdatedAt time.Time `json:"updatedAt"`
}

// The status of the invoice
type InvoiceReadResponseInvoiceStatus string

// A response to a search for invoices.
type InvoiceSearchResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *InvoiceSearchResponseResult `json:"@result,omitempty"`

	// The list of invoices that matched the search criteria.
	Invoices []AccountingExtensionInvoice `json:"invoices"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type InvoiceSearchResponseResult string

// The invoice data to update in HubSpot
type InvoiceUpdateRequest struct {
	// The ISO 4217 currency code that represents the currency used in the invoice to bill the recipient
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// The ISO-8601 due date of the invoice.
	DueDate               *openapi_types.Date `json:"dueDate,omitempty"`
	ExternalInvoiceNumber *string             `json:"externalInvoiceNumber,omitempty"`

	// The ID of the invoice recipient. This is the recipient ID from the external accounting system.
	ExternalRecipientId *string `json:"externalRecipientId,omitempty"`

	// The number / name of the invoice.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// States if the invoice is voided or not.
	IsVoided *bool `json:"isVoided,omitempty"`

	// The ISO-8601 datetime of when the customer received the invoice.
	ReceivedByCustomerDate  *string `json:"receivedByCustomerDate,omitempty"`
	ReceivedByRecipientDate *int64  `json:"receivedByRecipientDate,omitempty"`
}

// InvoiceUpdateResponse defines model for InvoiceUpdateResponse.
type InvoiceUpdateResponse struct {
	Archived                bool                               `json:"archived"`
	ArchivedAt              *time.Time                         `json:"archivedAt,omitempty"`
	BalanceDue              float32                            `json:"balanceDue"`
	CreatedAt               time.Time                          `json:"createdAt"`
	CurrencyCode            string                             `json:"currencyCode"`
	DueDate                 openapi_types.Date                 `json:"dueDate"`
	ExternalAccountId       string                             `json:"externalAccountId"`
	ExternalCreateDateTime  *int64                             `json:"externalCreateDateTime,omitempty"`
	ExternalInvoiceNumber   *string                            `json:"externalInvoiceNumber,omitempty"`
	ExternalRecipientId     string                             `json:"externalRecipientId"`
	Id                      string                             `json:"id"`
	InvoiceStatus           InvoiceUpdateResponseInvoiceStatus `json:"invoiceStatus"`
	IsVoided                bool                               `json:"isVoided"`
	ReceivedByRecipientDate *int64                             `json:"receivedByRecipientDate,omitempty"`
	TotalAmountBilled       float32                            `json:"totalAmountBilled"`
	UpdatedAt               time.Time                          `json:"updatedAt"`
}

// InvoiceUpdateResponseInvoiceStatus defines model for InvoiceUpdateResponse.InvoiceStatus.
type InvoiceUpdateResponseInvoiceStatus string

// A response to a request for invoices.
type InvoicesResponseExternal struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *InvoicesResponseExternalResult `json:"@result,omitempty"`

	// The list of invoices that were found for the request.
	Invoices []AccountingExtensionInvoice `json:"invoices"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type InvoicesResponseExternalResult string

// ObjectSyncFeature defines model for ObjectSyncFeature.
type ObjectSyncFeature struct {
	// Indicates if syncing the object type from the external accounting system into HubSpot is supported.
	ToHubSpot bool `json:"toHubSpot"`
}

// Representation of a product in the external accounting system.
type Product struct {
	// The description of the product.
	Description *string `json:"description,omitempty"`

	// The ID of the product in the external accounting system.
	Id string `json:"id"`

	// The display name of the product.
	Name string `json:"name"`

	// Represents a tax in the external accounting system.
	SalesTaxType *TaxType `json:"salesTaxType,omitempty"`

	// Identifies if the product is tax exempt or not.
	TaxExempt bool `json:"taxExempt"`

	// Represents a unit price
	UnitPrice UnitPrice `json:"unitPrice"`
}

// A response to a search for products.
type ProductSearchResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *ProductSearchResponseResult `json:"@result,omitempty"`

	// The list of products that matched the search criteria.
	Products []Product `json:"products"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type ProductSearchResponseResult string

// A response to the creation of an entity (eg. invoice, customer).
type ResultIdAccountingResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result ResultIdAccountingResponseResult `json:"@result"`

	// The ID of created entity.
	Id string `json:"id"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type ResultIdAccountingResponseResult string

// A request to import external accounting contact properties in HubSpot
type SyncContactsRequest struct {
	// The ID of the account in the external accounting system. This is the value that will be passed as `accountId` for all outbound calls for the user from HubSpot to the external accounting system.
	AccountId string `json:"accountId"`

	// A list of contacts to be imported.
	Contacts []UpdatedContact `json:"contacts"`
}

// A request to import external accounting product properties in HubSpot
type SyncProductsRequest struct {
	// The ID of the account in the external accounting system. This is the value that will be passed as `accountId` for all outbound calls for the user from HubSpot to the external accounting system.
	AccountId string `json:"accountId"`

	// A list of products to be imported.
	Products []UpdatedProduct `json:"products"`
}

// Representation of a tax defined in the external accounting system.
type Tax struct {
	// The code/ID of the tax in the external accounting system.
	Code string `json:"code"`

	// The display name of the tax.
	Name string `json:"name"`

	// The tax percentage.  For example, 8.05 represents a 8.05% tax rate.
	Percentage float32 `json:"percentage"`
}

// A response to a search for taxes.
type TaxSearchResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *TaxSearchResponseResult `json:"@result,omitempty"`

	// The list of taxes that matched the search criteria
	Taxes []Tax `json:"taxes"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type TaxSearchResponseResult string

// Represents a tax in the external accounting system.
type TaxType struct {
	// The code/ID of the tax in the external accounting system.
	Code string `json:"code"`

	// The display name of the tax.
	Name *string `json:"name,omitempty"`
}

// A response to a search for payment terms.
type TermsResponse struct {
	// Designates if the response is a success ('OK') or failure ('ERR').
	Result *TermsResponseResult `json:"@result,omitempty"`

	// The list of payment terms that matched the search criteria.
	Terms []AccountingExtensionTerm `json:"terms"`
}

// Designates if the response is a success ('OK') or failure ('ERR').
type TermsResponseResult string

// Represents a unit price
type UnitPrice struct {
	// The actual unit price amount.
	Amount *float32 `json:"amount,omitempty"`

	// Indicates if the unit price amount already includes taxes.
	TaxIncluded bool `json:"taxIncluded"`
}

// A request to import external accounting contact properties in HubSpot
type UpdatedContact struct {
	// Designates the type of the customer object.
	CustomerType *UpdatedContactCustomerType `json:"customerType,omitempty"`

	// The customer's email address
	EmailAddress string `json:"emailAddress"`

	// The ID of the customer in the external accounting system.
	Id string `json:"id"`

	// The operation to be performed.
	SyncAction UpdatedContactSyncAction `json:"syncAction"`

	// The timestamp (ISO8601 format) when the customer was updated in the external accounting system.
	UpdatedAt time.Time `json:"updatedAt"`
}

// Designates the type of the customer object.
type UpdatedContactCustomerType string

// The operation to be performed.
type UpdatedContactSyncAction string

// A request to import external accounting product properties in HubSpot
type UpdatedProduct struct {
	// The ISO 4217 currency code that represents the currency of the product price.
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// The ID of the product in the external accounting system.
	Id string `json:"id"`

	// The price of the product.
	Price float32 `json:"price"`

	// A map of key-value product properties to be imported.
	Properties UpdatedProduct_Properties `json:"properties"`

	// The operation to be performed.
	SyncAction UpdatedProductSyncAction `json:"syncAction"`

	// The timestamp (ISO8601 format) when the product was updated in the external accounting system.
	UpdatedAt time.Time `json:"updatedAt"`
}

// A map of key-value product properties to be imported.
type UpdatedProduct_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// The operation to be performed.
type UpdatedProductSyncAction string

// Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer.
type Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONBody ResultIdAccountingResponse

// Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch.
type Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONBody CustomerSearchResponseExternal

// Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate.
type Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONBody ExchangeRateResponse

// Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice.
type Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONBody ResultIdAccountingResponse

// Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf.
type Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONBody InvoicePdfResponse

// Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch.
type Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONBody InvoiceSearchResponse

// Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById.
type Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONBody InvoicesResponseExternal

// Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONBody defines parameters for Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch.
type Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONBody ProductSearchResponse

// Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONBody defines parameters for Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch.
type Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONBody TaxSearchResponse

// Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONBody defines parameters for Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm.
type Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONBody TermsResponse

// Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams defines parameters for Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById.
type Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams struct {
	// The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.
	AccountId string `json:"accountId"`
}

// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONBody defines parameters for Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate.
type Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONBody InvoiceUpdateRequest

// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams defines parameters for Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate.
type Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams struct {
	// The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.
	AccountId string `json:"accountId"`
}

// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONBody defines parameters for Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment.
type Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONBody InvoiceCreatePaymentRequest

// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams defines parameters for Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment.
type Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams struct {
	// The ID of the account that the invoice belongs to. This is the account ID from the external accounting system.
	AccountId *string `json:"accountId,omitempty"`
}

// Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONBody defines parameters for Putcrmv3extensionsaccountingsettingsAppIdReplace.
type Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONBody AccountingAppSettings

// Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONBody defines parameters for Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact.
type Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONBody SyncContactsRequest

// Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONBody defines parameters for Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct.
type Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONBody SyncProductsRequest

// Putcrmv3extensionsaccountinguserAccountsReplaceJSONBody defines parameters for Putcrmv3extensionsaccountinguserAccountsReplace.
type Putcrmv3extensionsaccountinguserAccountsReplaceJSONBody CreateUserAccountRequestExternal

// Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONBody

// Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONBody

// Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONBody

// Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONBody

// Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONBody

// Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONBody

// Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONBody

// Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch for application/json ContentType.
type Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONBody

// Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch for application/json ContentType.
type Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONBody

// Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody defines body for Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm for application/json ContentType.
type Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONBody

// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody defines body for Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate for application/json ContentType.
type Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONBody

// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody defines body for Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment for application/json ContentType.
type Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONBody

// Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody defines body for Putcrmv3extensionsaccountingsettingsAppIdReplace for application/json ContentType.
type Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONBody

// Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody defines body for Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact for application/json ContentType.
type Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONBody

// Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody defines body for Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct for application/json ContentType.
type Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONBody

// Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody defines body for Putcrmv3extensionsaccountinguserAccountsReplace for application/json ContentType.
type Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody Putcrmv3extensionsaccountinguserAccountsReplaceJSONBody

// Getter for additional properties for AccountingFeatures_Sync. Returns the specified
// element and whether it was found
func (a AccountingFeatures_Sync) Get(fieldName string) (value ObjectSyncFeature, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccountingFeatures_Sync
func (a *AccountingFeatures_Sync) Set(fieldName string, value ObjectSyncFeature) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ObjectSyncFeature)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccountingFeatures_Sync to handle AdditionalProperties
func (a *AccountingFeatures_Sync) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ObjectSyncFeature)
		for fieldName, fieldBuf := range object {
			var fieldVal ObjectSyncFeature
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccountingFeatures_Sync to handle AdditionalProperties
func (a AccountingFeatures_Sync) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActionResponse_Links. Returns the specified
// element and whether it was found
func (a ActionResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActionResponse_Links
func (a *ActionResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActionResponse_Links to handle AdditionalProperties
func (a *ActionResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActionResponse_Links to handle AdditionalProperties
func (a ActionResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdatedProduct_Properties. Returns the specified
// element and whether it was found
func (a UpdatedProduct_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdatedProduct_Properties
func (a *UpdatedProduct_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdatedProduct_Properties to handle AdditionalProperties
func (a *UpdatedProduct_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdatedProduct_Properties to handle AdditionalProperties
func (a UpdatedProduct_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer request with any body
	Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch request with any body
	Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate request with any body
	Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice request with any body
	Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf request with any body
	Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch request with any body
	Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById request with any body
	Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch request with any body
	Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch request with any body
	Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm request with any body
	Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById request
	Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById(ctx context.Context, invoiceId string, params *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate request with any body
	Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBody(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, body Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment request with any body
	Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBody(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, body Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3extensionsaccountingsettingsAppIdGetById request
	Getcrmv3extensionsaccountingsettingsAppIdGetById(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3extensionsaccountingsettingsAppIdReplace request with any body
	Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putcrmv3extensionsaccountingsettingsAppIdReplace(ctx context.Context, appId int32, body Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact request with any body
	Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct request with any body
	Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3extensionsaccountinguserAccountsReplace request with any body
	Putcrmv3extensionsaccountinguserAccountsReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putcrmv3extensionsaccountinguserAccountsReplace(ctx context.Context, body Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive request
	Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequestWithBody(c.Server, requestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequest(c.Server, requestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById(ctx context.Context, invoiceId string, params *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdRequest(c.Server, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBody(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequestWithBody(c.Server, invoiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, body Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequest(c.Server, invoiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBody(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequestWithBody(c.Server, invoiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, body Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequest(c.Server, invoiceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3extensionsaccountingsettingsAppIdGetById(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionsaccountingsettingsAppIdGetByIdRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsaccountingsettingsAppIdReplace(ctx context.Context, appId int32, body Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsaccountinguserAccountsReplaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsaccountinguserAccountsReplaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsaccountinguserAccountsReplace(ctx context.Context, body Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsaccountinguserAccountsReplaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequest calls the generic Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer with any type of body
func NewPostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/customer-create/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequest calls the generic Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch with any type of body
func NewPostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/customer-search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequest calls the generic Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate with any type of body
func NewPostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/exchange-rate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequest calls the generic Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice with any type of body
func NewPostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/invoice-create/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequest calls the generic Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf with any type of body
func NewPostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/invoice-pdf/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequest calls the generic Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch with any type of body
func NewPostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/invoice-search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequest calls the generic Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById with any type of body
func NewPostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequest calls the generic Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch builder with application/json body
func NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch with any type of body
func NewPostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/product-search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequest calls the generic Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch builder with application/json body
func NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch with any type of body
func NewPostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/tax-search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequest calls the generic Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm builder with application/json body
func NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequest(server string, requestId string, body Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequestWithBody(server, requestId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequestWithBody generates requests for Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm with any type of body
func NewPostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/callback/terms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdRequest generates requests for Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById
func NewGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdRequest(server string, invoiceId string, params *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/invoice/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, params.AccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequest calls the generic Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate builder with application/json body
func NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequest(server string, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, body Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequestWithBody(server, invoiceId, params, "application/json", bodyReader)
}

// NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequestWithBody generates requests for Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate with any type of body
func NewPatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateRequestWithBody(server string, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/invoice/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, params.AccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequest calls the generic Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment builder with application/json body
func NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequest(server string, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, body Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequestWithBody(server, invoiceId, params, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequestWithBody generates requests for Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment with any type of body
func NewPostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentRequestWithBody(server string, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/invoice/%s/payment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AccountId != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, *params.AccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3extensionsaccountingsettingsAppIdGetByIdRequest generates requests for Getcrmv3extensionsaccountingsettingsAppIdGetById
func NewGetcrmv3extensionsaccountingsettingsAppIdGetByIdRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequest calls the generic Putcrmv3extensionsaccountingsettingsAppIdReplace builder with application/json body
func NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequest(server string, appId int32, body Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequestWithBody generates requests for Putcrmv3extensionsaccountingsettingsAppIdReplace with any type of body
func NewPutcrmv3extensionsaccountingsettingsAppIdReplaceRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequest calls the generic Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact builder with application/json body
func NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequest(server string, appId int32, body Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequestWithBody generates requests for Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact with any type of body
func NewPostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/sync/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequest calls the generic Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct builder with application/json body
func NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequest(server string, appId int32, body Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequestWithBody generates requests for Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct with any type of body
func NewPostcrmv3extensionsaccountingsyncAppIdproductsCreateProductRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/sync/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutcrmv3extensionsaccountinguserAccountsReplaceRequest calls the generic Putcrmv3extensionsaccountinguserAccountsReplace builder with application/json body
func NewPutcrmv3extensionsaccountinguserAccountsReplaceRequest(server string, body Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutcrmv3extensionsaccountinguserAccountsReplaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutcrmv3extensionsaccountinguserAccountsReplaceRequestWithBody generates requests for Putcrmv3extensionsaccountinguserAccountsReplace with any type of body
func NewPutcrmv3extensionsaccountinguserAccountsReplaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/user-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveRequest generates requests for Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive
func NewDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/accounting/user-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer request with any body
	Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse, error)
	Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse, error)

	// Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch request with any body
	Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse, error)
	Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse, error)

	// Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate request with any body
	Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse, error)
	Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse, error)

	// Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice request with any body
	Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse, error)
	Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse, error)

	// Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf request with any body
	Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse, error)
	Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse, error)

	// Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch request with any body
	Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse, error)
	Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse, error)

	// Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById request with any body
	Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse, error)
	Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse, error)

	// Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch request with any body
	Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse, error)
	Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse, error)

	// Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch request with any body
	Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse, error)
	Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse, error)

	// Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm request with any body
	Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse, error)
	Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse, error)

	// Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById request
	Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdWithResponse(ctx context.Context, invoiceId string, params *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse, error)

	// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate request with any body
	Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBodyWithResponse(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse, error)
	Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithResponse(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, body Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse, error)

	// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment request with any body
	Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBodyWithResponse(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse, error)
	Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithResponse(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, body Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse, error)

	// Getcrmv3extensionsaccountingsettingsAppIdGetById request
	Getcrmv3extensionsaccountingsettingsAppIdGetByIdWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse, error)

	// Putcrmv3extensionsaccountingsettingsAppIdReplace request with any body
	Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse, error)
	Putcrmv3extensionsaccountingsettingsAppIdReplaceWithResponse(ctx context.Context, appId int32, body Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse, error)

	// Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact request with any body
	Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse, error)
	Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse, error)

	// Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct request with any body
	Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse, error)
	Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse, error)

	// Putcrmv3extensionsaccountinguserAccountsReplace request with any body
	Putcrmv3extensionsaccountinguserAccountsReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountinguserAccountsReplaceResponse, error)
	Putcrmv3extensionsaccountinguserAccountsReplaceWithResponse(ctx context.Context, body Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountinguserAccountsReplaceResponse, error)

	// Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive request
	Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse, error)
}

type Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceReadResponse
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceUpdateResponse
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceUpdateResponse
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountingAppSettings
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResponse
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResponse
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3extensionsaccountinguserAccountsReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Putcrmv3extensionsaccountinguserAccountsReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3extensionsaccountinguserAccountsReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomer(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearch(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRate(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoice(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdf(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearch(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetById(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearch(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearch(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse(rsp)
}

// Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithBody(ctx, requestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithResponse(ctx context.Context, requestId string, body Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTerm(ctx, requestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse(rsp)
}

// Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdWithResponse request returning *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdWithResponse(ctx context.Context, invoiceId string, params *Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3extensionsaccountinginvoiceInvoiceIdGetById(ctx, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse(rsp)
}

// Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBodyWithResponse(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithBody(ctx, invoiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithResponse(ctx context.Context, invoiceId string, params *Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateParams, body Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdate(ctx, invoiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse(rsp)
}

// Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBodyWithResponse(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithBody(ctx, invoiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithResponse(ctx context.Context, invoiceId string, params *Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentParams, body Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePayment(ctx, invoiceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse(rsp)
}

// Getcrmv3extensionsaccountingsettingsAppIdGetByIdWithResponse request returning *Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3extensionsaccountingsettingsAppIdGetByIdWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3extensionsaccountingsettingsAppIdGetById(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionsaccountingsettingsAppIdGetByIdResponse(rsp)
}

// Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBodyWithResponse request with arbitrary body returning *Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse
func (c *ClientWithResponses) Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsaccountingsettingsAppIdReplaceWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsaccountingsettingsAppIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) Putcrmv3extensionsaccountingsettingsAppIdReplaceWithResponse(ctx context.Context, appId int32, body Putcrmv3extensionsaccountingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsaccountingsettingsAppIdReplace(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsaccountingsettingsAppIdReplaceResponse(rsp)
}

// Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContact(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse(rsp)
}

// Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse
func (c *ClientWithResponses) Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse, error) {
	rsp, err := c.Postcrmv3extensionsaccountingsyncAppIdproductsCreateProduct(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse(rsp)
}

// Putcrmv3extensionsaccountinguserAccountsReplaceWithBodyWithResponse request with arbitrary body returning *Putcrmv3extensionsaccountinguserAccountsReplaceResponse
func (c *ClientWithResponses) Putcrmv3extensionsaccountinguserAccountsReplaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountinguserAccountsReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsaccountinguserAccountsReplaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsaccountinguserAccountsReplaceResponse(rsp)
}

func (c *ClientWithResponses) Putcrmv3extensionsaccountinguserAccountsReplaceWithResponse(ctx context.Context, body Putcrmv3extensionsaccountinguserAccountsReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsaccountinguserAccountsReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsaccountinguserAccountsReplace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsaccountinguserAccountsReplaceResponse(rsp)
}

// Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveWithResponse request returning *Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3extensionsaccountinguserAccountsAccountIdArchive(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse(rsp)
}

// ParsePostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackcustomerCreateRequestIdCreateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackcustomerSearchRequestIdDoCustomerSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackexchangeRateRequestIdCreateExchangeRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackinvoiceCreateRequestIdCreateInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackinvoicePdfRequestIdInvoicePdfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackinvoiceSearchRequestIdDoInvoiceSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackinvoicesRequestIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchWithResponse call
func ParsePostcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbackproductSearchRequestIdDoProductSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchWithResponse call
func ParsePostcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbacktaxSearchRequestIdDoTaxSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse parses an HTTP response from a Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermWithResponse call
func ParsePostcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingcallbacktermsRequestIdCreateTermResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse parses an HTTP response from a Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdWithResponse call
func ParseGetcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse(rsp *http.Response) (*Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionsaccountinginvoiceInvoiceIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse parses an HTTP response from a Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateWithResponse call
func ParsePatchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse(rsp *http.Response) (*Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3extensionsaccountinginvoiceInvoiceIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse parses an HTTP response from a Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentWithResponse call
func ParsePostcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse(rsp *http.Response) (*Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountinginvoiceInvoiceIdpaymentCreatePaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3extensionsaccountingsettingsAppIdGetByIdResponse parses an HTTP response from a Getcrmv3extensionsaccountingsettingsAppIdGetByIdWithResponse call
func ParseGetcrmv3extensionsaccountingsettingsAppIdGetByIdResponse(rsp *http.Response) (*Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionsaccountingsettingsAppIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountingAppSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutcrmv3extensionsaccountingsettingsAppIdReplaceResponse parses an HTTP response from a Putcrmv3extensionsaccountingsettingsAppIdReplaceWithResponse call
func ParsePutcrmv3extensionsaccountingsettingsAppIdReplaceResponse(rsp *http.Response) (*Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3extensionsaccountingsettingsAppIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse parses an HTTP response from a Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactWithResponse call
func ParsePostcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingsyncAppIdcontactsCreateContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse parses an HTTP response from a Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductWithResponse call
func ParsePostcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse(rsp *http.Response) (*Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionsaccountingsyncAppIdproductsCreateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutcrmv3extensionsaccountinguserAccountsReplaceResponse parses an HTTP response from a Putcrmv3extensionsaccountinguserAccountsReplaceWithResponse call
func ParsePutcrmv3extensionsaccountinguserAccountsReplaceResponse(rsp *http.Response) (*Putcrmv3extensionsaccountinguserAccountsReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3extensionsaccountinguserAccountsReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse parses an HTTP response from a Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveWithResponse call
func ParseDeletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse(rsp *http.Response) (*Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3extensionsaccountinguserAccountsAccountIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
