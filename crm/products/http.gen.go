// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package products

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseSimplePublicObjectStatus.
const (
	BatchResponseSimplePublicObjectStatusCANCELED BatchResponseSimplePublicObjectStatus = "CANCELED"

	BatchResponseSimplePublicObjectStatusCOMPLETE BatchResponseSimplePublicObjectStatus = "COMPLETE"

	BatchResponseSimplePublicObjectStatusPENDING BatchResponseSimplePublicObjectStatus = "PENDING"

	BatchResponseSimplePublicObjectStatusPROCESSING BatchResponseSimplePublicObjectStatus = "PROCESSING"
)

// Defines values for BatchResponseSimplePublicObjectWithErrorsStatus.
const (
	BatchResponseSimplePublicObjectWithErrorsStatusCANCELED BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"

	BatchResponseSimplePublicObjectWithErrorsStatusCOMPLETE BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"

	BatchResponseSimplePublicObjectWithErrorsStatusPENDING BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"

	BatchResponseSimplePublicObjectWithErrorsStatusPROCESSING BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for FilterOperator.
const (
	FilterOperatorBETWEEN FilterOperator = "BETWEEN"

	FilterOperatorCONTAINSTOKEN FilterOperator = "CONTAINS_TOKEN"

	FilterOperatorEQ FilterOperator = "EQ"

	FilterOperatorGT FilterOperator = "GT"

	FilterOperatorGTE FilterOperator = "GTE"

	FilterOperatorHASPROPERTY FilterOperator = "HAS_PROPERTY"

	FilterOperatorIN FilterOperator = "IN"

	FilterOperatorLT FilterOperator = "LT"

	FilterOperatorLTE FilterOperator = "LTE"

	FilterOperatorNEQ FilterOperator = "NEQ"

	FilterOperatorNOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"

	FilterOperatorNOTHASPROPERTY FilterOperator = "NOT_HAS_PROPERTY"

	FilterOperatorNOTIN FilterOperator = "NOT_IN"
)

// AssociatedId defines model for AssociatedId.
type AssociatedId struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// BatchInputSimplePublicObjectBatchInput defines model for BatchInputSimplePublicObjectBatchInput.
type BatchInputSimplePublicObjectBatchInput struct {
	Inputs []SimplePublicObjectBatchInput `json:"inputs"`
}

// BatchInputSimplePublicObjectId defines model for BatchInputSimplePublicObjectId.
type BatchInputSimplePublicObjectId struct {
	Inputs []SimplePublicObjectId `json:"inputs"`
}

// BatchInputSimplePublicObjectInput defines model for BatchInputSimplePublicObjectInput.
type BatchInputSimplePublicObjectInput struct {
	Inputs []SimplePublicObjectInput `json:"inputs"`
}

// BatchReadInputSimplePublicObjectId defines model for BatchReadInputSimplePublicObjectId.
type BatchReadInputSimplePublicObjectId struct {
	IdProperty *string                `json:"idProperty,omitempty"`
	Inputs     []SimplePublicObjectId `json:"inputs"`
	Properties []string               `json:"properties"`
}

// BatchResponseSimplePublicObject defines model for BatchResponseSimplePublicObject.
type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time                              `json:"completedAt"`
	Links       *BatchResponseSimplePublicObject_Links `json:"links,omitempty"`
	RequestedAt *time.Time                             `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                   `json:"results"`
	StartedAt   time.Time                              `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectStatus  `json:"status"`
}

// BatchResponseSimplePublicObject_Links defines model for BatchResponseSimplePublicObject.Links.
type BatchResponseSimplePublicObject_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectStatus defines model for BatchResponseSimplePublicObject.Status.
type BatchResponseSimplePublicObjectStatus string

// BatchResponseSimplePublicObjectWithErrors defines model for BatchResponseSimplePublicObjectWithErrors.
type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                        `json:"completedAt"`
	Errors      *[]StandardError                                 `json:"errors,omitempty"`
	Links       *BatchResponseSimplePublicObjectWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                           `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                       `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                             `json:"results"`
	StartedAt   time.Time                                        `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus  `json:"status"`
}

// BatchResponseSimplePublicObjectWithErrors_Links defines model for BatchResponseSimplePublicObjectWithErrors.Links.
type BatchResponseSimplePublicObjectWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectWithErrorsStatus defines model for BatchResponseSimplePublicObjectWithErrors.Status.
type BatchResponseSimplePublicObjectWithErrorsStatus string

// CollectionResponseAssociatedId defines model for CollectionResponseAssociatedId.
type CollectionResponseAssociatedId struct {
	Paging  *Paging        `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseAssociatedIdForwardPaging defines model for CollectionResponseAssociatedIdForwardPaging.
type CollectionResponseAssociatedIdForwardPaging struct {
	Paging  *ForwardPaging `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseSimplePublicObjectWithAssociationsForwardPaging defines model for CollectionResponseSimplePublicObjectWithAssociationsForwardPaging.
type CollectionResponseSimplePublicObjectWithAssociationsForwardPaging struct {
	Paging  *ForwardPaging                       `json:"paging,omitempty"`
	Results []SimplePublicObjectWithAssociations `json:"results"`
}

// CollectionResponseWithTotalSimplePublicObjectForwardPaging defines model for CollectionResponseWithTotalSimplePublicObjectForwardPaging.
type CollectionResponseWithTotalSimplePublicObjectForwardPaging struct {
	Paging  *ForwardPaging       `json:"paging,omitempty"`
	Results []SimplePublicObject `json:"results"`
	Total   int32                `json:"total"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Filter defines model for Filter.
type Filter struct {
	// null
	Operator     FilterOperator `json:"operator"`
	PropertyName string         `json:"propertyName"`
	Value        *string        `json:"value,omitempty"`
}

// null
type FilterOperator string

// FilterGroup defines model for FilterGroup.
type FilterGroup struct {
	Filters []Filter `json:"filters"`
}

// ForwardPaging defines model for ForwardPaging.
type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage     `json:"next,omitempty"`
	Prev *PreviousPage `json:"prev,omitempty"`
}

// PreviousPage defines model for PreviousPage.
type PreviousPage struct {
	Before string  `json:"before"`
	Link   *string `json:"link,omitempty"`
}

// PublicObjectSearchRequest defines model for PublicObjectSearchRequest.
type PublicObjectSearchRequest struct {
	After        int32         `json:"after"`
	FilterGroups []FilterGroup `json:"filterGroups"`
	Limit        int32         `json:"limit"`
	Properties   []string      `json:"properties"`
	Query        *string       `json:"query,omitempty"`
	Sorts        []string      `json:"sorts"`
}

// SimplePublicObject defines model for SimplePublicObject.
type SimplePublicObject struct {
	Archived   *bool                         `json:"archived,omitempty"`
	ArchivedAt *time.Time                    `json:"archivedAt,omitempty"`
	CreatedAt  time.Time                     `json:"createdAt"`
	Id         string                        `json:"id"`
	Properties SimplePublicObject_Properties `json:"properties"`
	UpdatedAt  time.Time                     `json:"updatedAt"`
}

// SimplePublicObject_Properties defines model for SimplePublicObject.Properties.
type SimplePublicObject_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectBatchInput defines model for SimplePublicObjectBatchInput.
type SimplePublicObjectBatchInput struct {
	Id         string                                  `json:"id"`
	Properties SimplePublicObjectBatchInput_Properties `json:"properties"`
}

// SimplePublicObjectBatchInput_Properties defines model for SimplePublicObjectBatchInput.Properties.
type SimplePublicObjectBatchInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectId defines model for SimplePublicObjectId.
type SimplePublicObjectId struct {
	Id string `json:"id"`
}

// SimplePublicObjectInput defines model for SimplePublicObjectInput.
type SimplePublicObjectInput struct {
	Properties SimplePublicObjectInput_Properties `json:"properties"`
}

// SimplePublicObjectInput_Properties defines model for SimplePublicObjectInput.Properties.
type SimplePublicObjectInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectWithAssociations defines model for SimplePublicObjectWithAssociations.
type SimplePublicObjectWithAssociations struct {
	Archived     *bool                                            `json:"archived,omitempty"`
	ArchivedAt   *time.Time                                       `json:"archivedAt,omitempty"`
	Associations *SimplePublicObjectWithAssociations_Associations `json:"associations,omitempty"`
	CreatedAt    time.Time                                        `json:"createdAt"`
	Id           string                                           `json:"id"`
	Properties   SimplePublicObjectWithAssociations_Properties    `json:"properties"`
	UpdatedAt    time.Time                                        `json:"updatedAt"`
}

// SimplePublicObjectWithAssociations_Associations defines model for SimplePublicObjectWithAssociations.Associations.
type SimplePublicObjectWithAssociations_Associations struct {
	AdditionalProperties map[string]CollectionResponseAssociatedId `json:"-"`
}

// SimplePublicObjectWithAssociations_Properties defines model for SimplePublicObjectWithAssociations.Properties.
type SimplePublicObjectWithAssociations_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getcrmv3objectsproductsGetPageParams defines parameters for Getcrmv3objectsproductsGetPage.
type Getcrmv3objectsproductsGetPageParams struct {
	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsproductsCreateJSONBody defines parameters for Postcrmv3objectsproductsCreate.
type Postcrmv3objectsproductsCreateJSONBody SimplePublicObjectInput

// Postcrmv3objectsproductsbatcharchiveArchiveJSONBody defines parameters for Postcrmv3objectsproductsbatcharchiveArchive.
type Postcrmv3objectsproductsbatcharchiveArchiveJSONBody BatchInputSimplePublicObjectId

// Postcrmv3objectsproductsbatchcreateCreateJSONBody defines parameters for Postcrmv3objectsproductsbatchcreateCreate.
type Postcrmv3objectsproductsbatchcreateCreateJSONBody BatchInputSimplePublicObjectInput

// Postcrmv3objectsproductsbatchreadReadJSONBody defines parameters for Postcrmv3objectsproductsbatchreadRead.
type Postcrmv3objectsproductsbatchreadReadJSONBody BatchReadInputSimplePublicObjectId

// Postcrmv3objectsproductsbatchreadReadParams defines parameters for Postcrmv3objectsproductsbatchreadRead.
type Postcrmv3objectsproductsbatchreadReadParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsproductsbatchupdateUpdateJSONBody defines parameters for Postcrmv3objectsproductsbatchupdateUpdate.
type Postcrmv3objectsproductsbatchupdateUpdateJSONBody BatchInputSimplePublicObjectBatchInput

// Postcrmv3objectsproductssearchDoSearchJSONBody defines parameters for Postcrmv3objectsproductssearchDoSearch.
type Postcrmv3objectsproductssearchDoSearchJSONBody PublicObjectSearchRequest

// Getcrmv3objectsproductsProductIdGetByIdParams defines parameters for Getcrmv3objectsproductsProductIdGetById.
type Getcrmv3objectsproductsProductIdGetByIdParams struct {
	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`

	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Patchcrmv3objectsproductsProductIdUpdateJSONBody defines parameters for Patchcrmv3objectsproductsProductIdUpdate.
type Patchcrmv3objectsproductsProductIdUpdateJSONBody SimplePublicObjectInput

// Patchcrmv3objectsproductsProductIdUpdateParams defines parameters for Patchcrmv3objectsproductsProductIdUpdate.
type Patchcrmv3objectsproductsProductIdUpdateParams struct {
	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams defines parameters for Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll.
type Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams struct {
	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`
}

// Postcrmv3objectsproductsCreateJSONRequestBody defines body for Postcrmv3objectsproductsCreate for application/json ContentType.
type Postcrmv3objectsproductsCreateJSONRequestBody Postcrmv3objectsproductsCreateJSONBody

// Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody defines body for Postcrmv3objectsproductsbatcharchiveArchive for application/json ContentType.
type Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody Postcrmv3objectsproductsbatcharchiveArchiveJSONBody

// Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody defines body for Postcrmv3objectsproductsbatchcreateCreate for application/json ContentType.
type Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody Postcrmv3objectsproductsbatchcreateCreateJSONBody

// Postcrmv3objectsproductsbatchreadReadJSONRequestBody defines body for Postcrmv3objectsproductsbatchreadRead for application/json ContentType.
type Postcrmv3objectsproductsbatchreadReadJSONRequestBody Postcrmv3objectsproductsbatchreadReadJSONBody

// Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody defines body for Postcrmv3objectsproductsbatchupdateUpdate for application/json ContentType.
type Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody Postcrmv3objectsproductsbatchupdateUpdateJSONBody

// Postcrmv3objectsproductssearchDoSearchJSONRequestBody defines body for Postcrmv3objectsproductssearchDoSearch for application/json ContentType.
type Postcrmv3objectsproductssearchDoSearchJSONRequestBody Postcrmv3objectsproductssearchDoSearchJSONBody

// Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody defines body for Patchcrmv3objectsproductsProductIdUpdate for application/json ContentType.
type Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody Patchcrmv3objectsproductsProductIdUpdateJSONBody

// Getter for additional properties for BatchResponseSimplePublicObject_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObject_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObject_Links
func (a *BatchResponseSimplePublicObject_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObject_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObject_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObjectWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links
func (a *BatchResponseSimplePublicObjectWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObjectWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObjectWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObject_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObject_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObject_Properties
func (a *SimplePublicObject_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a *SimplePublicObject_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a SimplePublicObject_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectBatchInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectBatchInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectBatchInput_Properties
func (a *SimplePublicObjectBatchInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectBatchInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectBatchInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectInput_Properties
func (a *SimplePublicObjectInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Associations. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Associations) Get(fieldName string) (value CollectionResponseAssociatedId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Associations
func (a *SimplePublicObjectWithAssociations_Associations) Set(fieldName string, value CollectionResponseAssociatedId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Associations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
		for fieldName, fieldBuf := range object {
			var fieldVal CollectionResponseAssociatedId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Associations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Properties
func (a *SimplePublicObjectWithAssociations_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3objectsproductsGetPage request
	Getcrmv3objectsproductsGetPage(ctx context.Context, params *Getcrmv3objectsproductsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductsCreate request with any body
	Postcrmv3objectsproductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductsCreate(ctx context.Context, body Postcrmv3objectsproductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductsbatcharchiveArchive request with any body
	Postcrmv3objectsproductsbatcharchiveArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductsbatcharchiveArchive(ctx context.Context, body Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductsbatchcreateCreate request with any body
	Postcrmv3objectsproductsbatchcreateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductsbatchcreateCreate(ctx context.Context, body Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductsbatchreadRead request with any body
	Postcrmv3objectsproductsbatchreadReadWithBody(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductsbatchreadRead(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, body Postcrmv3objectsproductsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductsbatchupdateUpdate request with any body
	Postcrmv3objectsproductsbatchupdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductsbatchupdateUpdate(ctx context.Context, body Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsproductssearchDoSearch request with any body
	Postcrmv3objectsproductssearchDoSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsproductssearchDoSearch(ctx context.Context, body Postcrmv3objectsproductssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsproductsProductIdArchive request
	Deletecrmv3objectsproductsProductIdArchive(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsproductsProductIdGetById request
	Getcrmv3objectsproductsProductIdGetById(ctx context.Context, productId string, params *Getcrmv3objectsproductsProductIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3objectsproductsProductIdUpdate request with any body
	Patchcrmv3objectsproductsProductIdUpdateWithBody(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3objectsproductsProductIdUpdate(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, body Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll(ctx context.Context, productId string, toObjectType string, params *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3objectsproductsGetPage(ctx context.Context, params *Getcrmv3objectsproductsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsproductsGetPageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsCreate(ctx context.Context, body Postcrmv3objectsproductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatcharchiveArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatcharchiveArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatcharchiveArchive(ctx context.Context, body Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatcharchiveArchiveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchcreateCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchcreateCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchcreateCreate(ctx context.Context, body Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchcreateCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchreadReadWithBody(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchreadReadRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchreadRead(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, body Postcrmv3objectsproductsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchreadReadRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchupdateUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchupdateUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductsbatchupdateUpdate(ctx context.Context, body Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductsbatchupdateUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductssearchDoSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductssearchDoSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsproductssearchDoSearch(ctx context.Context, body Postcrmv3objectsproductssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsproductssearchDoSearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsproductsProductIdArchive(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsproductsProductIdArchiveRequest(c.Server, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsproductsProductIdGetById(ctx context.Context, productId string, params *Getcrmv3objectsproductsProductIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsproductsProductIdGetByIdRequest(c.Server, productId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsproductsProductIdUpdateWithBody(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsproductsProductIdUpdateRequestWithBody(c.Server, productId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsproductsProductIdUpdate(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, body Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsproductsProductIdUpdateRequest(c.Server, productId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll(ctx context.Context, productId string, toObjectType string, params *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllRequest(c.Server, productId, toObjectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(c.Server, productId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(c.Server, productId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3objectsproductsGetPageRequest generates requests for Getcrmv3objectsproductsGetPage
func NewGetcrmv3objectsproductsGetPageRequest(server string, params *Getcrmv3objectsproductsGetPageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3objectsproductsCreateRequest calls the generic Postcrmv3objectsproductsCreate builder with application/json body
func NewPostcrmv3objectsproductsCreateRequest(server string, body Postcrmv3objectsproductsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductsCreateRequestWithBody generates requests for Postcrmv3objectsproductsCreate with any type of body
func NewPostcrmv3objectsproductsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsproductsbatcharchiveArchiveRequest calls the generic Postcrmv3objectsproductsbatcharchiveArchive builder with application/json body
func NewPostcrmv3objectsproductsbatcharchiveArchiveRequest(server string, body Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductsbatcharchiveArchiveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductsbatcharchiveArchiveRequestWithBody generates requests for Postcrmv3objectsproductsbatcharchiveArchive with any type of body
func NewPostcrmv3objectsproductsbatcharchiveArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/batch/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsproductsbatchcreateCreateRequest calls the generic Postcrmv3objectsproductsbatchcreateCreate builder with application/json body
func NewPostcrmv3objectsproductsbatchcreateCreateRequest(server string, body Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductsbatchcreateCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductsbatchcreateCreateRequestWithBody generates requests for Postcrmv3objectsproductsbatchcreateCreate with any type of body
func NewPostcrmv3objectsproductsbatchcreateCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/batch/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsproductsbatchreadReadRequest calls the generic Postcrmv3objectsproductsbatchreadRead builder with application/json body
func NewPostcrmv3objectsproductsbatchreadReadRequest(server string, params *Postcrmv3objectsproductsbatchreadReadParams, body Postcrmv3objectsproductsbatchreadReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductsbatchreadReadRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductsbatchreadReadRequestWithBody generates requests for Postcrmv3objectsproductsbatchreadRead with any type of body
func NewPostcrmv3objectsproductsbatchreadReadRequestWithBody(server string, params *Postcrmv3objectsproductsbatchreadReadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/batch/read")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsproductsbatchupdateUpdateRequest calls the generic Postcrmv3objectsproductsbatchupdateUpdate builder with application/json body
func NewPostcrmv3objectsproductsbatchupdateUpdateRequest(server string, body Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductsbatchupdateUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductsbatchupdateUpdateRequestWithBody generates requests for Postcrmv3objectsproductsbatchupdateUpdate with any type of body
func NewPostcrmv3objectsproductsbatchupdateUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/batch/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsproductssearchDoSearchRequest calls the generic Postcrmv3objectsproductssearchDoSearch builder with application/json body
func NewPostcrmv3objectsproductssearchDoSearchRequest(server string, body Postcrmv3objectsproductssearchDoSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsproductssearchDoSearchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmv3objectsproductssearchDoSearchRequestWithBody generates requests for Postcrmv3objectsproductssearchDoSearch with any type of body
func NewPostcrmv3objectsproductssearchDoSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3objectsproductsProductIdArchiveRequest generates requests for Deletecrmv3objectsproductsProductIdArchive
func NewDeletecrmv3objectsproductsProductIdArchiveRequest(server string, productId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3objectsproductsProductIdGetByIdRequest generates requests for Getcrmv3objectsproductsProductIdGetById
func NewGetcrmv3objectsproductsProductIdGetByIdRequest(server string, productId string, params *Getcrmv3objectsproductsProductIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3objectsproductsProductIdUpdateRequest calls the generic Patchcrmv3objectsproductsProductIdUpdate builder with application/json body
func NewPatchcrmv3objectsproductsProductIdUpdateRequest(server string, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, body Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3objectsproductsProductIdUpdateRequestWithBody(server, productId, params, "application/json", bodyReader)
}

// NewPatchcrmv3objectsproductsProductIdUpdateRequestWithBody generates requests for Patchcrmv3objectsproductsProductIdUpdate with any type of body
func NewPatchcrmv3objectsproductsProductIdUpdateRequestWithBody(server string, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllRequest generates requests for Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll
func NewGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllRequest(server string, productId string, toObjectType string, params *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s/associations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest generates requests for Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive
func NewDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(server string, productId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest generates requests for Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate
func NewPutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(server string, productId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/products/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3objectsproductsGetPage request
	Getcrmv3objectsproductsGetPageWithResponse(ctx context.Context, params *Getcrmv3objectsproductsGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsGetPageResponse, error)

	// Postcrmv3objectsproductsCreate request with any body
	Postcrmv3objectsproductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsCreateResponse, error)
	Postcrmv3objectsproductsCreateWithResponse(ctx context.Context, body Postcrmv3objectsproductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsCreateResponse, error)

	// Postcrmv3objectsproductsbatcharchiveArchive request with any body
	Postcrmv3objectsproductsbatcharchiveArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatcharchiveArchiveResponse, error)
	Postcrmv3objectsproductsbatcharchiveArchiveWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatcharchiveArchiveResponse, error)

	// Postcrmv3objectsproductsbatchcreateCreate request with any body
	Postcrmv3objectsproductsbatchcreateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchcreateCreateResponse, error)
	Postcrmv3objectsproductsbatchcreateCreateWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchcreateCreateResponse, error)

	// Postcrmv3objectsproductsbatchreadRead request with any body
	Postcrmv3objectsproductsbatchreadReadWithBodyWithResponse(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchreadReadResponse, error)
	Postcrmv3objectsproductsbatchreadReadWithResponse(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, body Postcrmv3objectsproductsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchreadReadResponse, error)

	// Postcrmv3objectsproductsbatchupdateUpdate request with any body
	Postcrmv3objectsproductsbatchupdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchupdateUpdateResponse, error)
	Postcrmv3objectsproductsbatchupdateUpdateWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchupdateUpdateResponse, error)

	// Postcrmv3objectsproductssearchDoSearch request with any body
	Postcrmv3objectsproductssearchDoSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductssearchDoSearchResponse, error)
	Postcrmv3objectsproductssearchDoSearchWithResponse(ctx context.Context, body Postcrmv3objectsproductssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductssearchDoSearchResponse, error)

	// Deletecrmv3objectsproductsProductIdArchive request
	Deletecrmv3objectsproductsProductIdArchiveWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsproductsProductIdArchiveResponse, error)

	// Getcrmv3objectsproductsProductIdGetById request
	Getcrmv3objectsproductsProductIdGetByIdWithResponse(ctx context.Context, productId string, params *Getcrmv3objectsproductsProductIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsProductIdGetByIdResponse, error)

	// Patchcrmv3objectsproductsProductIdUpdate request with any body
	Patchcrmv3objectsproductsProductIdUpdateWithBodyWithResponse(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsproductsProductIdUpdateResponse, error)
	Patchcrmv3objectsproductsProductIdUpdateWithResponse(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, body Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsproductsProductIdUpdateResponse, error)

	// Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, productId string, toObjectType string, params *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse, error)

	// Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error)

	// Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error)
}

type Getcrmv3objectsproductsGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsproductsGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsproductsGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductsbatcharchiveArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductsbatcharchiveArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductsbatcharchiveArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductsbatchcreateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductsbatchcreateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductsbatchcreateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductsbatchreadReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductsbatchreadReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductsbatchreadReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductsbatchupdateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductsbatchupdateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductsbatchupdateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsproductssearchDoSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseWithTotalSimplePublicObjectForwardPaging
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsproductssearchDoSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsproductssearchDoSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsproductsProductIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsproductsProductIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsproductsProductIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsproductsProductIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsproductsProductIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsproductsProductIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3objectsproductsProductIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3objectsproductsProductIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3objectsproductsProductIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseAssociatedIdForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3objectsproductsGetPageWithResponse request returning *Getcrmv3objectsproductsGetPageResponse
func (c *ClientWithResponses) Getcrmv3objectsproductsGetPageWithResponse(ctx context.Context, params *Getcrmv3objectsproductsGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsGetPageResponse, error) {
	rsp, err := c.Getcrmv3objectsproductsGetPage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsproductsGetPageResponse(rsp)
}

// Postcrmv3objectsproductsCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductsCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsproductsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductsCreateWithResponse(ctx context.Context, body Postcrmv3objectsproductsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsCreateResponse(rsp)
}

// Postcrmv3objectsproductsbatcharchiveArchiveWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductsbatcharchiveArchiveResponse
func (c *ClientWithResponses) Postcrmv3objectsproductsbatcharchiveArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatcharchiveArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatcharchiveArchiveResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductsbatcharchiveArchiveWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatcharchiveArchive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatcharchiveArchiveResponse(rsp)
}

// Postcrmv3objectsproductsbatchcreateCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductsbatchcreateCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsproductsbatchcreateCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchcreateCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchcreateCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductsbatchcreateCreateWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchcreateCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchcreateCreateResponse(rsp)
}

// Postcrmv3objectsproductsbatchreadReadWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductsbatchreadReadResponse
func (c *ClientWithResponses) Postcrmv3objectsproductsbatchreadReadWithBodyWithResponse(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchreadReadWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchreadReadResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductsbatchreadReadWithResponse(ctx context.Context, params *Postcrmv3objectsproductsbatchreadReadParams, body Postcrmv3objectsproductsbatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchreadRead(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchreadReadResponse(rsp)
}

// Postcrmv3objectsproductsbatchupdateUpdateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductsbatchupdateUpdateResponse
func (c *ClientWithResponses) Postcrmv3objectsproductsbatchupdateUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchupdateUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchupdateUpdateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductsbatchupdateUpdateWithResponse(ctx context.Context, body Postcrmv3objectsproductsbatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductsbatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsproductsbatchupdateUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductsbatchupdateUpdateResponse(rsp)
}

// Postcrmv3objectsproductssearchDoSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsproductssearchDoSearchResponse
func (c *ClientWithResponses) Postcrmv3objectsproductssearchDoSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductssearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsproductssearchDoSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductssearchDoSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsproductssearchDoSearchWithResponse(ctx context.Context, body Postcrmv3objectsproductssearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsproductssearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsproductssearchDoSearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsproductssearchDoSearchResponse(rsp)
}

// Deletecrmv3objectsproductsProductIdArchiveWithResponse request returning *Deletecrmv3objectsproductsProductIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsproductsProductIdArchiveWithResponse(ctx context.Context, productId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsproductsProductIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsproductsProductIdArchive(ctx, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsproductsProductIdArchiveResponse(rsp)
}

// Getcrmv3objectsproductsProductIdGetByIdWithResponse request returning *Getcrmv3objectsproductsProductIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3objectsproductsProductIdGetByIdWithResponse(ctx context.Context, productId string, params *Getcrmv3objectsproductsProductIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsProductIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3objectsproductsProductIdGetById(ctx, productId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsproductsProductIdGetByIdResponse(rsp)
}

// Patchcrmv3objectsproductsProductIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3objectsproductsProductIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3objectsproductsProductIdUpdateWithBodyWithResponse(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsproductsProductIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsproductsProductIdUpdateWithBody(ctx, productId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsproductsProductIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3objectsproductsProductIdUpdateWithResponse(ctx context.Context, productId string, params *Patchcrmv3objectsproductsProductIdUpdateParams, body Patchcrmv3objectsproductsProductIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsproductsProductIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsproductsProductIdUpdate(ctx, productId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsproductsProductIdUpdateResponse(rsp)
}

// Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllWithResponse request returning *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse
func (c *ClientWithResponses) Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, productId string, toObjectType string, params *Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse, error) {
	rsp, err := c.Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAll(ctx, productId, toObjectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse(rsp)
}

// Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse request returning *Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx, productId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp)
}

// Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse request returning *Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse
func (c *ClientWithResponses) Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, productId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	rsp, err := c.Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx, productId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp)
}

// ParseGetcrmv3objectsproductsGetPageResponse parses an HTTP response from a Getcrmv3objectsproductsGetPageWithResponse call
func ParseGetcrmv3objectsproductsGetPageResponse(rsp *http.Response) (*Getcrmv3objectsproductsGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsproductsGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsproductsCreateResponse parses an HTTP response from a Postcrmv3objectsproductsCreateWithResponse call
func ParsePostcrmv3objectsproductsCreateResponse(rsp *http.Response) (*Postcrmv3objectsproductsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsproductsbatcharchiveArchiveResponse parses an HTTP response from a Postcrmv3objectsproductsbatcharchiveArchiveWithResponse call
func ParsePostcrmv3objectsproductsbatcharchiveArchiveResponse(rsp *http.Response) (*Postcrmv3objectsproductsbatcharchiveArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductsbatcharchiveArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3objectsproductsbatchcreateCreateResponse parses an HTTP response from a Postcrmv3objectsproductsbatchcreateCreateWithResponse call
func ParsePostcrmv3objectsproductsbatchcreateCreateResponse(rsp *http.Response) (*Postcrmv3objectsproductsbatchcreateCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductsbatchcreateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsproductsbatchreadReadResponse parses an HTTP response from a Postcrmv3objectsproductsbatchreadReadWithResponse call
func ParsePostcrmv3objectsproductsbatchreadReadResponse(rsp *http.Response) (*Postcrmv3objectsproductsbatchreadReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductsbatchreadReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsproductsbatchupdateUpdateResponse parses an HTTP response from a Postcrmv3objectsproductsbatchupdateUpdateWithResponse call
func ParsePostcrmv3objectsproductsbatchupdateUpdateResponse(rsp *http.Response) (*Postcrmv3objectsproductsbatchupdateUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductsbatchupdateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsproductssearchDoSearchResponse parses an HTTP response from a Postcrmv3objectsproductssearchDoSearchWithResponse call
func ParsePostcrmv3objectsproductssearchDoSearchResponse(rsp *http.Response) (*Postcrmv3objectsproductssearchDoSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsproductssearchDoSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseWithTotalSimplePublicObjectForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsproductsProductIdArchiveResponse parses an HTTP response from a Deletecrmv3objectsproductsProductIdArchiveWithResponse call
func ParseDeletecrmv3objectsproductsProductIdArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsproductsProductIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsproductsProductIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3objectsproductsProductIdGetByIdResponse parses an HTTP response from a Getcrmv3objectsproductsProductIdGetByIdWithResponse call
func ParseGetcrmv3objectsproductsProductIdGetByIdResponse(rsp *http.Response) (*Getcrmv3objectsproductsProductIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsproductsProductIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3objectsproductsProductIdUpdateResponse parses an HTTP response from a Patchcrmv3objectsproductsProductIdUpdateWithResponse call
func ParsePatchcrmv3objectsproductsProductIdUpdateResponse(rsp *http.Response) (*Patchcrmv3objectsproductsProductIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3objectsproductsProductIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse parses an HTTP response from a Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllWithResponse call
func ParseGetcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse(rsp *http.Response) (*Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsproductsProductIdassociationsToObjectTypeGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseAssociatedIdForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse parses an HTTP response from a Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse call
func ParseDeletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse parses an HTTP response from a Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse call
func ParsePutcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp *http.Response) (*Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3objectsproductsProductIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
