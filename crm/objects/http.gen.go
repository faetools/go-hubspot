// Package objects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package objects

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2Scopes        = "oauth2.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseSimplePublicObjectStatus.
const (
	BatchResponseSimplePublicObjectStatusCANCELED BatchResponseSimplePublicObjectStatus = "CANCELED"

	BatchResponseSimplePublicObjectStatusCOMPLETE BatchResponseSimplePublicObjectStatus = "COMPLETE"

	BatchResponseSimplePublicObjectStatusPENDING BatchResponseSimplePublicObjectStatus = "PENDING"

	BatchResponseSimplePublicObjectStatusPROCESSING BatchResponseSimplePublicObjectStatus = "PROCESSING"
)

// Defines values for BatchResponseSimplePublicObjectWithErrorsStatus.
const (
	BatchResponseSimplePublicObjectWithErrorsStatusCANCELED BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"

	BatchResponseSimplePublicObjectWithErrorsStatusCOMPLETE BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"

	BatchResponseSimplePublicObjectWithErrorsStatusPENDING BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"

	BatchResponseSimplePublicObjectWithErrorsStatusPROCESSING BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for FilterOperator.
const (
	FilterOperatorBETWEEN FilterOperator = "BETWEEN"

	FilterOperatorCONTAINSTOKEN FilterOperator = "CONTAINS_TOKEN"

	FilterOperatorEQ FilterOperator = "EQ"

	FilterOperatorGT FilterOperator = "GT"

	FilterOperatorGTE FilterOperator = "GTE"

	FilterOperatorHASPROPERTY FilterOperator = "HAS_PROPERTY"

	FilterOperatorIN FilterOperator = "IN"

	FilterOperatorLT FilterOperator = "LT"

	FilterOperatorLTE FilterOperator = "LTE"

	FilterOperatorNEQ FilterOperator = "NEQ"

	FilterOperatorNOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"

	FilterOperatorNOTHASPROPERTY FilterOperator = "NOT_HAS_PROPERTY"

	FilterOperatorNOTIN FilterOperator = "NOT_IN"
)

// AssociatedId defines model for AssociatedId.
type AssociatedId struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// BatchInputSimplePublicObjectBatchInput defines model for BatchInputSimplePublicObjectBatchInput.
type BatchInputSimplePublicObjectBatchInput struct {
	Inputs []SimplePublicObjectBatchInput `json:"inputs"`
}

// BatchInputSimplePublicObjectId defines model for BatchInputSimplePublicObjectId.
type BatchInputSimplePublicObjectId struct {
	Inputs []SimplePublicObjectId `json:"inputs"`
}

// BatchInputSimplePublicObjectInput defines model for BatchInputSimplePublicObjectInput.
type BatchInputSimplePublicObjectInput struct {
	Inputs []SimplePublicObjectInput `json:"inputs"`
}

// BatchReadInputSimplePublicObjectId defines model for BatchReadInputSimplePublicObjectId.
type BatchReadInputSimplePublicObjectId struct {
	IdProperty *string                `json:"idProperty,omitempty"`
	Inputs     []SimplePublicObjectId `json:"inputs"`
	Properties []string               `json:"properties"`
}

// BatchResponseSimplePublicObject defines model for BatchResponseSimplePublicObject.
type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time                              `json:"completedAt"`
	Links       *BatchResponseSimplePublicObject_Links `json:"links,omitempty"`
	RequestedAt *time.Time                             `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                   `json:"results"`
	StartedAt   time.Time                              `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectStatus  `json:"status"`
}

// BatchResponseSimplePublicObject_Links defines model for BatchResponseSimplePublicObject.Links.
type BatchResponseSimplePublicObject_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectStatus defines model for BatchResponseSimplePublicObject.Status.
type BatchResponseSimplePublicObjectStatus string

// BatchResponseSimplePublicObjectWithErrors defines model for BatchResponseSimplePublicObjectWithErrors.
type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                        `json:"completedAt"`
	Errors      *[]StandardError                                 `json:"errors,omitempty"`
	Links       *BatchResponseSimplePublicObjectWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                           `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                       `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                             `json:"results"`
	StartedAt   time.Time                                        `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus  `json:"status"`
}

// BatchResponseSimplePublicObjectWithErrors_Links defines model for BatchResponseSimplePublicObjectWithErrors.Links.
type BatchResponseSimplePublicObjectWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectWithErrorsStatus defines model for BatchResponseSimplePublicObjectWithErrors.Status.
type BatchResponseSimplePublicObjectWithErrorsStatus string

// CollectionResponseAssociatedId defines model for CollectionResponseAssociatedId.
type CollectionResponseAssociatedId struct {
	Paging  *Paging        `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseAssociatedIdForwardPaging defines model for CollectionResponseAssociatedIdForwardPaging.
type CollectionResponseAssociatedIdForwardPaging struct {
	Paging  *ForwardPaging `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseSimplePublicObjectWithAssociationsForwardPaging defines model for CollectionResponseSimplePublicObjectWithAssociationsForwardPaging.
type CollectionResponseSimplePublicObjectWithAssociationsForwardPaging struct {
	Paging  *ForwardPaging                       `json:"paging,omitempty"`
	Results []SimplePublicObjectWithAssociations `json:"results"`
}

// CollectionResponseWithTotalSimplePublicObjectForwardPaging defines model for CollectionResponseWithTotalSimplePublicObjectForwardPaging.
type CollectionResponseWithTotalSimplePublicObjectForwardPaging struct {
	Paging  *ForwardPaging       `json:"paging,omitempty"`
	Results []SimplePublicObject `json:"results"`
	Total   int32                `json:"total"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Filter defines model for Filter.
type Filter struct {
	// null
	Operator     FilterOperator `json:"operator"`
	PropertyName string         `json:"propertyName"`
	Value        *string        `json:"value,omitempty"`
}

// null
type FilterOperator string

// FilterGroup defines model for FilterGroup.
type FilterGroup struct {
	Filters []Filter `json:"filters"`
}

// ForwardPaging defines model for ForwardPaging.
type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage     `json:"next,omitempty"`
	Prev *PreviousPage `json:"prev,omitempty"`
}

// PreviousPage defines model for PreviousPage.
type PreviousPage struct {
	Before string  `json:"before"`
	Link   *string `json:"link,omitempty"`
}

// PublicGdprDeleteInput defines model for PublicGdprDeleteInput.
type PublicGdprDeleteInput struct {
	IdProperty *string `json:"idProperty,omitempty"`
	ObjectId   string  `json:"objectId"`
}

// PublicObjectSearchRequest defines model for PublicObjectSearchRequest.
type PublicObjectSearchRequest struct {
	After        int32         `json:"after"`
	FilterGroups []FilterGroup `json:"filterGroups"`
	Limit        int32         `json:"limit"`
	Properties   []string      `json:"properties"`
	Query        *string       `json:"query,omitempty"`
	Sorts        []string      `json:"sorts"`
}

// SimplePublicObject defines model for SimplePublicObject.
type SimplePublicObject struct {
	Archived   *bool                         `json:"archived,omitempty"`
	ArchivedAt *time.Time                    `json:"archivedAt,omitempty"`
	CreatedAt  time.Time                     `json:"createdAt"`
	Id         string                        `json:"id"`
	Properties SimplePublicObject_Properties `json:"properties"`
	UpdatedAt  time.Time                     `json:"updatedAt"`
}

// SimplePublicObject_Properties defines model for SimplePublicObject.Properties.
type SimplePublicObject_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectBatchInput defines model for SimplePublicObjectBatchInput.
type SimplePublicObjectBatchInput struct {
	Id         string                                  `json:"id"`
	Properties SimplePublicObjectBatchInput_Properties `json:"properties"`
}

// SimplePublicObjectBatchInput_Properties defines model for SimplePublicObjectBatchInput.Properties.
type SimplePublicObjectBatchInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectId defines model for SimplePublicObjectId.
type SimplePublicObjectId struct {
	Id string `json:"id"`
}

// SimplePublicObjectInput defines model for SimplePublicObjectInput.
type SimplePublicObjectInput struct {
	Properties SimplePublicObjectInput_Properties `json:"properties"`
}

// SimplePublicObjectInput_Properties defines model for SimplePublicObjectInput.Properties.
type SimplePublicObjectInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectWithAssociations defines model for SimplePublicObjectWithAssociations.
type SimplePublicObjectWithAssociations struct {
	Archived     *bool                                            `json:"archived,omitempty"`
	ArchivedAt   *time.Time                                       `json:"archivedAt,omitempty"`
	Associations *SimplePublicObjectWithAssociations_Associations `json:"associations,omitempty"`
	CreatedAt    time.Time                                        `json:"createdAt"`
	Id           string                                           `json:"id"`
	Properties   SimplePublicObjectWithAssociations_Properties    `json:"properties"`
	UpdatedAt    time.Time                                        `json:"updatedAt"`
}

// SimplePublicObjectWithAssociations_Associations defines model for SimplePublicObjectWithAssociations.Associations.
type SimplePublicObjectWithAssociations_Associations struct {
	AdditionalProperties map[string]CollectionResponseAssociatedId `json:"-"`
}

// SimplePublicObjectWithAssociations_Properties defines model for SimplePublicObjectWithAssociations.Properties.
type SimplePublicObjectWithAssociations_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getcrmv3objectsObjectTypeGetPageParams defines parameters for Getcrmv3objectsObjectTypeGetPage.
type Getcrmv3objectsObjectTypeGetPageParams struct {
	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsObjectTypeCreateJSONBody defines parameters for Postcrmv3objectsObjectTypeCreate.
type Postcrmv3objectsObjectTypeCreateJSONBody SimplePublicObjectInput

// Postcrmv3objectsObjectTypebatcharchiveArchiveJSONBody defines parameters for Postcrmv3objectsObjectTypebatcharchiveArchive.
type Postcrmv3objectsObjectTypebatcharchiveArchiveJSONBody BatchInputSimplePublicObjectId

// Postcrmv3objectsObjectTypebatchcreateCreateJSONBody defines parameters for Postcrmv3objectsObjectTypebatchcreateCreate.
type Postcrmv3objectsObjectTypebatchcreateCreateJSONBody BatchInputSimplePublicObjectInput

// Postcrmv3objectsObjectTypebatchreadReadJSONBody defines parameters for Postcrmv3objectsObjectTypebatchreadRead.
type Postcrmv3objectsObjectTypebatchreadReadJSONBody BatchReadInputSimplePublicObjectId

// Postcrmv3objectsObjectTypebatchreadReadParams defines parameters for Postcrmv3objectsObjectTypebatchreadRead.
type Postcrmv3objectsObjectTypebatchreadReadParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3objectsObjectTypebatchupdateUpdateJSONBody defines parameters for Postcrmv3objectsObjectTypebatchupdateUpdate.
type Postcrmv3objectsObjectTypebatchupdateUpdateJSONBody BatchInputSimplePublicObjectBatchInput

// Postcrmv3objectsObjectTypegdprDeleteJSONBody defines parameters for Postcrmv3objectsObjectTypegdprDelete.
type Postcrmv3objectsObjectTypegdprDeleteJSONBody PublicGdprDeleteInput

// Postcrmv3objectsObjectTypesearchDoSearchJSONBody defines parameters for Postcrmv3objectsObjectTypesearchDoSearch.
type Postcrmv3objectsObjectTypesearchDoSearchJSONBody PublicObjectSearchRequest

// Getcrmv3objectsObjectTypeObjectIdGetByIdParams defines parameters for Getcrmv3objectsObjectTypeObjectIdGetById.
type Getcrmv3objectsObjectTypeObjectIdGetByIdParams struct {
	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`

	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Patchcrmv3objectsObjectTypeObjectIdUpdateJSONBody defines parameters for Patchcrmv3objectsObjectTypeObjectIdUpdate.
type Patchcrmv3objectsObjectTypeObjectIdUpdateJSONBody SimplePublicObjectInput

// Patchcrmv3objectsObjectTypeObjectIdUpdateParams defines parameters for Patchcrmv3objectsObjectTypeObjectIdUpdate.
type Patchcrmv3objectsObjectTypeObjectIdUpdateParams struct {
	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams defines parameters for Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll.
type Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams struct {
	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`
}

// Postcrmv3objectsObjectTypeCreateJSONRequestBody defines body for Postcrmv3objectsObjectTypeCreate for application/json ContentType.
type Postcrmv3objectsObjectTypeCreateJSONRequestBody Postcrmv3objectsObjectTypeCreateJSONBody

// Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody defines body for Postcrmv3objectsObjectTypebatcharchiveArchive for application/json ContentType.
type Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody Postcrmv3objectsObjectTypebatcharchiveArchiveJSONBody

// Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody defines body for Postcrmv3objectsObjectTypebatchcreateCreate for application/json ContentType.
type Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody Postcrmv3objectsObjectTypebatchcreateCreateJSONBody

// Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody defines body for Postcrmv3objectsObjectTypebatchreadRead for application/json ContentType.
type Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody Postcrmv3objectsObjectTypebatchreadReadJSONBody

// Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody defines body for Postcrmv3objectsObjectTypebatchupdateUpdate for application/json ContentType.
type Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody Postcrmv3objectsObjectTypebatchupdateUpdateJSONBody

// Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody defines body for Postcrmv3objectsObjectTypegdprDelete for application/json ContentType.
type Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody Postcrmv3objectsObjectTypegdprDeleteJSONBody

// Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody defines body for Postcrmv3objectsObjectTypesearchDoSearch for application/json ContentType.
type Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody Postcrmv3objectsObjectTypesearchDoSearchJSONBody

// Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody defines body for Patchcrmv3objectsObjectTypeObjectIdUpdate for application/json ContentType.
type Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody Patchcrmv3objectsObjectTypeObjectIdUpdateJSONBody

// Getter for additional properties for BatchResponseSimplePublicObject_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObject_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObject_Links
func (a *BatchResponseSimplePublicObject_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObject_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObject_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObjectWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links
func (a *BatchResponseSimplePublicObjectWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObjectWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObjectWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObject_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObject_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObject_Properties
func (a *SimplePublicObject_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a *SimplePublicObject_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a SimplePublicObject_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectBatchInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectBatchInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectBatchInput_Properties
func (a *SimplePublicObjectBatchInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectBatchInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectBatchInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectInput_Properties
func (a *SimplePublicObjectInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Associations. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Associations) Get(fieldName string) (value CollectionResponseAssociatedId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Associations
func (a *SimplePublicObjectWithAssociations_Associations) Set(fieldName string, value CollectionResponseAssociatedId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Associations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
		for fieldName, fieldBuf := range object {
			var fieldVal CollectionResponseAssociatedId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Associations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Properties
func (a *SimplePublicObjectWithAssociations_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3objectsObjectTypeGetPage request
	Getcrmv3objectsObjectTypeGetPage(ctx context.Context, objectType string, params *Getcrmv3objectsObjectTypeGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypeCreate request with any body
	Postcrmv3objectsObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypebatcharchiveArchive request with any body
	Postcrmv3objectsObjectTypebatcharchiveArchiveWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypebatcharchiveArchive(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypebatchcreateCreate request with any body
	Postcrmv3objectsObjectTypebatchcreateCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypebatchcreateCreate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypebatchreadRead request with any body
	Postcrmv3objectsObjectTypebatchreadReadWithBody(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypebatchreadRead(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, body Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypebatchupdateUpdate request with any body
	Postcrmv3objectsObjectTypebatchupdateUpdateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypebatchupdateUpdate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypegdprDelete request with any body
	Postcrmv3objectsObjectTypegdprDeleteWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypegdprDelete(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3objectsObjectTypesearchDoSearch request with any body
	Postcrmv3objectsObjectTypesearchDoSearchWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3objectsObjectTypesearchDoSearch(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsObjectTypeObjectIdArchive request
	Deletecrmv3objectsObjectTypeObjectIdArchive(ctx context.Context, objectType string, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsObjectTypeObjectIdGetById request
	Getcrmv3objectsObjectTypeObjectIdGetById(ctx context.Context, objectType string, objectId string, params *Getcrmv3objectsObjectTypeObjectIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3objectsObjectTypeObjectIdUpdate request with any body
	Patchcrmv3objectsObjectTypeObjectIdUpdateWithBody(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3objectsObjectTypeObjectIdUpdate(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, body Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll(ctx context.Context, objectType string, objectId string, toObjectType string, params *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3objectsObjectTypeGetPage(ctx context.Context, objectType string, params *Getcrmv3objectsObjectTypeGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsObjectTypeGetPageRequest(c.Server, objectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypeCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypeCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatcharchiveArchiveWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatcharchiveArchive(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchcreateCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchcreateCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchcreateCreate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchcreateCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchreadReadWithBody(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchreadReadRequestWithBody(c.Server, objectType, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchreadRead(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, body Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchreadReadRequest(c.Server, objectType, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchupdateUpdateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchupdateUpdateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypebatchupdateUpdate(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypebatchupdateUpdateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypegdprDeleteWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypegdprDeleteRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypegdprDelete(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypegdprDeleteRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypesearchDoSearchWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypesearchDoSearchRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3objectsObjectTypesearchDoSearch(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3objectsObjectTypesearchDoSearchRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsObjectTypeObjectIdArchive(ctx context.Context, objectType string, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsObjectTypeObjectIdArchiveRequest(c.Server, objectType, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsObjectTypeObjectIdGetById(ctx context.Context, objectType string, objectId string, params *Getcrmv3objectsObjectTypeObjectIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsObjectTypeObjectIdGetByIdRequest(c.Server, objectType, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsObjectTypeObjectIdUpdateWithBody(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequestWithBody(c.Server, objectType, objectId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3objectsObjectTypeObjectIdUpdate(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, body Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequest(c.Server, objectType, objectId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll(ctx context.Context, objectType string, objectId string, toObjectType string, params *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllRequest(c.Server, objectType, objectId, toObjectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(c.Server, objectType, objectId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(c.Server, objectType, objectId, toObjectType, toObjectId, associationType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3objectsObjectTypeGetPageRequest generates requests for Getcrmv3objectsObjectTypeGetPage
func NewGetcrmv3objectsObjectTypeGetPageRequest(server string, objectType string, params *Getcrmv3objectsObjectTypeGetPageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3objectsObjectTypeCreateRequest calls the generic Postcrmv3objectsObjectTypeCreate builder with application/json body
func NewPostcrmv3objectsObjectTypeCreateRequest(server string, objectType string, body Postcrmv3objectsObjectTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypeCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypeCreateRequestWithBody generates requests for Postcrmv3objectsObjectTypeCreate with any type of body
func NewPostcrmv3objectsObjectTypeCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequest calls the generic Postcrmv3objectsObjectTypebatcharchiveArchive builder with application/json body
func NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequest(server string, objectType string, body Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequestWithBody generates requests for Postcrmv3objectsObjectTypebatcharchiveArchive with any type of body
func NewPostcrmv3objectsObjectTypebatcharchiveArchiveRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/batch/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypebatchcreateCreateRequest calls the generic Postcrmv3objectsObjectTypebatchcreateCreate builder with application/json body
func NewPostcrmv3objectsObjectTypebatchcreateCreateRequest(server string, objectType string, body Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypebatchcreateCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypebatchcreateCreateRequestWithBody generates requests for Postcrmv3objectsObjectTypebatchcreateCreate with any type of body
func NewPostcrmv3objectsObjectTypebatchcreateCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/batch/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypebatchreadReadRequest calls the generic Postcrmv3objectsObjectTypebatchreadRead builder with application/json body
func NewPostcrmv3objectsObjectTypebatchreadReadRequest(server string, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, body Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypebatchreadReadRequestWithBody(server, objectType, params, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypebatchreadReadRequestWithBody generates requests for Postcrmv3objectsObjectTypebatchreadRead with any type of body
func NewPostcrmv3objectsObjectTypebatchreadReadRequestWithBody(server string, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/batch/read", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypebatchupdateUpdateRequest calls the generic Postcrmv3objectsObjectTypebatchupdateUpdate builder with application/json body
func NewPostcrmv3objectsObjectTypebatchupdateUpdateRequest(server string, objectType string, body Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypebatchupdateUpdateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypebatchupdateUpdateRequestWithBody generates requests for Postcrmv3objectsObjectTypebatchupdateUpdate with any type of body
func NewPostcrmv3objectsObjectTypebatchupdateUpdateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/batch/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypegdprDeleteRequest calls the generic Postcrmv3objectsObjectTypegdprDelete builder with application/json body
func NewPostcrmv3objectsObjectTypegdprDeleteRequest(server string, objectType string, body Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypegdprDeleteRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypegdprDeleteRequestWithBody generates requests for Postcrmv3objectsObjectTypegdprDelete with any type of body
func NewPostcrmv3objectsObjectTypegdprDeleteRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/gdpr-delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmv3objectsObjectTypesearchDoSearchRequest calls the generic Postcrmv3objectsObjectTypesearchDoSearch builder with application/json body
func NewPostcrmv3objectsObjectTypesearchDoSearchRequest(server string, objectType string, body Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3objectsObjectTypesearchDoSearchRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3objectsObjectTypesearchDoSearchRequestWithBody generates requests for Postcrmv3objectsObjectTypesearchDoSearch with any type of body
func NewPostcrmv3objectsObjectTypesearchDoSearchRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3objectsObjectTypeObjectIdArchiveRequest generates requests for Deletecrmv3objectsObjectTypeObjectIdArchive
func NewDeletecrmv3objectsObjectTypeObjectIdArchiveRequest(server string, objectType string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3objectsObjectTypeObjectIdGetByIdRequest generates requests for Getcrmv3objectsObjectTypeObjectIdGetById
func NewGetcrmv3objectsObjectTypeObjectIdGetByIdRequest(server string, objectType string, objectId string, params *Getcrmv3objectsObjectTypeObjectIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Properties != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Associations != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequest calls the generic Patchcrmv3objectsObjectTypeObjectIdUpdate builder with application/json body
func NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequest(server string, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, body Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequestWithBody(server, objectType, objectId, params, "application/json", bodyReader)
}

// NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequestWithBody generates requests for Patchcrmv3objectsObjectTypeObjectIdUpdate with any type of body
func NewPatchcrmv3objectsObjectTypeObjectIdUpdateRequestWithBody(server string, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IdProperty != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllRequest generates requests for Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll
func NewGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllRequest(server string, objectType string, objectId string, toObjectType string, params *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s/associations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest generates requests for Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive
func NewDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveRequest(server string, objectType string, objectId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest generates requests for Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate
func NewPutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateRequest(server string, objectType string, objectId string, toObjectType string, toObjectId string, associationType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "associationType", runtime.ParamLocationPath, associationType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/%s/%s/associations/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3objectsObjectTypeGetPage request
	Getcrmv3objectsObjectTypeGetPageWithResponse(ctx context.Context, objectType string, params *Getcrmv3objectsObjectTypeGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeGetPageResponse, error)

	// Postcrmv3objectsObjectTypeCreate request with any body
	Postcrmv3objectsObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypeCreateResponse, error)
	Postcrmv3objectsObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypeCreateResponse, error)

	// Postcrmv3objectsObjectTypebatcharchiveArchive request with any body
	Postcrmv3objectsObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatcharchiveArchiveResponse, error)
	Postcrmv3objectsObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatcharchiveArchiveResponse, error)

	// Postcrmv3objectsObjectTypebatchcreateCreate request with any body
	Postcrmv3objectsObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchcreateCreateResponse, error)
	Postcrmv3objectsObjectTypebatchcreateCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchcreateCreateResponse, error)

	// Postcrmv3objectsObjectTypebatchreadRead request with any body
	Postcrmv3objectsObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchreadReadResponse, error)
	Postcrmv3objectsObjectTypebatchreadReadWithResponse(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, body Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchreadReadResponse, error)

	// Postcrmv3objectsObjectTypebatchupdateUpdate request with any body
	Postcrmv3objectsObjectTypebatchupdateUpdateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchupdateUpdateResponse, error)
	Postcrmv3objectsObjectTypebatchupdateUpdateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchupdateUpdateResponse, error)

	// Postcrmv3objectsObjectTypegdprDelete request with any body
	Postcrmv3objectsObjectTypegdprDeleteWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypegdprDeleteResponse, error)
	Postcrmv3objectsObjectTypegdprDeleteWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypegdprDeleteResponse, error)

	// Postcrmv3objectsObjectTypesearchDoSearch request with any body
	Postcrmv3objectsObjectTypesearchDoSearchWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypesearchDoSearchResponse, error)
	Postcrmv3objectsObjectTypesearchDoSearchWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypesearchDoSearchResponse, error)

	// Deletecrmv3objectsObjectTypeObjectIdArchive request
	Deletecrmv3objectsObjectTypeObjectIdArchiveWithResponse(ctx context.Context, objectType string, objectId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsObjectTypeObjectIdArchiveResponse, error)

	// Getcrmv3objectsObjectTypeObjectIdGetById request
	Getcrmv3objectsObjectTypeObjectIdGetByIdWithResponse(ctx context.Context, objectType string, objectId string, params *Getcrmv3objectsObjectTypeObjectIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeObjectIdGetByIdResponse, error)

	// Patchcrmv3objectsObjectTypeObjectIdUpdate request with any body
	Patchcrmv3objectsObjectTypeObjectIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsObjectTypeObjectIdUpdateResponse, error)
	Patchcrmv3objectsObjectTypeObjectIdUpdateWithResponse(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, body Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsObjectTypeObjectIdUpdateResponse, error)

	// Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll request
	Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, params *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse, error)

	// Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive request
	Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error)

	// Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate request
	Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error)
}

type Getcrmv3objectsObjectTypeGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsObjectTypeGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsObjectTypeGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypebatcharchiveArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypebatcharchiveArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypebatcharchiveArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypebatchcreateCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypebatchcreateCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypebatchcreateCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypebatchreadReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypebatchreadReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypebatchreadReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypebatchupdateUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSimplePublicObject
	JSON207      *BatchResponseSimplePublicObjectWithErrors
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypebatchupdateUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypebatchupdateUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypegdprDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypegdprDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypegdprDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3objectsObjectTypesearchDoSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseWithTotalSimplePublicObjectForwardPaging
}

// Status returns HTTPResponse.Status
func (r Postcrmv3objectsObjectTypesearchDoSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3objectsObjectTypesearchDoSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsObjectTypeObjectIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsObjectTypeObjectIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsObjectTypeObjectIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsObjectTypeObjectIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsObjectTypeObjectIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsObjectTypeObjectIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3objectsObjectTypeObjectIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObject
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3objectsObjectTypeObjectIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3objectsObjectTypeObjectIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseAssociatedIdForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimplePublicObjectWithAssociations
}

// Status returns HTTPResponse.Status
func (r Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3objectsObjectTypeGetPageWithResponse request returning *Getcrmv3objectsObjectTypeGetPageResponse
func (c *ClientWithResponses) Getcrmv3objectsObjectTypeGetPageWithResponse(ctx context.Context, objectType string, params *Getcrmv3objectsObjectTypeGetPageParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeGetPageResponse, error) {
	rsp, err := c.Getcrmv3objectsObjectTypeGetPage(ctx, objectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsObjectTypeGetPageResponse(rsp)
}

// Postcrmv3objectsObjectTypeCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypeCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypeCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypeCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypeCreateResponse(rsp)
}

// Postcrmv3objectsObjectTypebatcharchiveArchiveWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypebatcharchiveArchiveResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatcharchiveArchiveWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatcharchiveArchiveWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatcharchiveArchiveResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatcharchiveArchiveWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatcharchiveArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatcharchiveArchiveResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatcharchiveArchive(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatcharchiveArchiveResponse(rsp)
}

// Postcrmv3objectsObjectTypebatchcreateCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypebatchcreateCreateResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchcreateCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchcreateCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchcreateCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchcreateCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchcreateCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchcreateCreateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchcreateCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchcreateCreateResponse(rsp)
}

// Postcrmv3objectsObjectTypebatchreadReadWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypebatchreadReadResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchreadReadWithBodyWithResponse(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchreadReadWithBody(ctx, objectType, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchreadReadResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchreadReadWithResponse(ctx context.Context, objectType string, params *Postcrmv3objectsObjectTypebatchreadReadParams, body Postcrmv3objectsObjectTypebatchreadReadJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchreadReadResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchreadRead(ctx, objectType, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchreadReadResponse(rsp)
}

// Postcrmv3objectsObjectTypebatchupdateUpdateWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypebatchupdateUpdateResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchupdateUpdateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchupdateUpdateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchupdateUpdateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypebatchupdateUpdateWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypebatchupdateUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypebatchupdateUpdateResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypebatchupdateUpdate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypebatchupdateUpdateResponse(rsp)
}

// Postcrmv3objectsObjectTypegdprDeleteWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypegdprDeleteResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypegdprDeleteWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypegdprDeleteResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypegdprDeleteWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypegdprDeleteResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypegdprDeleteWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypegdprDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypegdprDeleteResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypegdprDelete(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypegdprDeleteResponse(rsp)
}

// Postcrmv3objectsObjectTypesearchDoSearchWithBodyWithResponse request with arbitrary body returning *Postcrmv3objectsObjectTypesearchDoSearchResponse
func (c *ClientWithResponses) Postcrmv3objectsObjectTypesearchDoSearchWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypesearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypesearchDoSearchWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypesearchDoSearchResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3objectsObjectTypesearchDoSearchWithResponse(ctx context.Context, objectType string, body Postcrmv3objectsObjectTypesearchDoSearchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3objectsObjectTypesearchDoSearchResponse, error) {
	rsp, err := c.Postcrmv3objectsObjectTypesearchDoSearch(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3objectsObjectTypesearchDoSearchResponse(rsp)
}

// Deletecrmv3objectsObjectTypeObjectIdArchiveWithResponse request returning *Deletecrmv3objectsObjectTypeObjectIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsObjectTypeObjectIdArchiveWithResponse(ctx context.Context, objectType string, objectId string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsObjectTypeObjectIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsObjectTypeObjectIdArchive(ctx, objectType, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsObjectTypeObjectIdArchiveResponse(rsp)
}

// Getcrmv3objectsObjectTypeObjectIdGetByIdWithResponse request returning *Getcrmv3objectsObjectTypeObjectIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3objectsObjectTypeObjectIdGetByIdWithResponse(ctx context.Context, objectType string, objectId string, params *Getcrmv3objectsObjectTypeObjectIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeObjectIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3objectsObjectTypeObjectIdGetById(ctx, objectType, objectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsObjectTypeObjectIdGetByIdResponse(rsp)
}

// Patchcrmv3objectsObjectTypeObjectIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3objectsObjectTypeObjectIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3objectsObjectTypeObjectIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsObjectTypeObjectIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsObjectTypeObjectIdUpdateWithBody(ctx, objectType, objectId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsObjectTypeObjectIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3objectsObjectTypeObjectIdUpdateWithResponse(ctx context.Context, objectType string, objectId string, params *Patchcrmv3objectsObjectTypeObjectIdUpdateParams, body Patchcrmv3objectsObjectTypeObjectIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3objectsObjectTypeObjectIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3objectsObjectTypeObjectIdUpdate(ctx, objectType, objectId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3objectsObjectTypeObjectIdUpdateResponse(rsp)
}

// Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllWithResponse request returning *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse
func (c *ClientWithResponses) Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, params *Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse, error) {
	rsp, err := c.Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAll(ctx, objectType, objectId, toObjectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse(rsp)
}

// Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse request returning *Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse
func (c *ClientWithResponses) Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	rsp, err := c.Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchive(ctx, objectType, objectId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp)
}

// Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse request returning *Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse
func (c *ClientWithResponses) Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, associationType string, reqEditors ...RequestEditorFn) (*Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	rsp, err := c.Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreate(ctx, objectType, objectId, toObjectType, toObjectId, associationType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp)
}

// ParseGetcrmv3objectsObjectTypeGetPageResponse parses an HTTP response from a Getcrmv3objectsObjectTypeGetPageWithResponse call
func ParseGetcrmv3objectsObjectTypeGetPageResponse(rsp *http.Response) (*Getcrmv3objectsObjectTypeGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsObjectTypeGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypeCreateResponse parses an HTTP response from a Postcrmv3objectsObjectTypeCreateWithResponse call
func ParsePostcrmv3objectsObjectTypeCreateResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypebatcharchiveArchiveResponse parses an HTTP response from a Postcrmv3objectsObjectTypebatcharchiveArchiveWithResponse call
func ParsePostcrmv3objectsObjectTypebatcharchiveArchiveResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypebatcharchiveArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypebatcharchiveArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypebatchcreateCreateResponse parses an HTTP response from a Postcrmv3objectsObjectTypebatchcreateCreateWithResponse call
func ParsePostcrmv3objectsObjectTypebatchcreateCreateResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypebatchcreateCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypebatchcreateCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypebatchreadReadResponse parses an HTTP response from a Postcrmv3objectsObjectTypebatchreadReadWithResponse call
func ParsePostcrmv3objectsObjectTypebatchreadReadResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypebatchreadReadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypebatchreadReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypebatchupdateUpdateResponse parses an HTTP response from a Postcrmv3objectsObjectTypebatchupdateUpdateWithResponse call
func ParsePostcrmv3objectsObjectTypebatchupdateUpdateResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypebatchupdateUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypebatchupdateUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSimplePublicObjectWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypegdprDeleteResponse parses an HTTP response from a Postcrmv3objectsObjectTypegdprDeleteWithResponse call
func ParsePostcrmv3objectsObjectTypegdprDeleteResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypegdprDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypegdprDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostcrmv3objectsObjectTypesearchDoSearchResponse parses an HTTP response from a Postcrmv3objectsObjectTypesearchDoSearchWithResponse call
func ParsePostcrmv3objectsObjectTypesearchDoSearchResponse(rsp *http.Response) (*Postcrmv3objectsObjectTypesearchDoSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3objectsObjectTypesearchDoSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseWithTotalSimplePublicObjectForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsObjectTypeObjectIdArchiveResponse parses an HTTP response from a Deletecrmv3objectsObjectTypeObjectIdArchiveWithResponse call
func ParseDeletecrmv3objectsObjectTypeObjectIdArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsObjectTypeObjectIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsObjectTypeObjectIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3objectsObjectTypeObjectIdGetByIdResponse parses an HTTP response from a Getcrmv3objectsObjectTypeObjectIdGetByIdWithResponse call
func ParseGetcrmv3objectsObjectTypeObjectIdGetByIdResponse(rsp *http.Response) (*Getcrmv3objectsObjectTypeObjectIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsObjectTypeObjectIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3objectsObjectTypeObjectIdUpdateResponse parses an HTTP response from a Patchcrmv3objectsObjectTypeObjectIdUpdateWithResponse call
func ParsePatchcrmv3objectsObjectTypeObjectIdUpdateResponse(rsp *http.Response) (*Patchcrmv3objectsObjectTypeObjectIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3objectsObjectTypeObjectIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse parses an HTTP response from a Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllWithResponse call
func ParseGetcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse(rsp *http.Response) (*Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseAssociatedIdForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse parses an HTTP response from a Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveWithResponse call
func ParseDeletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse(rsp *http.Response) (*Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse parses an HTTP response from a Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateWithResponse call
func ParsePutcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse(rsp *http.Response) (*Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3objectsObjectTypeObjectIdassociationsToObjectTypeToObjectIdAssociationTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimplePublicObjectWithAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
