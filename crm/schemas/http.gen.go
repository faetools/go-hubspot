// Package schemas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package schemas

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for ObjectTypePropertyCreateType.
const (
	ObjectTypePropertyCreateTypeBool ObjectTypePropertyCreateType = "bool"

	ObjectTypePropertyCreateTypeDate ObjectTypePropertyCreateType = "date"

	ObjectTypePropertyCreateTypeDatetime ObjectTypePropertyCreateType = "datetime"

	ObjectTypePropertyCreateTypeEnumeration ObjectTypePropertyCreateType = "enumeration"

	ObjectTypePropertyCreateTypeNumber ObjectTypePropertyCreateType = "number"

	ObjectTypePropertyCreateTypeString ObjectTypePropertyCreateType = "string"
)

// Defines an association between two object types.
type AssociationDefinition struct {
	// When the association was defined.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// ID of the primary object type to link from.
	FromObjectTypeId string `json:"fromObjectTypeId"`

	// A unique ID for this association.
	Id string `json:"id"`

	// A unique name for this association.
	Name *string `json:"name,omitempty"`

	// ID of the target object type ID to link to.
	ToObjectTypeId string `json:"toObjectTypeId"`

	// When the association was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Defines an association between two object types.
type AssociationDefinitionEgg struct {
	// ID of the primary object type to link from.
	FromObjectTypeId string `json:"fromObjectTypeId"`

	// A unique name for this association.
	Name *string `json:"name,omitempty"`

	// ID of the target object type ID to link to.
	ToObjectTypeId string `json:"toObjectTypeId"`
}

// CollectionResponseObjectSchemaNoPaging defines model for CollectionResponseObjectSchemaNoPaging.
type CollectionResponseObjectSchemaNoPaging struct {
	Results []ObjectSchema `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Defines an object schema, including its properties and associations.
type ObjectSchema struct {
	Archived bool `json:"archived"`

	// Associations defined for a given object type.
	Associations []AssociationDefinition `json:"associations"`

	// When the object schema was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// An assigned unique ID for the object, including portal ID and object name.
	FullyQualifiedName string `json:"fullyQualifiedName"`

	// A unique ID for this schema's object type. Will be defined as {meta-type}-{unique ID}.
	Id string `json:"id"`

	// Singular and plural labels for the object. Used in CRM display.
	Labels ObjectTypeDefinitionLabels `json:"labels"`

	// A unique name for the schema's object type.
	Name         string `json:"name"`
	ObjectTypeId string `json:"objectTypeId"`

	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`

	// Properties defined for this object type.
	Properties []Property `json:"properties"`

	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties []string `json:"requiredProperties"`

	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties []string `json:"searchableProperties"`

	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties"`

	// When the object schema was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Defines a new object type, its properties, and associations.
type ObjectSchemaEgg struct {
	// Associations defined for this object type.
	AssociatedObjects []string `json:"associatedObjects"`

	// Singular and plural labels for the object. Used in CRM display.
	Labels ObjectTypeDefinitionLabels `json:"labels"`

	// A unique name for this object. For internal use only.
	Name string `json:"name"`

	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`

	// Properties defined for this object type.
	Properties []ObjectTypePropertyCreate `json:"properties"`

	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties []string `json:"requiredProperties"`

	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties []string `json:"searchableProperties"`

	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties"`
}

// Defines an object type.
type ObjectTypeDefinition struct {
	Archived bool `json:"archived"`

	// When the object type was created.
	CreatedAt          *time.Time `json:"createdAt,omitempty"`
	FullyQualifiedName string     `json:"fullyQualifiedName"`

	// A unique ID for this object type. Will be defined as {meta-type}-{unique ID}.
	Id string `json:"id"`

	// Singular and plural labels for the object. Used in CRM display.
	Labels ObjectTypeDefinitionLabels `json:"labels"`

	// A unique name for this object. For internal use only.
	Name         string `json:"name"`
	ObjectTypeId string `json:"objectTypeId"`

	// The ID of the account that this object type is specific to.
	PortalId *int32 `json:"portalId,omitempty"`

	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`

	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties []string `json:"requiredProperties"`

	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties []string `json:"searchableProperties"`

	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties []string `json:"secondaryDisplayProperties"`

	// When the object type was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Singular and plural labels for the object. Used in CRM display.
type ObjectTypeDefinitionLabels struct {
	// The word for multiple objects. (There’s no way to change this later.)
	Plural *string `json:"plural,omitempty"`

	// The word for one object. (There’s no way to change this later.)
	Singular *string `json:"singular,omitempty"`
}

// Defines attributes to update on an object type.
type ObjectTypeDefinitionPatch struct {
	// Singular and plural labels for the object. Used in CRM display.
	Labels *ObjectTypeDefinitionLabels `json:"labels,omitempty"`

	// The name of the primary property for this object. This will be displayed as primary on the HubSpot record page for this object type.
	PrimaryDisplayProperty *string `json:"primaryDisplayProperty,omitempty"`

	// The names of properties that should be **required** when creating an object of this type.
	RequiredProperties *[]string `json:"requiredProperties,omitempty"`
	Restorable         *bool     `json:"restorable,omitempty"`

	// Names of properties that will be indexed for this object type in by HubSpot's product search.
	SearchableProperties *[]string `json:"searchableProperties,omitempty"`

	// The names of secondary properties for this object. These will be displayed as secondary on the HubSpot record page for this object type.
	SecondaryDisplayProperties *[]string `json:"secondaryDisplayProperties,omitempty"`
}

// Defines a property to create.
type ObjectTypePropertyCreate struct {
	// A description of the property that will be shown as help text in HubSpot.
	Description *string `json:"description,omitempty"`

	// The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Controls how the property appears in HubSpot.
	FieldType string `json:"fieldType"`

	// The name of the group this property belongs to.
	GroupName *string `json:"groupName,omitempty"`

	// Whether or not the property's value must be unique. Once set, this can't be changed.
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`
	Hidden         *bool `json:"hidden,omitempty"`

	// A human-readable property label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal property name, which must be used when referencing the property from the API.
	Name string `json:"name"`

	// A list of available options for the property. This field is only required for enumerated properties.
	Options *[]OptionInput `json:"options,omitempty"`

	// The data type of the property.
	Type ObjectTypePropertyCreateType `json:"type"`
}

// The data type of the property.
type ObjectTypePropertyCreateType string

// The options available when a property is an enumeration
type Option struct {
	// A description of the option.
	Description *string `json:"description,omitempty"`

	// Options are displayed in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// Hidden options will not be displayed in HubSpot.
	Hidden bool `json:"hidden"`

	// A human-readable option label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal value of the option, which must be used when setting the property value through the API.
	Value string `json:"value"`
}

// Defines a enumeration property option
type OptionInput struct {
	// A description of the option.
	Description *string `json:"description,omitempty"`

	// Options are shown in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
	DisplayOrder int32 `json:"displayOrder"`

	// Hidden options won't be shown in HubSpot.
	Hidden bool `json:"hidden"`

	// A human-readable option label that will be shown in HubSpot.
	Label string `json:"label"`

	// The internal value of the option, which must be used when setting the property value through the API.
	Value string `json:"value"`
}

// Defines a property
type Property struct {
	// Whether or not the property is archived.
	Archived *bool `json:"archived,omitempty"`

	// When the property was archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties.
	Calculated *bool `json:"calculated,omitempty"`

	// When the property was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The internal ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot.
	CreatedUserId *string `json:"createdUserId,omitempty"`

	// A description of the property that will be shown as help text in HubSpot.
	Description string `json:"description"`

	// The order that this property should be displayed in the HubSpot UI relative to other properties for this object type. Properties are displayed in order starting with the lowest positive integer value. A value of -1 will cause the property to be displayed **after** any positive values.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// For default properties, true indicates that the options are stored externally to the property settings.
	ExternalOptions *bool `json:"externalOptions,omitempty"`

	// Controls how the property appears in HubSpot.
	FieldType string `json:"fieldType"`

	// Whether or not the property can be used in a HubSpot form.
	FormField *bool `json:"formField,omitempty"`

	// The name of the property group the property belongs to.
	GroupName string `json:"groupName"`

	// Whether or not the property's value must be unique. Once set, this can't be changed.
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`
	Hidden         *bool `json:"hidden,omitempty"`

	// This will be true for default object properties built into HubSpot.
	HubspotDefined *bool `json:"hubspotDefined,omitempty"`

	// A human-readable property label that will be shown in HubSpot.
	Label                string                        `json:"label"`
	ModificationMetadata *PropertyModificationMetadata `json:"modificationMetadata,omitempty"`

	// The internal property name, which must be used when referencing the property via the API.
	Name string `json:"name"`

	// A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
	Options []Option `json:"options"`

	// If this property is related to other object(s), they'll be listed here.
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`

	// Whether the property will display the currency symbol set in the account settings.
	ShowCurrencySymbol *bool `json:"showCurrencySymbol,omitempty"`

	// The property data type.
	Type      string     `json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot.
	UpdatedUserId *string `json:"updatedUserId,omitempty"`
}

// PropertyModificationMetadata defines model for PropertyModificationMetadata.
type PropertyModificationMetadata struct {
	Archivable         bool  `json:"archivable"`
	ReadOnlyDefinition bool  `json:"readOnlyDefinition"`
	ReadOnlyOptions    *bool `json:"readOnlyOptions,omitempty"`
	ReadOnlyValue      bool  `json:"readOnlyValue"`
}

// GetcrmObjectSchemasv3schemasGetAllParams defines parameters for GetcrmObjectSchemasv3schemasGetAll.
type GetcrmObjectSchemasv3schemasGetAllParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// PostcrmObjectSchemasv3schemasCreateJSONBody defines parameters for PostcrmObjectSchemasv3schemasCreate.
type PostcrmObjectSchemasv3schemasCreateJSONBody ObjectSchemaEgg

// DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams defines parameters for DeletecrmObjectSchemasv3schemasObjectTypeArchive.
type DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONBody defines parameters for PatchcrmObjectSchemasv3schemasObjectTypeUpdate.
type PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONBody ObjectTypeDefinitionPatch

// PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONBody defines parameters for PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation.
type PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONBody AssociationDefinitionEgg

// PostcrmObjectSchemasv3schemasCreateJSONRequestBody defines body for PostcrmObjectSchemasv3schemasCreate for application/json ContentType.
type PostcrmObjectSchemasv3schemasCreateJSONRequestBody PostcrmObjectSchemasv3schemasCreateJSONBody

// PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody defines body for PatchcrmObjectSchemasv3schemasObjectTypeUpdate for application/json ContentType.
type PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONBody

// PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody defines body for PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation for application/json ContentType.
type PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetcrmObjectSchemasv3schemasGetAll request
	GetcrmObjectSchemasv3schemasGetAll(ctx context.Context, params *GetcrmObjectSchemasv3schemasGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostcrmObjectSchemasv3schemasCreate request with any body
	PostcrmObjectSchemasv3schemasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	PostcrmObjectSchemasv3schemasCreate(ctx context.Context, body PostcrmObjectSchemasv3schemasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletecrmObjectSchemasv3schemasObjectTypeArchive request
	DeletecrmObjectSchemasv3schemasObjectTypeArchive(ctx context.Context, objectType string, params *DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetcrmObjectSchemasv3schemasObjectTypeGetById request
	GetcrmObjectSchemasv3schemasObjectTypeGetById(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchcrmObjectSchemasv3schemasObjectTypeUpdate request with any body
	PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	PatchcrmObjectSchemasv3schemasObjectTypeUpdate(ctx context.Context, objectType string, body PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation request with any body
	PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation(ctx context.Context, objectType string, body PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation request
	DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation(ctx context.Context, objectType string, associationIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletecrmObjectSchemasv3schemasObjectTypepurgePurge request
	DeletecrmObjectSchemasv3schemasObjectTypepurgePurge(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetcrmObjectSchemasv3schemasGetAll(ctx context.Context, params *GetcrmObjectSchemasv3schemasGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmObjectSchemasv3schemasGetAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostcrmObjectSchemasv3schemasCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmObjectSchemasv3schemasCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostcrmObjectSchemasv3schemasCreate(ctx context.Context, body PostcrmObjectSchemasv3schemasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmObjectSchemasv3schemasCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletecrmObjectSchemasv3schemasObjectTypeArchive(ctx context.Context, objectType string, params *DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmObjectSchemasv3schemasObjectTypeArchiveRequest(c.Server, objectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetcrmObjectSchemasv3schemasObjectTypeGetById(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmObjectSchemasv3schemasObjectTypeGetByIdRequest(c.Server, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchcrmObjectSchemasv3schemasObjectTypeUpdate(ctx context.Context, objectType string, body PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation(ctx context.Context, objectType string, body PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation(ctx context.Context, objectType string, associationIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationRequest(c.Server, objectType, associationIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletecrmObjectSchemasv3schemasObjectTypepurgePurge(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeRequest(c.Server, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmObjectSchemasv3schemasGetAllRequest generates requests for GetcrmObjectSchemasv3schemasGetAll
func NewGetcrmObjectSchemasv3schemasGetAllRequest(server string, params *GetcrmObjectSchemasv3schemasGetAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmObjectSchemasv3schemasCreateRequest calls the generic PostcrmObjectSchemasv3schemasCreate builder with application/json body
func NewPostcrmObjectSchemasv3schemasCreateRequest(server string, body PostcrmObjectSchemasv3schemasCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmObjectSchemasv3schemasCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostcrmObjectSchemasv3schemasCreateRequestWithBody generates requests for PostcrmObjectSchemasv3schemasCreate with any type of body
func NewPostcrmObjectSchemasv3schemasCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmObjectSchemasv3schemasObjectTypeArchiveRequest generates requests for DeletecrmObjectSchemasv3schemasObjectTypeArchive
func NewDeletecrmObjectSchemasv3schemasObjectTypeArchiveRequest(server string, objectType string, params *DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmObjectSchemasv3schemasObjectTypeGetByIdRequest generates requests for GetcrmObjectSchemasv3schemasObjectTypeGetById
func NewGetcrmObjectSchemasv3schemasObjectTypeGetByIdRequest(server string, objectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequest calls the generic PatchcrmObjectSchemasv3schemasObjectTypeUpdate builder with application/json body
func NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequest(server string, objectType string, body PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequestWithBody generates requests for PatchcrmObjectSchemasv3schemasObjectTypeUpdate with any type of body
func NewPatchcrmObjectSchemasv3schemasObjectTypeUpdateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequest calls the generic PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation builder with application/json body
func NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequest(server string, objectType string, body PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequestWithBody generates requests for PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation with any type of body
func NewPostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s/associations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationRequest generates requests for DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation
func NewDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationRequest(server string, objectType string, associationIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "associationIdentifier", runtime.ParamLocationPath, associationIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s/associations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeRequest generates requests for DeletecrmObjectSchemasv3schemasObjectTypepurgePurge
func NewDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeRequest(server string, objectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/schemas/%s/purge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetcrmObjectSchemasv3schemasGetAll request
	GetcrmObjectSchemasv3schemasGetAllWithResponse(ctx context.Context, params *GetcrmObjectSchemasv3schemasGetAllParams, reqEditors ...RequestEditorFn) (*GetcrmObjectSchemasv3schemasGetAllResponse, error)

	// PostcrmObjectSchemasv3schemasCreate request with any body
	PostcrmObjectSchemasv3schemasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasCreateResponse, error)
	PostcrmObjectSchemasv3schemasCreateWithResponse(ctx context.Context, body PostcrmObjectSchemasv3schemasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasCreateResponse, error)

	// DeletecrmObjectSchemasv3schemasObjectTypeArchive request
	DeletecrmObjectSchemasv3schemasObjectTypeArchiveWithResponse(ctx context.Context, objectType string, params *DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse, error)

	// GetcrmObjectSchemasv3schemasObjectTypeGetById request
	GetcrmObjectSchemasv3schemasObjectTypeGetByIdWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse, error)

	// PatchcrmObjectSchemasv3schemasObjectTypeUpdate request with any body
	PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse, error)
	PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithResponse(ctx context.Context, objectType string, body PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse, error)

	// PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation request with any body
	PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse, error)
	PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithResponse(ctx context.Context, objectType string, body PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse, error)

	// DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation request
	DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationWithResponse(ctx context.Context, objectType string, associationIdentifier string, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse, error)

	// DeletecrmObjectSchemasv3schemasObjectTypepurgePurge request
	DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse, error)
}

type GetcrmObjectSchemasv3schemasGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseObjectSchemaNoPaging
}

// Status returns HTTPResponse.Status
func (r GetcrmObjectSchemasv3schemasGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcrmObjectSchemasv3schemasGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostcrmObjectSchemasv3schemasCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectSchema
}

// Status returns HTTPResponse.Status
func (r PostcrmObjectSchemasv3schemasCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostcrmObjectSchemasv3schemasCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectSchema
}

// Status returns HTTPResponse.Status
func (r GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectTypeDefinition
}

// Status returns HTTPResponse.Status
func (r PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AssociationDefinition
}

// Status returns HTTPResponse.Status
func (r PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetcrmObjectSchemasv3schemasGetAllWithResponse request returning *GetcrmObjectSchemasv3schemasGetAllResponse
func (c *ClientWithResponses) GetcrmObjectSchemasv3schemasGetAllWithResponse(ctx context.Context, params *GetcrmObjectSchemasv3schemasGetAllParams, reqEditors ...RequestEditorFn) (*GetcrmObjectSchemasv3schemasGetAllResponse, error) {
	rsp, err := c.GetcrmObjectSchemasv3schemasGetAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmObjectSchemasv3schemasGetAllResponse(rsp)
}

// PostcrmObjectSchemasv3schemasCreateWithBodyWithResponse request with arbitrary body returning *PostcrmObjectSchemasv3schemasCreateResponse
func (c *ClientWithResponses) PostcrmObjectSchemasv3schemasCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasCreateResponse, error) {
	rsp, err := c.PostcrmObjectSchemasv3schemasCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmObjectSchemasv3schemasCreateResponse(rsp)
}

func (c *ClientWithResponses) PostcrmObjectSchemasv3schemasCreateWithResponse(ctx context.Context, body PostcrmObjectSchemasv3schemasCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasCreateResponse, error) {
	rsp, err := c.PostcrmObjectSchemasv3schemasCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmObjectSchemasv3schemasCreateResponse(rsp)
}

// DeletecrmObjectSchemasv3schemasObjectTypeArchiveWithResponse request returning *DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse
func (c *ClientWithResponses) DeletecrmObjectSchemasv3schemasObjectTypeArchiveWithResponse(ctx context.Context, objectType string, params *DeletecrmObjectSchemasv3schemasObjectTypeArchiveParams, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse, error) {
	rsp, err := c.DeletecrmObjectSchemasv3schemasObjectTypeArchive(ctx, objectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse(rsp)
}

// GetcrmObjectSchemasv3schemasObjectTypeGetByIdWithResponse request returning *GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse
func (c *ClientWithResponses) GetcrmObjectSchemasv3schemasObjectTypeGetByIdWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse, error) {
	rsp, err := c.GetcrmObjectSchemasv3schemasObjectTypeGetById(ctx, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse(rsp)
}

// PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBodyWithResponse request with arbitrary body returning *PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse
func (c *ClientWithResponses) PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse, error) {
	rsp, err := c.PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithResponse(ctx context.Context, objectType string, body PatchcrmObjectSchemasv3schemasObjectTypeUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse, error) {
	rsp, err := c.PatchcrmObjectSchemasv3schemasObjectTypeUpdate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse(rsp)
}

// PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBodyWithResponse request with arbitrary body returning *PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse
func (c *ClientWithResponses) PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse, error) {
	rsp, err := c.PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse(rsp)
}

func (c *ClientWithResponses) PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithResponse(ctx context.Context, objectType string, body PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse, error) {
	rsp, err := c.PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociation(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse(rsp)
}

// DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationWithResponse request returning *DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse
func (c *ClientWithResponses) DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationWithResponse(ctx context.Context, objectType string, associationIdentifier string, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse, error) {
	rsp, err := c.DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociation(ctx, objectType, associationIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse(rsp)
}

// DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeWithResponse request returning *DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse
func (c *ClientWithResponses) DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeWithResponse(ctx context.Context, objectType string, reqEditors ...RequestEditorFn) (*DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse, error) {
	rsp, err := c.DeletecrmObjectSchemasv3schemasObjectTypepurgePurge(ctx, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse(rsp)
}

// ParseGetcrmObjectSchemasv3schemasGetAllResponse parses an HTTP response from a GetcrmObjectSchemasv3schemasGetAllWithResponse call
func ParseGetcrmObjectSchemasv3schemasGetAllResponse(rsp *http.Response) (*GetcrmObjectSchemasv3schemasGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcrmObjectSchemasv3schemasGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseObjectSchemaNoPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmObjectSchemasv3schemasCreateResponse parses an HTTP response from a PostcrmObjectSchemasv3schemasCreateWithResponse call
func ParsePostcrmObjectSchemasv3schemasCreateResponse(rsp *http.Response) (*PostcrmObjectSchemasv3schemasCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostcrmObjectSchemasv3schemasCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse parses an HTTP response from a DeletecrmObjectSchemasv3schemasObjectTypeArchiveWithResponse call
func ParseDeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse(rsp *http.Response) (*DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletecrmObjectSchemasv3schemasObjectTypeArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse parses an HTTP response from a GetcrmObjectSchemasv3schemasObjectTypeGetByIdWithResponse call
func ParseGetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse(rsp *http.Response) (*GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetcrmObjectSchemasv3schemasObjectTypeGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse parses an HTTP response from a PatchcrmObjectSchemasv3schemasObjectTypeUpdateWithResponse call
func ParsePatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse(rsp *http.Response) (*PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchcrmObjectSchemasv3schemasObjectTypeUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectTypeDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse parses an HTTP response from a PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationWithResponse call
func ParsePostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse(rsp *http.Response) (*PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostcrmObjectSchemasv3schemasObjectTypeassociationsCreateAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AssociationDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse parses an HTTP response from a DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationWithResponse call
func ParseDeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse(rsp *http.Response) (*DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletecrmObjectSchemasv3schemasObjectTypeassociationsAssociationIdentifierArchiveAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse parses an HTTP response from a DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeWithResponse call
func ParseDeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse(rsp *http.Response) (*DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletecrmObjectSchemasv3schemasObjectTypepurgePurgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
