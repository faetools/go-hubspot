// Package crmextensions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package crmextensions

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
)

// Defines values for ActionHookActionBodyHttpMethod.
const (
	ActionHookActionBodyHttpMethodCONNECT ActionHookActionBodyHttpMethod = "CONNECT"

	ActionHookActionBodyHttpMethodDELETE ActionHookActionBodyHttpMethod = "DELETE"

	ActionHookActionBodyHttpMethodGET ActionHookActionBodyHttpMethod = "GET"

	ActionHookActionBodyHttpMethodHEAD ActionHookActionBodyHttpMethod = "HEAD"

	ActionHookActionBodyHttpMethodOPTIONS ActionHookActionBodyHttpMethod = "OPTIONS"

	ActionHookActionBodyHttpMethodPATCH ActionHookActionBodyHttpMethod = "PATCH"

	ActionHookActionBodyHttpMethodPOST ActionHookActionBodyHttpMethod = "POST"

	ActionHookActionBodyHttpMethodPUT ActionHookActionBodyHttpMethod = "PUT"

	ActionHookActionBodyHttpMethodTRACE ActionHookActionBodyHttpMethod = "TRACE"
)

// Defines values for ActionHookActionBodyType.
const (
	ActionHookActionBodyTypeACTIONHOOK ActionHookActionBodyType = "ACTION_HOOK"
)

// Defines values for CardDisplayPropertyDataType.
const (
	CardDisplayPropertyDataTypeBOOLEAN CardDisplayPropertyDataType = "BOOLEAN"

	CardDisplayPropertyDataTypeCURRENCY CardDisplayPropertyDataType = "CURRENCY"

	CardDisplayPropertyDataTypeDATE CardDisplayPropertyDataType = "DATE"

	CardDisplayPropertyDataTypeDATETIME CardDisplayPropertyDataType = "DATETIME"

	CardDisplayPropertyDataTypeEMAIL CardDisplayPropertyDataType = "EMAIL"

	CardDisplayPropertyDataTypeLINK CardDisplayPropertyDataType = "LINK"

	CardDisplayPropertyDataTypeNUMERIC CardDisplayPropertyDataType = "NUMERIC"

	CardDisplayPropertyDataTypeSTATUS CardDisplayPropertyDataType = "STATUS"

	CardDisplayPropertyDataTypeSTRING CardDisplayPropertyDataType = "STRING"
)

// Defines values for CardObjectTypeBodyName.
const (
	CardObjectTypeBodyNameCompanies CardObjectTypeBodyName = "companies"

	CardObjectTypeBodyNameContacts CardObjectTypeBodyName = "contacts"

	CardObjectTypeBodyNameDeals CardObjectTypeBodyName = "deals"

	CardObjectTypeBodyNameTickets CardObjectTypeBodyName = "tickets"
)

// Defines values for DisplayOptionType.
const (
	DisplayOptionTypeDANGER DisplayOptionType = "DANGER"

	DisplayOptionTypeDEFAULT DisplayOptionType = "DEFAULT"

	DisplayOptionTypeINFO DisplayOptionType = "INFO"

	DisplayOptionTypeSUCCESS DisplayOptionType = "SUCCESS"

	DisplayOptionTypeWARNING DisplayOptionType = "WARNING"
)

// Defines values for IFrameActionBodyType.
const (
	IFrameActionBodyTypeIFRAME IFrameActionBodyType = "IFRAME"
)

// Defines values for IntegratorCardPayloadResponseResponseVersion.
const (
	IntegratorCardPayloadResponseResponseVersionV1 IntegratorCardPayloadResponseResponseVersion = "v1"

	IntegratorCardPayloadResponseResponseVersionV3 IntegratorCardPayloadResponseResponseVersion = "v3"
)

// Defines values for ObjectTokenDataType.
const (
	ObjectTokenDataTypeBOOLEAN ObjectTokenDataType = "BOOLEAN"

	ObjectTokenDataTypeCURRENCY ObjectTokenDataType = "CURRENCY"

	ObjectTokenDataTypeDATE ObjectTokenDataType = "DATE"

	ObjectTokenDataTypeDATETIME ObjectTokenDataType = "DATETIME"

	ObjectTokenDataTypeEMAIL ObjectTokenDataType = "EMAIL"

	ObjectTokenDataTypeLINK ObjectTokenDataType = "LINK"

	ObjectTokenDataTypeNUMERIC ObjectTokenDataType = "NUMERIC"

	ObjectTokenDataTypeSTATUS ObjectTokenDataType = "STATUS"

	ObjectTokenDataTypeSTRING ObjectTokenDataType = "STRING"
)

// ActionConfirmationBody defines model for ActionConfirmationBody.
type ActionConfirmationBody struct {
	CancelButtonLabel  string `json:"cancelButtonLabel"`
	ConfirmButtonLabel string `json:"confirmButtonLabel"`
	Prompt             string `json:"prompt"`
}

// ActionHookActionBody defines model for ActionHookActionBody.
type ActionHookActionBody struct {
	Confirmation          *ActionConfirmationBody        `json:"confirmation,omitempty"`
	HttpMethod            ActionHookActionBodyHttpMethod `json:"httpMethod"`
	Label                 *string                        `json:"label,omitempty"`
	PropertyNamesIncluded []string                       `json:"propertyNamesIncluded"`
	Type                  ActionHookActionBodyType       `json:"type"`
	Url                   string                         `json:"url"`
}

// ActionHookActionBodyHttpMethod defines model for ActionHookActionBody.HttpMethod.
type ActionHookActionBodyHttpMethod string

// ActionHookActionBodyType defines model for ActionHookActionBody.Type.
type ActionHookActionBodyType string

// Configuration for custom user actions on cards.
type CardActions struct {
	// A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
	BaseUrls []string `json:"baseUrls"`
}

// State of card definition to be created
type CardCreateRequest struct {
	// Configuration for custom user actions on cards.
	Actions CardActions `json:"actions"`

	// Configuration for displayed info on a card
	Display CardDisplayBody `json:"display"`

	// Configuration for this card's data fetch request.
	Fetch CardFetchBody `json:"fetch"`

	// The top-level title for this card. Displayed to users in the CRM UI.
	Title string `json:"title"`
}

// Configuration for displayed info on a card
type CardDisplayBody struct {
	// Card display properties. These will will be rendered as "label : value" pairs in the card UI. See the [example card](#) in the overview docs for more details.
	Properties []CardDisplayProperty `json:"properties"`
}

// Definition for a card display property.
type CardDisplayProperty struct {
	// Type of data represented by this property.
	DataType CardDisplayPropertyDataType `json:"dataType"`

	// The label for this property as you'd like it displayed to users.
	Label string `json:"label"`

	// An internal identifier for this property. This value must be unique TODO.
	Name string `json:"name"`

	// An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.
	Options []DisplayOption `json:"options"`
}

// Type of data represented by this property.
type CardDisplayPropertyDataType string

// Configuration for this card's data fetch request.
type CardFetchBody struct {
	// An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.
	ObjectTypes []CardObjectTypeBody `json:"objectTypes"`

	// URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
	TargetUrl string `json:"targetUrl"`
}

// Variant of CardFetchBody with fields as optional for patches
type CardFetchBodyPatch struct {
	// An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.
	ObjectTypes []CardObjectTypeBody `json:"objectTypes"`

	// URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
	TargetUrl *string `json:"targetUrl,omitempty"`
}

// List of card definitions
type CardListResponse struct {
	// List of card definitions
	Results []CardResponse `json:"results"`
}

// CardObjectTypeBody defines model for CardObjectTypeBody.
type CardObjectTypeBody struct {
	// A CRM object type where this card should be displayed.
	Name CardObjectTypeBodyName `json:"name"`

	// An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
	PropertiesToSend []string `json:"propertiesToSend"`
}

// A CRM object type where this card should be displayed.
type CardObjectTypeBodyName string

// Body for a patch with optional fields
type CardPatchRequest struct {
	// Configuration for custom user actions on cards.
	Actions *CardActions `json:"actions,omitempty"`

	// Configuration for displayed info on a card
	Display *CardDisplayBody `json:"display,omitempty"`

	// Variant of CardFetchBody with fields as optional for patches
	Fetch *CardFetchBodyPatch `json:"fetch,omitempty"`

	// The top-level title for this card. Displayed to users in the CRM UI.
	Title *string `json:"title,omitempty"`
}

// Current state of Card Definition
type CardResponse struct {
	// Configuration for custom user actions on cards.
	Actions CardActions `json:"actions"`

	// When this card was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Configuration for displayed info on a card
	Display CardDisplayBody `json:"display"`

	// Configuration for this card's data fetch request.
	Fetch CardFetchBody `json:"fetch"`

	// Generated unique ID for card.
	Id string `json:"id"`

	// Displayed title of this card.
	Title string `json:"title"`

	// The last time this card was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Option definition for STATUS dataTypes.
type DisplayOption struct {
	// The text that will be displayed to users for this option.
	Label string `json:"label"`

	// JSON-friendly unique name for option.
	Name string `json:"name"`

	// The type of status.
	Type DisplayOptionType `json:"type"`
}

// The type of status.
type DisplayOptionType string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// IFrameActionBody defines model for IFrameActionBody.
type IFrameActionBody struct {
	Height                int32                `json:"height"`
	Label                 *string              `json:"label,omitempty"`
	PropertyNamesIncluded []string             `json:"propertyNamesIncluded"`
	Type                  IFrameActionBodyType `json:"type"`
	Url                   string               `json:"url"`
	Width                 int32                `json:"width"`
}

// IFrameActionBodyType defines model for IFrameActionBody.Type.
type IFrameActionBodyType string

// The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page.
type IntegratorCardPayloadResponse struct {
	// URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.
	AllItemsLinkUrl *string `json:"allItemsLinkUrl,omitempty"`

	// The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.
	CardLabel       *string                                       `json:"cardLabel,omitempty"`
	ResponseVersion *IntegratorCardPayloadResponseResponseVersion `json:"responseVersion,omitempty"`

	// A list of up to five valid card sub categories.
	Sections        *[]IntegratorObjectResult `json:"sections,omitempty"`
	TopLevelActions *TopLevelActions          `json:"topLevelActions,omitempty"`

	// The total number of card properties that will be sent in this response.
	TotalCount int32 `json:"totalCount"`
}

// IntegratorCardPayloadResponseResponseVersion defines model for IntegratorCardPayloadResponse.ResponseVersion.
type IntegratorCardPayloadResponseResponseVersion string

// IntegratorObjectResult defines model for IntegratorObjectResult.
type IntegratorObjectResult struct {
	Actions []interface{} `json:"actions"`
	Id      string        `json:"id"`
	LinkUrl *string       `json:"linkUrl,omitempty"`
	Title   string        `json:"title"`
	Tokens  []ObjectToken `json:"tokens"`
}

// ObjectToken defines model for ObjectToken.
type ObjectToken struct {
	DataType *ObjectTokenDataType `json:"dataType,omitempty"`
	Label    *string              `json:"label,omitempty"`
	Name     *string              `json:"name,omitempty"`
	Value    string               `json:"value"`
}

// ObjectTokenDataType defines model for ObjectToken.DataType.
type ObjectTokenDataType string

// TopLevelActions defines model for TopLevelActions.
type TopLevelActions struct {
	Primary   *interface{}      `json:"primary,omitempty"`
	Secondary []interface{}     `json:"secondary"`
	Settings  *IFrameActionBody `json:"settings,omitempty"`
}

// Postcrmv3extensionscardsAppIdCreateJSONBody defines parameters for Postcrmv3extensionscardsAppIdCreate.
type Postcrmv3extensionscardsAppIdCreateJSONBody CardCreateRequest

// Patchcrmv3extensionscardsAppIdCardIdUpdateJSONBody defines parameters for Patchcrmv3extensionscardsAppIdCardIdUpdate.
type Patchcrmv3extensionscardsAppIdCardIdUpdateJSONBody CardPatchRequest

// Postcrmv3extensionscardsAppIdCreateJSONRequestBody defines body for Postcrmv3extensionscardsAppIdCreate for application/json ContentType.
type Postcrmv3extensionscardsAppIdCreateJSONRequestBody Postcrmv3extensionscardsAppIdCreateJSONBody

// Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody defines body for Patchcrmv3extensionscardsAppIdCardIdUpdate for application/json ContentType.
type Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody Patchcrmv3extensionscardsAppIdCardIdUpdateJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3extensionscardssampleResponseGetCardsSampleResponse request
	Getcrmv3extensionscardssampleResponseGetCardsSampleResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3extensionscardsAppIdGetAll request
	Getcrmv3extensionscardsAppIdGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3extensionscardsAppIdCreate request with any body
	Postcrmv3extensionscardsAppIdCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3extensionscardsAppIdCreate(ctx context.Context, appId int32, body Postcrmv3extensionscardsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3extensionscardsAppIdCardIdArchive request
	Deletecrmv3extensionscardsAppIdCardIdArchive(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3extensionscardsAppIdCardIdGetById request
	Getcrmv3extensionscardsAppIdCardIdGetById(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3extensionscardsAppIdCardIdUpdate request with any body
	Patchcrmv3extensionscardsAppIdCardIdUpdateWithBody(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3extensionscardsAppIdCardIdUpdate(ctx context.Context, appId int32, cardId string, body Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3extensionscardssampleResponseGetCardsSampleResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionscardssampleResponseGetCardsSampleResponseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3extensionscardsAppIdGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionscardsAppIdGetAllRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionscardsAppIdCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionscardsAppIdCreateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3extensionscardsAppIdCreate(ctx context.Context, appId int32, body Postcrmv3extensionscardsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3extensionscardsAppIdCreateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3extensionscardsAppIdCardIdArchive(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3extensionscardsAppIdCardIdArchiveRequest(c.Server, appId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3extensionscardsAppIdCardIdGetById(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionscardsAppIdCardIdGetByIdRequest(c.Server, appId, cardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3extensionscardsAppIdCardIdUpdateWithBody(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequestWithBody(c.Server, appId, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3extensionscardsAppIdCardIdUpdate(ctx context.Context, appId int32, cardId string, body Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequest(c.Server, appId, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3extensionscardssampleResponseGetCardsSampleResponseRequest generates requests for Getcrmv3extensionscardssampleResponseGetCardsSampleResponse
func NewGetcrmv3extensionscardssampleResponseGetCardsSampleResponseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/sample-response")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3extensionscardsAppIdGetAllRequest generates requests for Getcrmv3extensionscardsAppIdGetAll
func NewGetcrmv3extensionscardsAppIdGetAllRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3extensionscardsAppIdCreateRequest calls the generic Postcrmv3extensionscardsAppIdCreate builder with application/json body
func NewPostcrmv3extensionscardsAppIdCreateRequest(server string, appId int32, body Postcrmv3extensionscardsAppIdCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3extensionscardsAppIdCreateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostcrmv3extensionscardsAppIdCreateRequestWithBody generates requests for Postcrmv3extensionscardsAppIdCreate with any type of body
func NewPostcrmv3extensionscardsAppIdCreateRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3extensionscardsAppIdCardIdArchiveRequest generates requests for Deletecrmv3extensionscardsAppIdCardIdArchive
func NewDeletecrmv3extensionscardsAppIdCardIdArchiveRequest(server string, appId int32, cardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cardId", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3extensionscardsAppIdCardIdGetByIdRequest generates requests for Getcrmv3extensionscardsAppIdCardIdGetById
func NewGetcrmv3extensionscardsAppIdCardIdGetByIdRequest(server string, appId int32, cardId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cardId", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequest calls the generic Patchcrmv3extensionscardsAppIdCardIdUpdate builder with application/json body
func NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequest(server string, appId int32, cardId string, body Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequestWithBody(server, appId, cardId, "application/json", bodyReader)
}

// NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequestWithBody generates requests for Patchcrmv3extensionscardsAppIdCardIdUpdate with any type of body
func NewPatchcrmv3extensionscardsAppIdCardIdUpdateRequestWithBody(server string, appId int32, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cardId", runtime.ParamLocationPath, cardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/cards/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3extensionscardssampleResponseGetCardsSampleResponse request
	Getcrmv3extensionscardssampleResponseGetCardsSampleResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse, error)

	// Getcrmv3extensionscardsAppIdGetAll request
	Getcrmv3extensionscardsAppIdGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardsAppIdGetAllResponse, error)

	// Postcrmv3extensionscardsAppIdCreate request with any body
	Postcrmv3extensionscardsAppIdCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionscardsAppIdCreateResponse, error)
	Postcrmv3extensionscardsAppIdCreateWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionscardsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionscardsAppIdCreateResponse, error)

	// Deletecrmv3extensionscardsAppIdCardIdArchive request
	Deletecrmv3extensionscardsAppIdCardIdArchiveWithResponse(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionscardsAppIdCardIdArchiveResponse, error)

	// Getcrmv3extensionscardsAppIdCardIdGetById request
	Getcrmv3extensionscardsAppIdCardIdGetByIdWithResponse(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardsAppIdCardIdGetByIdResponse, error)

	// Patchcrmv3extensionscardsAppIdCardIdUpdate request with any body
	Patchcrmv3extensionscardsAppIdCardIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionscardsAppIdCardIdUpdateResponse, error)
	Patchcrmv3extensionscardsAppIdCardIdUpdateWithResponse(ctx context.Context, appId int32, cardId string, body Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionscardsAppIdCardIdUpdateResponse, error)
}

type Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegratorCardPayloadResponse
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3extensionscardsAppIdGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardListResponse
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionscardsAppIdGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionscardsAppIdGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3extensionscardsAppIdCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CardResponse
}

// Status returns HTTPResponse.Status
func (r Postcrmv3extensionscardsAppIdCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3extensionscardsAppIdCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3extensionscardsAppIdCardIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3extensionscardsAppIdCardIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3extensionscardsAppIdCardIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3extensionscardsAppIdCardIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionscardsAppIdCardIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionscardsAppIdCardIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3extensionscardsAppIdCardIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3extensionscardsAppIdCardIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3extensionscardsAppIdCardIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3extensionscardssampleResponseGetCardsSampleResponseWithResponse request returning *Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse
func (c *ClientWithResponses) Getcrmv3extensionscardssampleResponseGetCardsSampleResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse, error) {
	rsp, err := c.Getcrmv3extensionscardssampleResponseGetCardsSampleResponse(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse(rsp)
}

// Getcrmv3extensionscardsAppIdGetAllWithResponse request returning *Getcrmv3extensionscardsAppIdGetAllResponse
func (c *ClientWithResponses) Getcrmv3extensionscardsAppIdGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardsAppIdGetAllResponse, error) {
	rsp, err := c.Getcrmv3extensionscardsAppIdGetAll(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionscardsAppIdGetAllResponse(rsp)
}

// Postcrmv3extensionscardsAppIdCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3extensionscardsAppIdCreateResponse
func (c *ClientWithResponses) Postcrmv3extensionscardsAppIdCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3extensionscardsAppIdCreateResponse, error) {
	rsp, err := c.Postcrmv3extensionscardsAppIdCreateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionscardsAppIdCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3extensionscardsAppIdCreateWithResponse(ctx context.Context, appId int32, body Postcrmv3extensionscardsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3extensionscardsAppIdCreateResponse, error) {
	rsp, err := c.Postcrmv3extensionscardsAppIdCreate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3extensionscardsAppIdCreateResponse(rsp)
}

// Deletecrmv3extensionscardsAppIdCardIdArchiveWithResponse request returning *Deletecrmv3extensionscardsAppIdCardIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3extensionscardsAppIdCardIdArchiveWithResponse(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionscardsAppIdCardIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3extensionscardsAppIdCardIdArchive(ctx, appId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3extensionscardsAppIdCardIdArchiveResponse(rsp)
}

// Getcrmv3extensionscardsAppIdCardIdGetByIdWithResponse request returning *Getcrmv3extensionscardsAppIdCardIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3extensionscardsAppIdCardIdGetByIdWithResponse(ctx context.Context, appId int32, cardId string, reqEditors ...RequestEditorFn) (*Getcrmv3extensionscardsAppIdCardIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3extensionscardsAppIdCardIdGetById(ctx, appId, cardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionscardsAppIdCardIdGetByIdResponse(rsp)
}

// Patchcrmv3extensionscardsAppIdCardIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3extensionscardsAppIdCardIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3extensionscardsAppIdCardIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionscardsAppIdCardIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3extensionscardsAppIdCardIdUpdateWithBody(ctx, appId, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3extensionscardsAppIdCardIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3extensionscardsAppIdCardIdUpdateWithResponse(ctx context.Context, appId int32, cardId string, body Patchcrmv3extensionscardsAppIdCardIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3extensionscardsAppIdCardIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3extensionscardsAppIdCardIdUpdate(ctx, appId, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3extensionscardsAppIdCardIdUpdateResponse(rsp)
}

// ParseGetcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse parses an HTTP response from a Getcrmv3extensionscardssampleResponseGetCardsSampleResponseWithResponse call
func ParseGetcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse(rsp *http.Response) (*Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionscardssampleResponseGetCardsSampleResponseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegratorCardPayloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3extensionscardsAppIdGetAllResponse parses an HTTP response from a Getcrmv3extensionscardsAppIdGetAllWithResponse call
func ParseGetcrmv3extensionscardsAppIdGetAllResponse(rsp *http.Response) (*Getcrmv3extensionscardsAppIdGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionscardsAppIdGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3extensionscardsAppIdCreateResponse parses an HTTP response from a Postcrmv3extensionscardsAppIdCreateWithResponse call
func ParsePostcrmv3extensionscardsAppIdCreateResponse(rsp *http.Response) (*Postcrmv3extensionscardsAppIdCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3extensionscardsAppIdCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3extensionscardsAppIdCardIdArchiveResponse parses an HTTP response from a Deletecrmv3extensionscardsAppIdCardIdArchiveWithResponse call
func ParseDeletecrmv3extensionscardsAppIdCardIdArchiveResponse(rsp *http.Response) (*Deletecrmv3extensionscardsAppIdCardIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3extensionscardsAppIdCardIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3extensionscardsAppIdCardIdGetByIdResponse parses an HTTP response from a Getcrmv3extensionscardsAppIdCardIdGetByIdWithResponse call
func ParseGetcrmv3extensionscardsAppIdCardIdGetByIdResponse(rsp *http.Response) (*Getcrmv3extensionscardsAppIdCardIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionscardsAppIdCardIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3extensionscardsAppIdCardIdUpdateResponse parses an HTTP response from a Patchcrmv3extensionscardsAppIdCardIdUpdateWithResponse call
func ParsePatchcrmv3extensionscardsAppIdCardIdUpdateResponse(rsp *http.Response) (*Patchcrmv3extensionscardsAppIdCardIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3extensionscardsAppIdCardIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
