// Package videoconferencing provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package videoconferencing

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes = "hapikey.Scopes"
)

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// The URLs of the various actions provided by the video conferencing application. All URLs must use the `https` protocol.
type ExternalSettings struct {
	// The URL that HubSpot will send requests to create a new video conference.
	CreateMeetingUrl string `json:"createMeetingUrl"`

	// The URL that HubSpot will send notifications of meetings that have been deleted in HubSpot.
	DeleteMeetingUrl *string `json:"deleteMeetingUrl,omitempty"`

	// The URL that HubSpot will send updates to existing meetings. Typically called when the user changes the topic or times of a meeting.
	UpdateMeetingUrl *string `json:"updateMeetingUrl,omitempty"`

	// The URL that HubSpot will use to verify that a user exists in the video conference application.
	UserVerifyUrl *string `json:"userVerifyUrl,omitempty"`
}

// Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONBody defines parameters for Putcrmv3extensionsvideoconferencingsettingsAppIdReplace.
type Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONBody ExternalSettings

// Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody defines body for Putcrmv3extensionsvideoconferencingsettingsAppIdReplace for application/json ContentType.
type Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive request
	Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3extensionsvideoconferencingsettingsAppIdGetById request
	Getcrmv3extensionsvideoconferencingsettingsAppIdGetById(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3extensionsvideoconferencingsettingsAppIdReplace request with any body
	Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putcrmv3extensionsvideoconferencingsettingsAppIdReplace(ctx context.Context, appId int32, body Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3extensionsvideoconferencingsettingsAppIdGetById(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3extensionsvideoconferencingsettingsAppIdReplace(ctx context.Context, appId int32, body Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveRequest generates requests for Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive
func NewDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/videoconferencing/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdRequest generates requests for Getcrmv3extensionsvideoconferencingsettingsAppIdGetById
func NewGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/videoconferencing/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequest calls the generic Putcrmv3extensionsvideoconferencingsettingsAppIdReplace builder with application/json body
func NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequest(server string, appId int32, body Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequestWithBody generates requests for Putcrmv3extensionsvideoconferencingsettingsAppIdReplace with any type of body
func NewPutcrmv3extensionsvideoconferencingsettingsAppIdReplaceRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/extensions/videoconferencing/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive request
	Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse, error)

	// Getcrmv3extensionsvideoconferencingsettingsAppIdGetById request
	Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse, error)

	// Putcrmv3extensionsvideoconferencingsettingsAppIdReplace request with any body
	Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse, error)
	Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithResponse(ctx context.Context, appId int32, body Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse, error)
}

type Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalSettings
}

// Status returns HTTPResponse.Status
func (r Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalSettings
}

// Status returns HTTPResponse.Status
func (r Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveWithResponse request returning *Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3extensionsvideoconferencingsettingsAppIdArchive(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse(rsp)
}

// Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdWithResponse request returning *Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3extensionsvideoconferencingsettingsAppIdGetById(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse(rsp)
}

// Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBodyWithResponse request with arbitrary body returning *Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse
func (c *ClientWithResponses) Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithResponse(ctx context.Context, appId int32, body Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3extensionsvideoconferencingsettingsAppIdReplace(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse(rsp)
}

// ParseDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse parses an HTTP response from a Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveWithResponse call
func ParseDeletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse(rsp *http.Response) (*Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3extensionsvideoconferencingsettingsAppIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse parses an HTTP response from a Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdWithResponse call
func ParseGetcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse(rsp *http.Response) (*Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3extensionsvideoconferencingsettingsAppIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse parses an HTTP response from a Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceWithResponse call
func ParsePutcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse(rsp *http.Response) (*Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3extensionsvideoconferencingsettingsAppIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
