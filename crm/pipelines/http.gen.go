// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package pipelines

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// CollectionResponsePipeline defines model for CollectionResponsePipeline.
type CollectionResponsePipeline struct {
	Paging  *Paging    `json:"paging,omitempty"`
	Results []Pipeline `json:"results"`
}

// CollectionResponsePipelineStage defines model for CollectionResponsePipelineStage.
type CollectionResponsePipelineStage struct {
	Paging  *Paging         `json:"paging,omitempty"`
	Results []PipelineStage `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage `json:"next,omitempty"`
}

// A pipeline definition.
type Pipeline struct {
	// Whether the pipeline is archived.
	Archived bool `json:"archived"`

	// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// The date the pipeline was created. The default pipelines will have createdAt = 0.
	CreatedAt time.Time `json:"createdAt"`

	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline.
	Id string `json:"id"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label string `json:"label"`

	// The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.
	Stages []PipelineStage `json:"stages"`

	// The date the pipeline was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// An input used to create or replace a pipeline's definition.
type PipelineInput struct {
	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label string `json:"label"`

	// Pipeline stage inputs used to create the new or replacement pipeline.
	Stages []PipelineStageInput `json:"stages"`
}

// An input used to update some properties on a pipeline definition.
type PipelinePatchInput struct {
	// Whether the pipeline is archived. This property should only be provided when restoring an archived pipeline. If it's provided in any other call, the request will fail and a `400 Bad Request` will be returned.
	Archived *bool `json:"archived,omitempty"`

	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label *string `json:"label,omitempty"`
}

// A pipeline stage definition.
type PipelineStage struct {
	// Whether the pipeline is archived.
	Archived bool `json:"archived"`

	// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// The date the pipeline stage was created. The stages on default pipelines will have createdAt = 0.
	CreatedAt time.Time `json:"createdAt"`

	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline stage.
	Id string `json:"id"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label string `json:"label"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStage_Metadata `json:"metadata"`

	// The date the pipeline stage was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStage_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// An input used to create or replace a pipeline stage's definition.
type PipelineStageInput struct {
	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label string `json:"label"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStageInput_Metadata `json:"metadata"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStageInput_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// An input used to update some properties on a pipeline definition.
type PipelineStagePatchInput struct {
	// Whether the pipeline is archived.
	Archived *bool `json:"archived,omitempty"`

	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label *string `json:"label,omitempty"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStagePatchInput_Metadata `json:"metadata"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStagePatchInput_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Getcrmv3pipelinesObjectTypeGetAllParams defines parameters for Getcrmv3pipelinesObjectTypeGetAll.
type Getcrmv3pipelinesObjectTypeGetAllParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3pipelinesObjectTypeCreateJSONBody defines parameters for Postcrmv3pipelinesObjectTypeCreate.
type Postcrmv3pipelinesObjectTypeCreateJSONBody PipelineInput

// Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams defines parameters for Getcrmv3pipelinesObjectTypePipelineIdGetById.
type Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONBody defines parameters for Patchcrmv3pipelinesObjectTypePipelineIdUpdate.
type Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONBody PipelinePatchInput

// Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams defines parameters for Patchcrmv3pipelinesObjectTypePipelineIdUpdate.
type Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONBody defines parameters for Putcrmv3pipelinesObjectTypePipelineIdReplace.
type Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONBody PipelineInput

// Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams defines parameters for Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll.
type Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONBody defines parameters for Postcrmv3pipelinesObjectTypePipelineIdstagesCreate.
type Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONBody PipelineStageInput

// Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams defines parameters for Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById.
type Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONBody defines parameters for Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate.
type Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONBody PipelineStagePatchInput

// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams defines parameters for Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate.
type Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONBody defines parameters for Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace.
type Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONBody PipelineStageInput

// Postcrmv3pipelinesObjectTypeCreateJSONRequestBody defines body for Postcrmv3pipelinesObjectTypeCreate for application/json ContentType.
type Postcrmv3pipelinesObjectTypeCreateJSONRequestBody Postcrmv3pipelinesObjectTypeCreateJSONBody

// Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody defines body for Patchcrmv3pipelinesObjectTypePipelineIdUpdate for application/json ContentType.
type Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONBody

// Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody defines body for Putcrmv3pipelinesObjectTypePipelineIdReplace for application/json ContentType.
type Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONBody

// Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody defines body for Postcrmv3pipelinesObjectTypePipelineIdstagesCreate for application/json ContentType.
type Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONBody

// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody defines body for Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate for application/json ContentType.
type Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONBody

// Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody defines body for Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace for application/json ContentType.
type Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStage_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStage_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStage_Metadata
func (a *PipelineStage_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStage_Metadata to handle AdditionalProperties
func (a *PipelineStage_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStage_Metadata to handle AdditionalProperties
func (a PipelineStage_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStageInput_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStageInput_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStageInput_Metadata
func (a *PipelineStageInput_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStageInput_Metadata to handle AdditionalProperties
func (a *PipelineStageInput_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStageInput_Metadata to handle AdditionalProperties
func (a PipelineStageInput_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStagePatchInput_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStagePatchInput_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStagePatchInput_Metadata
func (a *PipelineStagePatchInput_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStagePatchInput_Metadata to handle AdditionalProperties
func (a *PipelineStagePatchInput_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStagePatchInput_Metadata to handle AdditionalProperties
func (a PipelineStagePatchInput_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getcrmv3pipelinesObjectTypeGetAll request
	Getcrmv3pipelinesObjectTypeGetAll(ctx context.Context, objectType string, params *Getcrmv3pipelinesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3pipelinesObjectTypeCreate request with any body
	Postcrmv3pipelinesObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3pipelinesObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3pipelinesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3pipelinesObjectTypePipelineIdArchive request
	Deletecrmv3pipelinesObjectTypePipelineIdArchive(ctx context.Context, objectType string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3pipelinesObjectTypePipelineIdGetById request
	Getcrmv3pipelinesObjectTypePipelineIdGetById(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3pipelinesObjectTypePipelineIdUpdate request with any body
	Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBody(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3pipelinesObjectTypePipelineIdUpdate(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3pipelinesObjectTypePipelineIdReplace request with any body
	Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putcrmv3pipelinesObjectTypePipelineIdReplace(ctx context.Context, objectType string, pipelineId string, body Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll request
	Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postcrmv3pipelinesObjectTypePipelineIdstagesCreate request with any body
	Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postcrmv3pipelinesObjectTypePipelineIdstagesCreate(ctx context.Context, objectType string, pipelineId string, body Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive request
	Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById request
	Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById(ctx context.Context, objectType string, pipelineId string, stageId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate request with any body
	Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace request with any body
	Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace(ctx context.Context, objectType string, pipelineId string, stageId string, body Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getcrmv3pipelinesObjectTypeGetAll(ctx context.Context, objectType string, params *Getcrmv3pipelinesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3pipelinesObjectTypeGetAllRequest(c.Server, objectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3pipelinesObjectTypeCreateWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3pipelinesObjectTypeCreateRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3pipelinesObjectTypeCreate(ctx context.Context, objectType string, body Postcrmv3pipelinesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3pipelinesObjectTypeCreateRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3pipelinesObjectTypePipelineIdArchive(ctx context.Context, objectType string, pipelineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3pipelinesObjectTypePipelineIdArchiveRequest(c.Server, objectType, pipelineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3pipelinesObjectTypePipelineIdGetById(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3pipelinesObjectTypePipelineIdGetByIdRequest(c.Server, objectType, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBody(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequestWithBody(c.Server, objectType, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3pipelinesObjectTypePipelineIdUpdate(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequest(c.Server, objectType, pipelineId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequestWithBody(c.Server, objectType, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3pipelinesObjectTypePipelineIdReplace(ctx context.Context, objectType string, pipelineId string, body Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequest(c.Server, objectType, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllRequest(c.Server, objectType, pipelineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequestWithBody(c.Server, objectType, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postcrmv3pipelinesObjectTypePipelineIdstagesCreate(ctx context.Context, objectType string, pipelineId string, body Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequest(c.Server, objectType, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveRequest(c.Server, objectType, pipelineId, stageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById(ctx context.Context, objectType string, pipelineId string, stageId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdRequest(c.Server, objectType, pipelineId, stageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequestWithBody(c.Server, objectType, pipelineId, stageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequest(c.Server, objectType, pipelineId, stageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequestWithBody(c.Server, objectType, pipelineId, stageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace(ctx context.Context, objectType string, pipelineId string, stageId string, body Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequest(c.Server, objectType, pipelineId, stageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetcrmv3pipelinesObjectTypeGetAllRequest generates requests for Getcrmv3pipelinesObjectTypeGetAll
func NewGetcrmv3pipelinesObjectTypeGetAllRequest(server string, objectType string, params *Getcrmv3pipelinesObjectTypeGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3pipelinesObjectTypeCreateRequest calls the generic Postcrmv3pipelinesObjectTypeCreate builder with application/json body
func NewPostcrmv3pipelinesObjectTypeCreateRequest(server string, objectType string, body Postcrmv3pipelinesObjectTypeCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3pipelinesObjectTypeCreateRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewPostcrmv3pipelinesObjectTypeCreateRequestWithBody generates requests for Postcrmv3pipelinesObjectTypeCreate with any type of body
func NewPostcrmv3pipelinesObjectTypeCreateRequestWithBody(server string, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3pipelinesObjectTypePipelineIdArchiveRequest generates requests for Deletecrmv3pipelinesObjectTypePipelineIdArchive
func NewDeletecrmv3pipelinesObjectTypePipelineIdArchiveRequest(server string, objectType string, pipelineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3pipelinesObjectTypePipelineIdGetByIdRequest generates requests for Getcrmv3pipelinesObjectTypePipelineIdGetById
func NewGetcrmv3pipelinesObjectTypePipelineIdGetByIdRequest(server string, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequest calls the generic Patchcrmv3pipelinesObjectTypePipelineIdUpdate builder with application/json body
func NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequest(server string, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequestWithBody(server, objectType, pipelineId, params, "application/json", bodyReader)
}

// NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequestWithBody generates requests for Patchcrmv3pipelinesObjectTypePipelineIdUpdate with any type of body
func NewPatchcrmv3pipelinesObjectTypePipelineIdUpdateRequestWithBody(server string, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequest calls the generic Putcrmv3pipelinesObjectTypePipelineIdReplace builder with application/json body
func NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequest(server string, objectType string, pipelineId string, body Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequestWithBody(server, objectType, pipelineId, "application/json", bodyReader)
}

// NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequestWithBody generates requests for Putcrmv3pipelinesObjectTypePipelineIdReplace with any type of body
func NewPutcrmv3pipelinesObjectTypePipelineIdReplaceRequestWithBody(server string, objectType string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllRequest generates requests for Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll
func NewGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllRequest(server string, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequest calls the generic Postcrmv3pipelinesObjectTypePipelineIdstagesCreate builder with application/json body
func NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequest(server string, objectType string, pipelineId string, body Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequestWithBody(server, objectType, pipelineId, "application/json", bodyReader)
}

// NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequestWithBody generates requests for Postcrmv3pipelinesObjectTypePipelineIdstagesCreate with any type of body
func NewPostcrmv3pipelinesObjectTypePipelineIdstagesCreateRequestWithBody(server string, objectType string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveRequest generates requests for Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive
func NewDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveRequest(server string, objectType string, pipelineId string, stageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdRequest generates requests for Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById
func NewGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdRequest(server string, objectType string, pipelineId string, stageId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequest calls the generic Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate builder with application/json body
func NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequest(server string, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequestWithBody(server, objectType, pipelineId, stageId, params, "application/json", bodyReader)
}

// NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequestWithBody generates requests for Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate with any type of body
func NewPatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateRequestWithBody(server string, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequest calls the generic Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace builder with application/json body
func NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequest(server string, objectType string, pipelineId string, stageId string, body Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequestWithBody(server, objectType, pipelineId, stageId, "application/json", bodyReader)
}

// NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequestWithBody generates requests for Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace with any type of body
func NewPutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceRequestWithBody(server string, objectType string, pipelineId string, stageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pipelineId", runtime.ParamLocationPath, pipelineId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stageId", runtime.ParamLocationPath, stageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/pipelines/%s/%s/stages/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getcrmv3pipelinesObjectTypeGetAll request
	Getcrmv3pipelinesObjectTypeGetAllWithResponse(ctx context.Context, objectType string, params *Getcrmv3pipelinesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypeGetAllResponse, error)

	// Postcrmv3pipelinesObjectTypeCreate request with any body
	Postcrmv3pipelinesObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypeCreateResponse, error)
	Postcrmv3pipelinesObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3pipelinesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypeCreateResponse, error)

	// Deletecrmv3pipelinesObjectTypePipelineIdArchive request
	Deletecrmv3pipelinesObjectTypePipelineIdArchiveWithResponse(ctx context.Context, objectType string, pipelineId string, reqEditors ...RequestEditorFn) (*Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse, error)

	// Getcrmv3pipelinesObjectTypePipelineIdGetById request
	Getcrmv3pipelinesObjectTypePipelineIdGetByIdWithResponse(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse, error)

	// Patchcrmv3pipelinesObjectTypePipelineIdUpdate request with any body
	Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse, error)
	Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithResponse(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse, error)

	// Putcrmv3pipelinesObjectTypePipelineIdReplace request with any body
	Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse, error)
	Putcrmv3pipelinesObjectTypePipelineIdReplaceWithResponse(ctx context.Context, objectType string, pipelineId string, body Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse, error)

	// Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll request
	Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllWithResponse(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse, error)

	// Postcrmv3pipelinesObjectTypePipelineIdstagesCreate request with any body
	Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse, error)
	Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithResponse(ctx context.Context, objectType string, pipelineId string, body Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse, error)

	// Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive request
	Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...RequestEditorFn) (*Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse, error)

	// Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById request
	Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse, error)

	// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate request with any body
	Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse, error)
	Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse, error)

	// Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace request with any body
	Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse, error)
	Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, body Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse, error)
}

type Getcrmv3pipelinesObjectTypeGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePipeline
}

// Status returns HTTPResponse.Status
func (r Getcrmv3pipelinesObjectTypeGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3pipelinesObjectTypeGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3pipelinesObjectTypeCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pipeline
}

// Status returns HTTPResponse.Status
func (r Postcrmv3pipelinesObjectTypeCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3pipelinesObjectTypeCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePipelineStage
}

// Status returns HTTPResponse.Status
func (r Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getcrmv3pipelinesObjectTypeGetAllWithResponse request returning *Getcrmv3pipelinesObjectTypeGetAllResponse
func (c *ClientWithResponses) Getcrmv3pipelinesObjectTypeGetAllWithResponse(ctx context.Context, objectType string, params *Getcrmv3pipelinesObjectTypeGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypeGetAllResponse, error) {
	rsp, err := c.Getcrmv3pipelinesObjectTypeGetAll(ctx, objectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3pipelinesObjectTypeGetAllResponse(rsp)
}

// Postcrmv3pipelinesObjectTypeCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3pipelinesObjectTypeCreateResponse
func (c *ClientWithResponses) Postcrmv3pipelinesObjectTypeCreateWithBodyWithResponse(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3pipelinesObjectTypeCreateWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3pipelinesObjectTypeCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3pipelinesObjectTypeCreateWithResponse(ctx context.Context, objectType string, body Postcrmv3pipelinesObjectTypeCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypeCreateResponse, error) {
	rsp, err := c.Postcrmv3pipelinesObjectTypeCreate(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3pipelinesObjectTypeCreateResponse(rsp)
}

// Deletecrmv3pipelinesObjectTypePipelineIdArchiveWithResponse request returning *Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3pipelinesObjectTypePipelineIdArchiveWithResponse(ctx context.Context, objectType string, pipelineId string, reqEditors ...RequestEditorFn) (*Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3pipelinesObjectTypePipelineIdArchive(ctx, objectType, pipelineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3pipelinesObjectTypePipelineIdArchiveResponse(rsp)
}

// Getcrmv3pipelinesObjectTypePipelineIdGetByIdWithResponse request returning *Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3pipelinesObjectTypePipelineIdGetByIdWithResponse(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3pipelinesObjectTypePipelineIdGetById(ctx, objectType, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3pipelinesObjectTypePipelineIdGetByIdResponse(rsp)
}

// Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithBody(ctx, objectType, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3pipelinesObjectTypePipelineIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithResponse(ctx context.Context, objectType string, pipelineId string, params *Patchcrmv3pipelinesObjectTypePipelineIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3pipelinesObjectTypePipelineIdUpdate(ctx, objectType, pipelineId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3pipelinesObjectTypePipelineIdUpdateResponse(rsp)
}

// Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBodyWithResponse request with arbitrary body returning *Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse
func (c *ClientWithResponses) Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3pipelinesObjectTypePipelineIdReplaceWithBody(ctx, objectType, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3pipelinesObjectTypePipelineIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) Putcrmv3pipelinesObjectTypePipelineIdReplaceWithResponse(ctx context.Context, objectType string, pipelineId string, body Putcrmv3pipelinesObjectTypePipelineIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3pipelinesObjectTypePipelineIdReplace(ctx, objectType, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3pipelinesObjectTypePipelineIdReplaceResponse(rsp)
}

// Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllWithResponse request returning *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse
func (c *ClientWithResponses) Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllWithResponse(ctx context.Context, objectType string, pipelineId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse, error) {
	rsp, err := c.Getcrmv3pipelinesObjectTypePipelineIdstagesGetAll(ctx, objectType, pipelineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse(rsp)
}

// Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBodyWithResponse request with arbitrary body returning *Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse
func (c *ClientWithResponses) Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse, error) {
	rsp, err := c.Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithBody(ctx, objectType, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse(rsp)
}

func (c *ClientWithResponses) Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithResponse(ctx context.Context, objectType string, pipelineId string, body Postcrmv3pipelinesObjectTypePipelineIdstagesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse, error) {
	rsp, err := c.Postcrmv3pipelinesObjectTypePipelineIdstagesCreate(ctx, objectType, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse(rsp)
}

// Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveWithResponse request returning *Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse
func (c *ClientWithResponses) Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...RequestEditorFn) (*Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse, error) {
	rsp, err := c.Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchive(ctx, objectType, pipelineId, stageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse(rsp)
}

// Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdWithResponse request returning *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse
func (c *ClientWithResponses) Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse, error) {
	rsp, err := c.Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetById(ctx, objectType, pipelineId, stageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse(rsp)
}

// Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse
func (c *ClientWithResponses) Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithBody(ctx, objectType, pipelineId, stageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, params *Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateParams, body Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse, error) {
	rsp, err := c.Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdate(ctx, objectType, pipelineId, stageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse(rsp)
}

// Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBodyWithResponse request with arbitrary body returning *Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse
func (c *ClientWithResponses) Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBodyWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithBody(ctx, objectType, pipelineId, stageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse(rsp)
}

func (c *ClientWithResponses) Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithResponse(ctx context.Context, objectType string, pipelineId string, stageId string, body Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceJSONRequestBody, reqEditors ...RequestEditorFn) (*Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse, error) {
	rsp, err := c.Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplace(ctx, objectType, pipelineId, stageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse(rsp)
}

// ParseGetcrmv3pipelinesObjectTypeGetAllResponse parses an HTTP response from a Getcrmv3pipelinesObjectTypeGetAllWithResponse call
func ParseGetcrmv3pipelinesObjectTypeGetAllResponse(rsp *http.Response) (*Getcrmv3pipelinesObjectTypeGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3pipelinesObjectTypeGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3pipelinesObjectTypeCreateResponse parses an HTTP response from a Postcrmv3pipelinesObjectTypeCreateWithResponse call
func ParsePostcrmv3pipelinesObjectTypeCreateResponse(rsp *http.Response) (*Postcrmv3pipelinesObjectTypeCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3pipelinesObjectTypeCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3pipelinesObjectTypePipelineIdArchiveResponse parses an HTTP response from a Deletecrmv3pipelinesObjectTypePipelineIdArchiveWithResponse call
func ParseDeletecrmv3pipelinesObjectTypePipelineIdArchiveResponse(rsp *http.Response) (*Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3pipelinesObjectTypePipelineIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3pipelinesObjectTypePipelineIdGetByIdResponse parses an HTTP response from a Getcrmv3pipelinesObjectTypePipelineIdGetByIdWithResponse call
func ParseGetcrmv3pipelinesObjectTypePipelineIdGetByIdResponse(rsp *http.Response) (*Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3pipelinesObjectTypePipelineIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3pipelinesObjectTypePipelineIdUpdateResponse parses an HTTP response from a Patchcrmv3pipelinesObjectTypePipelineIdUpdateWithResponse call
func ParsePatchcrmv3pipelinesObjectTypePipelineIdUpdateResponse(rsp *http.Response) (*Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3pipelinesObjectTypePipelineIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutcrmv3pipelinesObjectTypePipelineIdReplaceResponse parses an HTTP response from a Putcrmv3pipelinesObjectTypePipelineIdReplaceWithResponse call
func ParsePutcrmv3pipelinesObjectTypePipelineIdReplaceResponse(rsp *http.Response) (*Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3pipelinesObjectTypePipelineIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse parses an HTTP response from a Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllWithResponse call
func ParseGetcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse(rsp *http.Response) (*Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3pipelinesObjectTypePipelineIdstagesGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse parses an HTTP response from a Postcrmv3pipelinesObjectTypePipelineIdstagesCreateWithResponse call
func ParsePostcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse(rsp *http.Response) (*Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postcrmv3pipelinesObjectTypePipelineIdstagesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse parses an HTTP response from a Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveWithResponse call
func ParseDeletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse(rsp *http.Response) (*Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletecrmv3pipelinesObjectTypePipelineIdstagesStageIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse parses an HTTP response from a Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdWithResponse call
func ParseGetcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse(rsp *http.Response) (*Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getcrmv3pipelinesObjectTypePipelineIdstagesStageIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse parses an HTTP response from a Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateWithResponse call
func ParsePatchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse(rsp *http.Response) (*Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchcrmv3pipelinesObjectTypePipelineIdstagesStageIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse parses an HTTP response from a Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceWithResponse call
func ParsePutcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse(rsp *http.Response) (*Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putcrmv3pipelinesObjectTypePipelineIdstagesStageIdReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
