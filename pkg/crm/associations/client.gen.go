// Package associations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package associations

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/faetools/client"
)

func (c *Client) doArchiveBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newArchiveBatchRequestWithBody(c.baseURL, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doArchiveBatch(ctx context.Context, fromObjectType string, toObjectType string, body ArchiveBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newArchiveBatchRequest(c.baseURL, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateBatchRequestWithBody(c.baseURL, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateBatch(ctx context.Context, fromObjectType string, toObjectType string, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateBatchRequest(c.baseURL, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doReadBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReadBatchRequestWithBody(c.baseURL, fromObjectType, toObjectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doReadBatch(ctx context.Context, fromObjectType string, toObjectType string, body ReadBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReadBatchRequest(c.baseURL, fromObjectType, toObjectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetAllTypes(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetAllTypesRequest(c.baseURL, fromObjectType, toObjectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

// newArchiveBatchRequest calls the generic ArchiveBatch builder with application/json body.
func newArchiveBatchRequest(baseURL *url.URL, fromObjectType string, toObjectType string, body ArchiveBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newArchiveBatchRequestWithBody(baseURL, fromObjectType, toObjectType, "application/json", bodyReader)
}

// newArchiveBatchRequestWithBody generates requests for ArchiveBatch with any type of body
func newArchiveBatchRequestWithBody(baseURL *url.URL, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	opPathArchiveBatch := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/archive", pathParam0, pathParam1)
	if opPathArchiveBatch[0] == '/' {
		opPathArchiveBatch = "." + opPathArchiveBatch
	}

	queryURL, err := baseURL.Parse(opPathArchiveBatch)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newCreateBatchRequest calls the generic CreateBatch builder with application/json body.
func newCreateBatchRequest(baseURL *url.URL, fromObjectType string, toObjectType string, body CreateBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateBatchRequestWithBody(baseURL, fromObjectType, toObjectType, "application/json", bodyReader)
}

// newCreateBatchRequestWithBody generates requests for CreateBatch with any type of body
func newCreateBatchRequestWithBody(baseURL *url.URL, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	opPathCreateBatch := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/create", pathParam0, pathParam1)
	if opPathCreateBatch[0] == '/' {
		opPathCreateBatch = "." + opPathCreateBatch
	}

	queryURL, err := baseURL.Parse(opPathCreateBatch)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newReadBatchRequest calls the generic ReadBatch builder with application/json body.
func newReadBatchRequest(baseURL *url.URL, fromObjectType string, toObjectType string, body ReadBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newReadBatchRequestWithBody(baseURL, fromObjectType, toObjectType, "application/json", bodyReader)
}

// newReadBatchRequestWithBody generates requests for ReadBatch with any type of body
func newReadBatchRequestWithBody(baseURL *url.URL, fromObjectType string, toObjectType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	opPathReadBatch := fmt.Sprintf("/crm/v3/associations/%s/%s/batch/read", pathParam0, pathParam1)
	if opPathReadBatch[0] == '/' {
		opPathReadBatch = "." + opPathReadBatch
	}

	queryURL, err := baseURL.Parse(opPathReadBatch)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newGetAllTypesRequest generates requests for GetAllTypes
func newGetAllTypesRequest(baseURL *url.URL, fromObjectType string, toObjectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	opPathGetAllTypes := fmt.Sprintf("/crm/v3/associations/%s/%s/types", pathParam0, pathParam1)
	if opPathGetAllTypes[0] == '/' {
		opPathGetAllTypes = "." + opPathGetAllTypes
	}

	queryURL, err := baseURL.Parse(opPathGetAllTypes)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.requestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	baseURL *url.URL

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client client.HTTPRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	requestEditors []client.RequestEditorFn
}

// SetClient sets the underlying client.
func (c *Client) SetClient(doer client.HTTPRequestDoer) {
	c.client = doer
}

// AddRequestEditor adds a request editor to the client.
func (c *Client) AddRequestEditor(fn client.RequestEditorFn) {
	c.requestEditors = append(c.requestEditors, fn)
}

// SetBaseURL overrides the baseURL.
func (c *Client) SetBaseURL(baseURL *url.URL) {
	c.baseURL = baseURL
}

// NewClient creates a new Client, with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	// create a client
	c := Client{}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&c); err != nil {
			return nil, err
		}
	}

	// add default server
	if c.baseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(&c); err != nil {
			return nil, err
		}
	}

	// create httpClient, if not already present
	if c.client == nil {
		c.client = &http.Client{}
	}

	return &c, nil
}

// ClientInterface interface specification for the client.
type ClientInterface interface {
	client.Client
	// ArchiveBatch request with any body
	ArchiveBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ArchiveBatchResponse, error)
	ArchiveBatch(ctx context.Context, fromObjectType string, toObjectType string, body ArchiveBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ArchiveBatchResponse, error)

	// CreateBatch request with any body
	CreateBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error)
	CreateBatch(ctx context.Context, fromObjectType string, toObjectType string, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error)

	// ReadBatch request with any body
	ReadBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReadBatchResponse, error)
	ReadBatch(ctx context.Context, fromObjectType string, toObjectType string, body ReadBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReadBatchResponse, error)

	// GetAllTypes request
	GetAllTypes(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...client.RequestEditorFn) (*GetAllTypesResponse, error)
}

type ArchiveBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponsePublicAssociation
	JSON207      *BatchResponsePublicAssociation
}

// Status returns HTTPResponse.Status
func (r CreateBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponsePublicAssociationMulti
	JSON207      *BatchResponsePublicAssociationMulti
}

// Status returns HTTPResponse.Status
func (r ReadBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePublicAssociationDefiniton
}

// Status returns HTTPResponse.Status
func (r GetAllTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ArchiveBatchWithBody request with arbitrary body returning *ArchiveBatchResponse
func (c *Client) ArchiveBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ArchiveBatchResponse, error) {
	rsp, err := c.doArchiveBatchWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseArchiveBatchResponse(rsp)
}

func (c *Client) ArchiveBatch(ctx context.Context, fromObjectType string, toObjectType string, body ArchiveBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ArchiveBatchResponse, error) {
	rsp, err := c.doArchiveBatch(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseArchiveBatchResponse(rsp)
}

// CreateBatchWithBody request with arbitrary body returning *CreateBatchResponse
func (c *Client) CreateBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.doCreateBatchWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateBatchResponse(rsp)
}

func (c *Client) CreateBatch(ctx context.Context, fromObjectType string, toObjectType string, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.doCreateBatch(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateBatchResponse(rsp)
}

// ReadBatchWithBody request with arbitrary body returning *ReadBatchResponse
func (c *Client) ReadBatchWithBody(ctx context.Context, fromObjectType string, toObjectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReadBatchResponse, error) {
	rsp, err := c.doReadBatchWithBody(ctx, fromObjectType, toObjectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseReadBatchResponse(rsp)
}

func (c *Client) ReadBatch(ctx context.Context, fromObjectType string, toObjectType string, body ReadBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReadBatchResponse, error) {
	rsp, err := c.doReadBatch(ctx, fromObjectType, toObjectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseReadBatchResponse(rsp)
}

// GetAllTypes request returning *GetAllTypesResponse
func (c *Client) GetAllTypes(ctx context.Context, fromObjectType string, toObjectType string, reqEditors ...client.RequestEditorFn) (*GetAllTypesResponse, error) {
	rsp, err := c.doGetAllTypes(ctx, fromObjectType, toObjectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetAllTypesResponse(rsp)
}

// parseArchiveBatchResponse parses an HTTP response from a ArchiveBatch call.
func parseArchiveBatchResponse(rsp *http.Response) (*ArchiveBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// parseCreateBatchResponse parses an HTTP response from a CreateBatch call.
func parseCreateBatchResponse(rsp *http.Response) (*CreateBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponsePublicAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponsePublicAssociation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// parseReadBatchResponse parses an HTTP response from a ReadBatch call.
func parseReadBatchResponse(rsp *http.Response) (*ReadBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponsePublicAssociationMulti
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponsePublicAssociationMulti
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// parseGetAllTypesResponse parses an HTTP response from a GetAllTypes call.
func parseGetAllTypesResponse(rsp *http.Response) (*GetAllTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePublicAssociationDefiniton
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
