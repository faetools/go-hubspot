// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package pipelines

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/faetools/client"
)

// operation paths

const (
	opPathGetAllObjectTypeFormat = "./crm/v3/pipelines/%s"
	opPathCreateObjectTypeFormat = "./crm/v3/pipelines/%s"
	opPathArchivePipelineFormat  = "./crm/v3/pipelines/%s/%s"
	opPathGetPipelineFormat      = "./crm/v3/pipelines/%s/%s"
	opPathUpdatePipelineFormat   = "./crm/v3/pipelines/%s/%s"
	opPathReplacePipelineFormat  = "./crm/v3/pipelines/%s/%s"
	opPathGetAllStagesFormat     = "./crm/v3/pipelines/%s/%s/stages"
	opPathCreateStagesFormat     = "./crm/v3/pipelines/%s/%s/stages"
	opPathArchiveStageFormat     = "./crm/v3/pipelines/%s/%s/stages/%s"
	opPathGetStageFormat         = "./crm/v3/pipelines/%s/%s/stages/%s"
	opPathUpdateStageFormat      = "./crm/v3/pipelines/%s/%s/stages/%s"
	opPathReplaceStageFormat     = "./crm/v3/pipelines/%s/%s/stages/%s"
)

// ClientInterface interface specification for the client.
type ClientInterface interface {
	// GetAllObjectType request
	GetAllObjectType(ctx context.Context, objectType string, params *GetAllObjectTypeParams, reqEditors ...client.RequestEditorFn) (*GetAllObjectTypeResponse, error)

	// CreateObjectType request with any body
	CreateObjectTypeWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateObjectTypeResponse, error)
	CreateObjectType(ctx context.Context, objectType string, body CreateObjectTypeJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateObjectTypeResponse, error)

	// ArchivePipeline request
	ArchivePipeline(ctx context.Context, objectType string, pipelineId string, reqEditors ...client.RequestEditorFn) (*ArchivePipelineResponse, error)

	// GetPipeline request
	GetPipeline(ctx context.Context, objectType string, pipelineId string, params *GetPipelineParams, reqEditors ...client.RequestEditorFn) (*GetPipelineResponse, error)

	// UpdatePipeline request with any body
	UpdatePipelineWithBody(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdatePipelineResponse, error)
	UpdatePipeline(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, body UpdatePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdatePipelineResponse, error)

	// ReplacePipeline request with any body
	ReplacePipelineWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReplacePipelineResponse, error)
	ReplacePipeline(ctx context.Context, objectType string, pipelineId string, body ReplacePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReplacePipelineResponse, error)

	// GetAllStages request
	GetAllStages(ctx context.Context, objectType string, pipelineId string, params *GetAllStagesParams, reqEditors ...client.RequestEditorFn) (*GetAllStagesResponse, error)

	// CreateStages request with any body
	CreateStagesWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateStagesResponse, error)
	CreateStages(ctx context.Context, objectType string, pipelineId string, body CreateStagesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateStagesResponse, error)

	// ArchiveStage request
	ArchiveStage(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...client.RequestEditorFn) (*ArchiveStageResponse, error)

	// GetStage request
	GetStage(ctx context.Context, objectType string, pipelineId string, stageId string, params *GetStageParams, reqEditors ...client.RequestEditorFn) (*GetStageResponse, error)

	// UpdateStage request with any body
	UpdateStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateStageResponse, error)
	UpdateStage(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, body UpdateStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateStageResponse, error)

	// ReplaceStage request with any body
	ReplaceStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReplaceStageResponse, error)
	ReplaceStage(ctx context.Context, objectType string, pipelineId string, stageId string, body ReplaceStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReplaceStageResponse, error)
}

// Client definition

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client client.Client

// NewClient creates a new Client with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	c, err := client.NewClient(opts...)
	if err != nil {
		return nil, err
	}

	if c.BaseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(c); err != nil {
			return nil, err
		}
	}

	return (*Client)(c), nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	return nil
}

// GetAllObjectType: GET /crm/v3/pipelines/{objectType}

type GetAllObjectTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePipeline
}

// Status returns HTTPResponse.Status
func (r GetAllObjectTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllObjectTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetAllObjectTypeRequest generates requests for GetAllObjectType
func newGetAllObjectTypeRequest(baseURL *url.URL, objectType string, params *GetAllObjectTypeParams) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetAllObjectTypeFormat, pathParam0)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetAllObjectType request returning *GetAllObjectTypeResponse
func (c *Client) GetAllObjectType(ctx context.Context, objectType string, params *GetAllObjectTypeParams, reqEditors ...client.RequestEditorFn) (*GetAllObjectTypeResponse, error) {
	req, err := newGetAllObjectTypeRequest(c.BaseURL, objectType, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetAllObjectTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// CreateObjectType: POST /crm/v3/pipelines/{objectType}

type CreateObjectTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pipeline
}

// Status returns HTTPResponse.Status
func (r CreateObjectTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateObjectTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newCreateObjectTypeRequestWithBody generates requests for CreateObjectType with any type of body
func newCreateObjectTypeRequestWithBody(baseURL *url.URL, objectType string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathCreateObjectTypeFormat, pathParam0)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// CreateObjectTypeWithBody request with arbitrary body returning *CreateObjectTypeResponse
func (c *Client) CreateObjectTypeWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateObjectTypeResponse, error) {
	rsp, err := c.doCreateObjectTypeWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateObjectTypeResponse(rsp)
}

func (c *Client) doCreateObjectTypeWithBody(ctx context.Context, objectType string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateObjectTypeRequestWithBody(c.BaseURL, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) CreateObjectType(ctx context.Context, objectType string, body CreateObjectTypeJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateObjectTypeResponse, error) {
	rsp, err := c.doCreateObjectType(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateObjectTypeResponse(rsp)
}

// newCreateObjectTypeRequest calls the generic CreateObjectType builder with application/json body.
func newCreateObjectTypeRequest(baseURL *url.URL, objectType string, body CreateObjectTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateObjectTypeRequestWithBody(baseURL, objectType, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doCreateObjectType(ctx context.Context, objectType string, body CreateObjectTypeJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateObjectTypeRequest(c.BaseURL, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseCreateObjectTypeResponse parses an HTTP response from a CreateObjectType call.
func parseCreateObjectTypeResponse(rsp *http.Response) (*CreateObjectTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &CreateObjectTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ArchivePipeline: DELETE /crm/v3/pipelines/{objectType}/{pipelineId}

type ArchivePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchivePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newArchivePipelineRequest generates requests for ArchivePipeline
func newArchivePipelineRequest(baseURL *url.URL, objectType string, pipelineId string) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathArchivePipelineFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodDelete, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ArchivePipeline request returning *ArchivePipelineResponse
func (c *Client) ArchivePipeline(ctx context.Context, objectType string, pipelineId string, reqEditors ...client.RequestEditorFn) (*ArchivePipelineResponse, error) {
	req, err := newArchivePipelineRequest(c.BaseURL, objectType, pipelineId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &ArchivePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// GetPipeline: GET /crm/v3/pipelines/{objectType}/{pipelineId}

type GetPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r GetPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetPipelineRequest generates requests for GetPipeline
func newGetPipelineRequest(baseURL *url.URL, objectType string, pipelineId string, params *GetPipelineParams) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetPipelineFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetPipeline request returning *GetPipelineResponse
func (c *Client) GetPipeline(ctx context.Context, objectType string, pipelineId string, params *GetPipelineParams, reqEditors ...client.RequestEditorFn) (*GetPipelineResponse, error) {
	req, err := newGetPipelineRequest(c.BaseURL, objectType, pipelineId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// UpdatePipeline: PATCH /crm/v3/pipelines/{objectType}/{pipelineId}

type UpdatePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newUpdatePipelineRequestWithBody generates requests for UpdatePipeline with any type of body
func newUpdatePipelineRequestWithBody(baseURL *url.URL, objectType string, pipelineId string, params *UpdatePipelineParams, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathUpdatePipelineFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodPatch, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// UpdatePipelineWithBody request with arbitrary body returning *UpdatePipelineResponse
func (c *Client) UpdatePipelineWithBody(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.doUpdatePipelineWithBody(ctx, objectType, pipelineId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdatePipelineResponse(rsp)
}

func (c *Client) doUpdatePipelineWithBody(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdatePipelineRequestWithBody(c.BaseURL, objectType, pipelineId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) UpdatePipeline(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, body UpdatePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdatePipelineResponse, error) {
	rsp, err := c.doUpdatePipeline(ctx, objectType, pipelineId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdatePipelineResponse(rsp)
}

// newUpdatePipelineRequest calls the generic UpdatePipeline builder with application/json body.
func newUpdatePipelineRequest(baseURL *url.URL, objectType string, pipelineId string, params *UpdatePipelineParams, body UpdatePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdatePipelineRequestWithBody(baseURL, objectType, pipelineId, params, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doUpdatePipeline(ctx context.Context, objectType string, pipelineId string, params *UpdatePipelineParams, body UpdatePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdatePipelineRequest(c.BaseURL, objectType, pipelineId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseUpdatePipelineResponse parses an HTTP response from a UpdatePipeline call.
func parseUpdatePipelineResponse(rsp *http.Response) (*UpdatePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &UpdatePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ReplacePipeline: PUT /crm/v3/pipelines/{objectType}/{pipelineId}

type ReplacePipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
}

// Status returns HTTPResponse.Status
func (r ReplacePipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacePipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newReplacePipelineRequestWithBody generates requests for ReplacePipeline with any type of body
func newReplacePipelineRequestWithBody(baseURL *url.URL, objectType string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathReplacePipelineFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPut, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// ReplacePipelineWithBody request with arbitrary body returning *ReplacePipelineResponse
func (c *Client) ReplacePipelineWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReplacePipelineResponse, error) {
	rsp, err := c.doReplacePipelineWithBody(ctx, objectType, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseReplacePipelineResponse(rsp)
}

func (c *Client) doReplacePipelineWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReplacePipelineRequestWithBody(c.BaseURL, objectType, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) ReplacePipeline(ctx context.Context, objectType string, pipelineId string, body ReplacePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReplacePipelineResponse, error) {
	rsp, err := c.doReplacePipeline(ctx, objectType, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseReplacePipelineResponse(rsp)
}

// newReplacePipelineRequest calls the generic ReplacePipeline builder with application/json body.
func newReplacePipelineRequest(baseURL *url.URL, objectType string, pipelineId string, body ReplacePipelineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newReplacePipelineRequestWithBody(baseURL, objectType, pipelineId, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doReplacePipeline(ctx context.Context, objectType string, pipelineId string, body ReplacePipelineJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReplacePipelineRequest(c.BaseURL, objectType, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseReplacePipelineResponse parses an HTTP response from a ReplacePipeline call.
func parseReplacePipelineResponse(rsp *http.Response) (*ReplacePipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &ReplacePipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// GetAllStages: GET /crm/v3/pipelines/{objectType}/{pipelineId}/stages

type GetAllStagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponsePipelineStage
}

// Status returns HTTPResponse.Status
func (r GetAllStagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetAllStagesRequest generates requests for GetAllStages
func newGetAllStagesRequest(baseURL *url.URL, objectType string, pipelineId string, params *GetAllStagesParams) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetAllStagesFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetAllStages request returning *GetAllStagesResponse
func (c *Client) GetAllStages(ctx context.Context, objectType string, pipelineId string, params *GetAllStagesParams, reqEditors ...client.RequestEditorFn) (*GetAllStagesResponse, error) {
	req, err := newGetAllStagesRequest(c.BaseURL, objectType, pipelineId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetAllStagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponsePipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// CreateStages: POST /crm/v3/pipelines/{objectType}/{pipelineId}/stages

type CreateStagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r CreateStagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newCreateStagesRequestWithBody generates requests for CreateStages with any type of body
func newCreateStagesRequestWithBody(baseURL *url.URL, objectType string, pipelineId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathCreateStagesFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// CreateStagesWithBody request with arbitrary body returning *CreateStagesResponse
func (c *Client) CreateStagesWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateStagesResponse, error) {
	rsp, err := c.doCreateStagesWithBody(ctx, objectType, pipelineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateStagesResponse(rsp)
}

func (c *Client) doCreateStagesWithBody(ctx context.Context, objectType string, pipelineId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateStagesRequestWithBody(c.BaseURL, objectType, pipelineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) CreateStages(ctx context.Context, objectType string, pipelineId string, body CreateStagesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateStagesResponse, error) {
	rsp, err := c.doCreateStages(ctx, objectType, pipelineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateStagesResponse(rsp)
}

// newCreateStagesRequest calls the generic CreateStages builder with application/json body.
func newCreateStagesRequest(baseURL *url.URL, objectType string, pipelineId string, body CreateStagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateStagesRequestWithBody(baseURL, objectType, pipelineId, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doCreateStages(ctx context.Context, objectType string, pipelineId string, body CreateStagesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateStagesRequest(c.BaseURL, objectType, pipelineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseCreateStagesResponse parses an HTTP response from a CreateStages call.
func parseCreateStagesResponse(rsp *http.Response) (*CreateStagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &CreateStagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ArchiveStage: DELETE /crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}

type ArchiveStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newArchiveStageRequest generates requests for ArchiveStage
func newArchiveStageRequest(baseURL *url.URL, objectType string, pipelineId string, stageId string) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := client.GetPathParam("stageId", stageId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathArchiveStageFormat, pathParam0, pathParam1, pathParam2)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodDelete, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ArchiveStage request returning *ArchiveStageResponse
func (c *Client) ArchiveStage(ctx context.Context, objectType string, pipelineId string, stageId string, reqEditors ...client.RequestEditorFn) (*ArchiveStageResponse, error) {
	req, err := newArchiveStageRequest(c.BaseURL, objectType, pipelineId, stageId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &ArchiveStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// GetStage: GET /crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}

type GetStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r GetStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetStageRequest generates requests for GetStage
func newGetStageRequest(baseURL *url.URL, objectType string, pipelineId string, stageId string, params *GetStageParams) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := client.GetPathParam("stageId", stageId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetStageFormat, pathParam0, pathParam1, pathParam2)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetStage request returning *GetStageResponse
func (c *Client) GetStage(ctx context.Context, objectType string, pipelineId string, stageId string, params *GetStageParams, reqEditors ...client.RequestEditorFn) (*GetStageResponse, error) {
	req, err := newGetStageRequest(c.BaseURL, objectType, pipelineId, stageId, params)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// UpdateStage: PATCH /crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}

type UpdateStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r UpdateStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newUpdateStageRequestWithBody generates requests for UpdateStage with any type of body
func newUpdateStageRequestWithBody(baseURL *url.URL, objectType string, pipelineId string, stageId string, params *UpdateStageParams, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := client.GetPathParam("stageId", stageId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathUpdateStageFormat, pathParam0, pathParam1, pathParam2)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	q := queryURL.Query()

	if params.Archived != nil {
		if err := client.AddQueryParam(q, "archived", *params.Archived); err != nil {
			return nil, err
		}
	}

	queryURL.RawQuery = q.Encode()

	req, err := http.NewRequest(http.MethodPatch, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// UpdateStageWithBody request with arbitrary body returning *UpdateStageResponse
func (c *Client) UpdateStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateStageResponse, error) {
	rsp, err := c.doUpdateStageWithBody(ctx, objectType, pipelineId, stageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdateStageResponse(rsp)
}

func (c *Client) doUpdateStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateStageRequestWithBody(c.BaseURL, objectType, pipelineId, stageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) UpdateStage(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, body UpdateStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateStageResponse, error) {
	rsp, err := c.doUpdateStage(ctx, objectType, pipelineId, stageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdateStageResponse(rsp)
}

// newUpdateStageRequest calls the generic UpdateStage builder with application/json body.
func newUpdateStageRequest(baseURL *url.URL, objectType string, pipelineId string, stageId string, params *UpdateStageParams, body UpdateStageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateStageRequestWithBody(baseURL, objectType, pipelineId, stageId, params, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doUpdateStage(ctx context.Context, objectType string, pipelineId string, stageId string, params *UpdateStageParams, body UpdateStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateStageRequest(c.BaseURL, objectType, pipelineId, stageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseUpdateStageResponse parses an HTTP response from a UpdateStage call.
func parseUpdateStageResponse(rsp *http.Response) (*UpdateStageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &UpdateStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ReplaceStage: PUT /crm/v3/pipelines/{objectType}/{pipelineId}/stages/{stageId}

type ReplaceStageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStage
}

// Status returns HTTPResponse.Status
func (r ReplaceStageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceStageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newReplaceStageRequestWithBody generates requests for ReplaceStage with any type of body
func newReplaceStageRequestWithBody(baseURL *url.URL, objectType string, pipelineId string, stageId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("objectType", objectType)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("pipelineId", pipelineId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := client.GetPathParam("stageId", stageId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathReplaceStageFormat, pathParam0, pathParam1, pathParam2)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPut, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// ReplaceStageWithBody request with arbitrary body returning *ReplaceStageResponse
func (c *Client) ReplaceStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*ReplaceStageResponse, error) {
	rsp, err := c.doReplaceStageWithBody(ctx, objectType, pipelineId, stageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseReplaceStageResponse(rsp)
}

func (c *Client) doReplaceStageWithBody(ctx context.Context, objectType string, pipelineId string, stageId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReplaceStageRequestWithBody(c.BaseURL, objectType, pipelineId, stageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) ReplaceStage(ctx context.Context, objectType string, pipelineId string, stageId string, body ReplaceStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*ReplaceStageResponse, error) {
	rsp, err := c.doReplaceStage(ctx, objectType, pipelineId, stageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseReplaceStageResponse(rsp)
}

// newReplaceStageRequest calls the generic ReplaceStage builder with application/json body.
func newReplaceStageRequest(baseURL *url.URL, objectType string, pipelineId string, stageId string, body ReplaceStageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newReplaceStageRequestWithBody(baseURL, objectType, pipelineId, stageId, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doReplaceStage(ctx context.Context, objectType string, pipelineId string, stageId string, body ReplaceStageJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newReplaceStageRequest(c.BaseURL, objectType, pipelineId, stageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseReplaceStageResponse parses an HTTP response from a ReplaceStage call.
func parseReplaceStageResponse(rsp *http.Response) (*ReplaceStageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &ReplaceStageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
