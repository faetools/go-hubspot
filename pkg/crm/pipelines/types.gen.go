// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package pipelines

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// CollectionResponsePipeline defines model for CollectionResponsePipeline.
type CollectionResponsePipeline struct {
	Paging  *Paging    `json:"paging,omitempty"`
	Results []Pipeline `json:"results"`
}

// CollectionResponsePipelineStage defines model for CollectionResponsePipelineStage.
type CollectionResponsePipelineStage struct {
	Paging  *Paging         `json:"paging,omitempty"`
	Results []PipelineStage `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage `json:"next,omitempty"`
}

// A pipeline definition.
type Pipeline struct {
	// Whether the pipeline is archived.
	Archived bool `json:"archived"`

	// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// The date the pipeline was created. The default pipelines will have createdAt = 0.
	CreatedAt time.Time `json:"createdAt"`

	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline.
	Id string `json:"id"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label string `json:"label"`

	// The stages associated with the pipeline. They can be retrieved and updated via the pipeline stages endpoints.
	Stages []PipelineStage `json:"stages"`

	// The date the pipeline was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// An input used to create or replace a pipeline's definition.
type PipelineInput struct {
	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label string `json:"label"`

	// Pipeline stage inputs used to create the new or replacement pipeline.
	Stages []PipelineStageInput `json:"stages"`
}

// An input used to update some properties on a pipeline definition.
type PipelinePatchInput struct {
	// Whether the pipeline is archived. This property should only be provided when restoring an archived pipeline. If it's provided in any other call, the request will fail and a `400 Bad Request` will be returned.
	Archived *bool `json:"archived,omitempty"`

	// The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A unique label used to organize pipelines in HubSpot's UI
	Label *string `json:"label,omitempty"`
}

// A pipeline stage definition.
type PipelineStage struct {
	// Whether the pipeline is archived.
	Archived bool `json:"archived"`

	// The date the pipeline was archived. `archivedAt` will only be present if the pipeline is archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// The date the pipeline stage was created. The stages on default pipelines will have createdAt = 0.
	CreatedAt time.Time `json:"createdAt"`

	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A unique identifier generated by HubSpot that can be used to retrieve and update the pipeline stage.
	Id string `json:"id"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label string `json:"label"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStage_Metadata `json:"metadata"`

	// The date the pipeline stage was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStage_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// An input used to create or replace a pipeline stage's definition.
type PipelineStageInput struct {
	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder int32 `json:"displayOrder"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label string `json:"label"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStageInput_Metadata `json:"metadata"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStageInput_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// An input used to update some properties on a pipeline definition.
type PipelineStagePatchInput struct {
	// Whether the pipeline is archived.
	Archived *bool `json:"archived,omitempty"`

	// The order for displaying this pipeline stage. If two pipeline stages have a matching `displayOrder`, they will be sorted alphabetically by label.
	DisplayOrder *int32 `json:"displayOrder,omitempty"`

	// A label used to organize pipeline stages in HubSpot's UI. Each pipeline stage's label must be unique within that pipeline.
	Label *string `json:"label,omitempty"`

	// A JSON object containing properties that are not present on all object pipelines.
	//
	// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
	//
	// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
	Metadata PipelineStagePatchInput_Metadata `json:"metadata"`
}

// A JSON object containing properties that are not present on all object pipelines.
//
// For `deals` pipelines, the `probability` field is required (`{ "probability": 0.5 }`), and represents the likelihood a deal will close. Possible values are between 0.0 and 1.0 in increments of 0.1.
//
// For `tickets` pipelines, the `ticketState` field is optional (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or has been closed by a member of your Support team. Possible values are `OPEN` or `CLOSED`.
type PipelineStagePatchInput_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// GetAllObjectTypeParams defines parameters for GetAllObjectType.
type GetAllObjectTypeParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// CreateObjectTypeJSONBody defines parameters for CreateObjectType.
type CreateObjectTypeJSONBody PipelineInput

// GetByIdPipelineParams defines parameters for GetByIdPipeline.
type GetByIdPipelineParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// UpdatePipelineJSONBody defines parameters for UpdatePipeline.
type UpdatePipelineJSONBody PipelinePatchInput

// UpdatePipelineParams defines parameters for UpdatePipeline.
type UpdatePipelineParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// ReplacePipelineJSONBody defines parameters for ReplacePipeline.
type ReplacePipelineJSONBody PipelineInput

// GetAllStagesParams defines parameters for GetAllStages.
type GetAllStagesParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// CreateStagesJSONBody defines parameters for CreateStages.
type CreateStagesJSONBody PipelineStageInput

// GetByIdStageParams defines parameters for GetByIdStage.
type GetByIdStageParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// UpdateStageJSONBody defines parameters for UpdateStage.
type UpdateStageJSONBody PipelineStagePatchInput

// UpdateStageParams defines parameters for UpdateStage.
type UpdateStageParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// ReplaceStageJSONBody defines parameters for ReplaceStage.
type ReplaceStageJSONBody PipelineStageInput

// CreateObjectTypeJSONRequestBody defines body for CreateObjectType for application/json ContentType.
type CreateObjectTypeJSONRequestBody CreateObjectTypeJSONBody

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody UpdatePipelineJSONBody

// ReplacePipelineJSONRequestBody defines body for ReplacePipeline for application/json ContentType.
type ReplacePipelineJSONRequestBody ReplacePipelineJSONBody

// CreateStagesJSONRequestBody defines body for CreateStages for application/json ContentType.
type CreateStagesJSONRequestBody CreateStagesJSONBody

// UpdateStageJSONRequestBody defines body for UpdateStage for application/json ContentType.
type UpdateStageJSONRequestBody UpdateStageJSONBody

// ReplaceStageJSONRequestBody defines body for ReplaceStage for application/json ContentType.
type ReplaceStageJSONRequestBody ReplaceStageJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStage_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStage_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStage_Metadata
func (a *PipelineStage_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStage_Metadata to handle AdditionalProperties
func (a *PipelineStage_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStage_Metadata to handle AdditionalProperties
func (a PipelineStage_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStageInput_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStageInput_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStageInput_Metadata
func (a *PipelineStageInput_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStageInput_Metadata to handle AdditionalProperties
func (a *PipelineStageInput_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStageInput_Metadata to handle AdditionalProperties
func (a PipelineStageInput_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStagePatchInput_Metadata. Returns the specified
// element and whether it was found
func (a PipelineStagePatchInput_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStagePatchInput_Metadata
func (a *PipelineStagePatchInput_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStagePatchInput_Metadata to handle AdditionalProperties
func (a *PipelineStagePatchInput_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStagePatchInput_Metadata to handle AdditionalProperties
func (a PipelineStagePatchInput_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
