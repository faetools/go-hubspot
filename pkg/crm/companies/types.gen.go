// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package companies

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2Scopes        = "oauth2.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseSimplePublicObjectStatus.
const (
	BatchResponseSimplePublicObjectStatusCANCELED BatchResponseSimplePublicObjectStatus = "CANCELED"

	BatchResponseSimplePublicObjectStatusCOMPLETE BatchResponseSimplePublicObjectStatus = "COMPLETE"

	BatchResponseSimplePublicObjectStatusPENDING BatchResponseSimplePublicObjectStatus = "PENDING"

	BatchResponseSimplePublicObjectStatusPROCESSING BatchResponseSimplePublicObjectStatus = "PROCESSING"
)

// Defines values for BatchResponseSimplePublicObjectWithErrorsStatus.
const (
	BatchResponseSimplePublicObjectWithErrorsStatusCANCELED BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"

	BatchResponseSimplePublicObjectWithErrorsStatusCOMPLETE BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"

	BatchResponseSimplePublicObjectWithErrorsStatusPENDING BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"

	BatchResponseSimplePublicObjectWithErrorsStatusPROCESSING BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for FilterOperator.
const (
	FilterOperatorBETWEEN FilterOperator = "BETWEEN"

	FilterOperatorCONTAINSTOKEN FilterOperator = "CONTAINS_TOKEN"

	FilterOperatorEQ FilterOperator = "EQ"

	FilterOperatorGT FilterOperator = "GT"

	FilterOperatorGTE FilterOperator = "GTE"

	FilterOperatorHASPROPERTY FilterOperator = "HAS_PROPERTY"

	FilterOperatorIN FilterOperator = "IN"

	FilterOperatorLT FilterOperator = "LT"

	FilterOperatorLTE FilterOperator = "LTE"

	FilterOperatorNEQ FilterOperator = "NEQ"

	FilterOperatorNOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"

	FilterOperatorNOTHASPROPERTY FilterOperator = "NOT_HAS_PROPERTY"

	FilterOperatorNOTIN FilterOperator = "NOT_IN"
)

// AssociatedId defines model for AssociatedId.
type AssociatedId struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// BatchInputSimplePublicObjectBatchInput defines model for BatchInputSimplePublicObjectBatchInput.
type BatchInputSimplePublicObjectBatchInput struct {
	Inputs []SimplePublicObjectBatchInput `json:"inputs"`
}

// BatchInputSimplePublicObjectId defines model for BatchInputSimplePublicObjectId.
type BatchInputSimplePublicObjectId struct {
	Inputs []SimplePublicObjectId `json:"inputs"`
}

// BatchInputSimplePublicObjectInput defines model for BatchInputSimplePublicObjectInput.
type BatchInputSimplePublicObjectInput struct {
	Inputs []SimplePublicObjectInput `json:"inputs"`
}

// BatchReadInputSimplePublicObjectId defines model for BatchReadInputSimplePublicObjectId.
type BatchReadInputSimplePublicObjectId struct {
	IdProperty *string                `json:"idProperty,omitempty"`
	Inputs     []SimplePublicObjectId `json:"inputs"`
	Properties []string               `json:"properties"`
}

// BatchResponseSimplePublicObject defines model for BatchResponseSimplePublicObject.
type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time                              `json:"completedAt"`
	Links       *BatchResponseSimplePublicObject_Links `json:"links,omitempty"`
	RequestedAt *time.Time                             `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                   `json:"results"`
	StartedAt   time.Time                              `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectStatus  `json:"status"`
}

// BatchResponseSimplePublicObject_Links defines model for BatchResponseSimplePublicObject.Links.
type BatchResponseSimplePublicObject_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectStatus defines model for BatchResponseSimplePublicObject.Status.
type BatchResponseSimplePublicObjectStatus string

// BatchResponseSimplePublicObjectWithErrors defines model for BatchResponseSimplePublicObjectWithErrors.
type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                        `json:"completedAt"`
	Errors      *[]StandardError                                 `json:"errors,omitempty"`
	Links       *BatchResponseSimplePublicObjectWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                           `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                       `json:"requestedAt,omitempty"`
	Results     []SimplePublicObject                             `json:"results"`
	StartedAt   time.Time                                        `json:"startedAt"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus  `json:"status"`
}

// BatchResponseSimplePublicObjectWithErrors_Links defines model for BatchResponseSimplePublicObjectWithErrors.Links.
type BatchResponseSimplePublicObjectWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSimplePublicObjectWithErrorsStatus defines model for BatchResponseSimplePublicObjectWithErrors.Status.
type BatchResponseSimplePublicObjectWithErrorsStatus string

// CollectionResponseAssociatedId defines model for CollectionResponseAssociatedId.
type CollectionResponseAssociatedId struct {
	Paging  *Paging        `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseAssociatedIdForwardPaging defines model for CollectionResponseAssociatedIdForwardPaging.
type CollectionResponseAssociatedIdForwardPaging struct {
	Paging  *ForwardPaging `json:"paging,omitempty"`
	Results []AssociatedId `json:"results"`
}

// CollectionResponseSimplePublicObjectWithAssociationsForwardPaging defines model for CollectionResponseSimplePublicObjectWithAssociationsForwardPaging.
type CollectionResponseSimplePublicObjectWithAssociationsForwardPaging struct {
	Paging  *ForwardPaging                       `json:"paging,omitempty"`
	Results []SimplePublicObjectWithAssociations `json:"results"`
}

// CollectionResponseWithTotalSimplePublicObjectForwardPaging defines model for CollectionResponseWithTotalSimplePublicObjectForwardPaging.
type CollectionResponseWithTotalSimplePublicObjectForwardPaging struct {
	Paging  *ForwardPaging       `json:"paging,omitempty"`
	Results []SimplePublicObject `json:"results"`
	Total   int32                `json:"total"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Filter defines model for Filter.
type Filter struct {
	// null
	Operator     FilterOperator `json:"operator"`
	PropertyName string         `json:"propertyName"`
	Value        *string        `json:"value,omitempty"`
}

// null
type FilterOperator string

// FilterGroup defines model for FilterGroup.
type FilterGroup struct {
	Filters []Filter `json:"filters"`
}

// ForwardPaging defines model for ForwardPaging.
type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage     `json:"next,omitempty"`
	Prev *PreviousPage `json:"prev,omitempty"`
}

// PreviousPage defines model for PreviousPage.
type PreviousPage struct {
	Before string  `json:"before"`
	Link   *string `json:"link,omitempty"`
}

// PublicObjectSearchRequest defines model for PublicObjectSearchRequest.
type PublicObjectSearchRequest struct {
	After        int32         `json:"after"`
	FilterGroups []FilterGroup `json:"filterGroups"`
	Limit        int32         `json:"limit"`
	Properties   []string      `json:"properties"`
	Query        *string       `json:"query,omitempty"`
	Sorts        []string      `json:"sorts"`
}

// SimplePublicObject defines model for SimplePublicObject.
type SimplePublicObject struct {
	Archived   *bool                         `json:"archived,omitempty"`
	ArchivedAt *time.Time                    `json:"archivedAt,omitempty"`
	CreatedAt  time.Time                     `json:"createdAt"`
	Id         string                        `json:"id"`
	Properties SimplePublicObject_Properties `json:"properties"`
	UpdatedAt  time.Time                     `json:"updatedAt"`
}

// SimplePublicObject_Properties defines model for SimplePublicObject.Properties.
type SimplePublicObject_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectBatchInput defines model for SimplePublicObjectBatchInput.
type SimplePublicObjectBatchInput struct {
	Id         string                                  `json:"id"`
	Properties SimplePublicObjectBatchInput_Properties `json:"properties"`
}

// SimplePublicObjectBatchInput_Properties defines model for SimplePublicObjectBatchInput.Properties.
type SimplePublicObjectBatchInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectId defines model for SimplePublicObjectId.
type SimplePublicObjectId struct {
	Id string `json:"id"`
}

// SimplePublicObjectInput defines model for SimplePublicObjectInput.
type SimplePublicObjectInput struct {
	Properties SimplePublicObjectInput_Properties `json:"properties"`
}

// SimplePublicObjectInput_Properties defines model for SimplePublicObjectInput.Properties.
type SimplePublicObjectInput_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SimplePublicObjectWithAssociations defines model for SimplePublicObjectWithAssociations.
type SimplePublicObjectWithAssociations struct {
	Archived     *bool                                            `json:"archived,omitempty"`
	ArchivedAt   *time.Time                                       `json:"archivedAt,omitempty"`
	Associations *SimplePublicObjectWithAssociations_Associations `json:"associations,omitempty"`
	CreatedAt    time.Time                                        `json:"createdAt"`
	Id           string                                           `json:"id"`
	Properties   SimplePublicObjectWithAssociations_Properties    `json:"properties"`
	UpdatedAt    time.Time                                        `json:"updatedAt"`
}

// SimplePublicObjectWithAssociations_Associations defines model for SimplePublicObjectWithAssociations.Associations.
type SimplePublicObjectWithAssociations_Associations struct {
	AdditionalProperties map[string]CollectionResponseAssociatedId `json:"-"`
}

// SimplePublicObjectWithAssociations_Properties defines model for SimplePublicObjectWithAssociations.Properties.
type SimplePublicObjectWithAssociations_Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// GetPageCompaniesParams defines parameters for GetPageCompanies.
type GetPageCompaniesParams struct {
	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// CreateCompaniesJSONBody defines parameters for CreateCompanies.
type CreateCompaniesJSONBody SimplePublicObjectInput

// ArchiveBatchJSONBody defines parameters for ArchiveBatch.
type ArchiveBatchJSONBody BatchInputSimplePublicObjectId

// CreateBatchJSONBody defines parameters for CreateBatch.
type CreateBatchJSONBody BatchInputSimplePublicObjectInput

// ReadBatchJSONBody defines parameters for ReadBatch.
type ReadBatchJSONBody BatchReadInputSimplePublicObjectId

// ReadBatchParams defines parameters for ReadBatch.
type ReadBatchParams struct {
	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`
}

// UpdateBatchJSONBody defines parameters for UpdateBatch.
type UpdateBatchJSONBody BatchInputSimplePublicObjectBatchInput

// DoSearchJSONBody defines parameters for DoSearch.
type DoSearchJSONBody PublicObjectSearchRequest

// GetByIdCompanyParams defines parameters for GetByIdCompany.
type GetByIdCompanyParams struct {
	// A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.
	Properties *[]string `json:"properties,omitempty"`

	// A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.
	Associations *[]string `json:"associations,omitempty"`

	// Whether to return only results that have been archived.
	Archived *bool `json:"archived,omitempty"`

	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// UpdateCompanyJSONBody defines parameters for UpdateCompany.
type UpdateCompanyJSONBody SimplePublicObjectInput

// UpdateCompanyParams defines parameters for UpdateCompany.
type UpdateCompanyParams struct {
	// The name of a property whose values are unique for this object type
	IdProperty *string `json:"idProperty,omitempty"`
}

// GetAllToObjectTypeParams defines parameters for GetAllToObjectType.
type GetAllToObjectTypeParams struct {
	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// The maximum number of results to display per page.
	Limit *int32 `json:"limit,omitempty"`
}

// CreateCompaniesJSONRequestBody defines body for CreateCompanies for application/json ContentType.
type CreateCompaniesJSONRequestBody CreateCompaniesJSONBody

// ArchiveBatchJSONRequestBody defines body for ArchiveBatch for application/json ContentType.
type ArchiveBatchJSONRequestBody ArchiveBatchJSONBody

// CreateBatchJSONRequestBody defines body for CreateBatch for application/json ContentType.
type CreateBatchJSONRequestBody CreateBatchJSONBody

// ReadBatchJSONRequestBody defines body for ReadBatch for application/json ContentType.
type ReadBatchJSONRequestBody ReadBatchJSONBody

// UpdateBatchJSONRequestBody defines body for UpdateBatch for application/json ContentType.
type UpdateBatchJSONRequestBody UpdateBatchJSONBody

// DoSearchJSONRequestBody defines body for DoSearch for application/json ContentType.
type DoSearchJSONRequestBody DoSearchJSONBody

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody UpdateCompanyJSONBody

// Getter for additional properties for BatchResponseSimplePublicObject_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObject_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObject_Links
func (a *BatchResponseSimplePublicObject_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObject_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObject_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObject_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSimplePublicObjectWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSimplePublicObjectWithErrors_Links
func (a *BatchResponseSimplePublicObjectWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSimplePublicObjectWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSimplePublicObjectWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSimplePublicObjectWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObject_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObject_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObject_Properties
func (a *SimplePublicObject_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a *SimplePublicObject_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObject_Properties to handle AdditionalProperties
func (a SimplePublicObject_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectBatchInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectBatchInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectBatchInput_Properties
func (a *SimplePublicObjectBatchInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectBatchInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectBatchInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectBatchInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectInput_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectInput_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectInput_Properties
func (a *SimplePublicObjectInput_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a *SimplePublicObjectInput_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectInput_Properties to handle AdditionalProperties
func (a SimplePublicObjectInput_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Associations. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Associations) Get(fieldName string) (value CollectionResponseAssociatedId, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Associations
func (a *SimplePublicObjectWithAssociations_Associations) Set(fieldName string, value CollectionResponseAssociatedId) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Associations) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CollectionResponseAssociatedId)
		for fieldName, fieldBuf := range object {
			var fieldVal CollectionResponseAssociatedId
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Associations to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Associations) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SimplePublicObjectWithAssociations_Properties. Returns the specified
// element and whether it was found
func (a SimplePublicObjectWithAssociations_Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SimplePublicObjectWithAssociations_Properties
func (a *SimplePublicObjectWithAssociations_Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a *SimplePublicObjectWithAssociations_Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SimplePublicObjectWithAssociations_Properties to handle AdditionalProperties
func (a SimplePublicObjectWithAssociations_Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
