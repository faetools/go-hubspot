// Package timeline provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package timeline

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/faetools/client"
)

func (c *Client) doCreateEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateEventsRequestWithBody(c.baseURL, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateEvents(ctx context.Context, body CreateEventsJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateEventsRequest(c.baseURL, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateBatchRequestWithBody(c.baseURL, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateBatch(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateBatchRequest(c.baseURL, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetEvent(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetEventRequest(c.baseURL, eventTemplateId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetDetailById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetDetailByIdRequest(c.baseURL, eventTemplateId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetRenderById(ctx context.Context, eventTemplateId string, eventId string, params *GetRenderByIdParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetRenderByIdRequest(c.baseURL, eventTemplateId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetAllEventTemplates(ctx context.Context, appId int32, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetAllEventTemplatesRequest(c.baseURL, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateEventTemplatesWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateEventTemplatesRequestWithBody(c.baseURL, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateEventTemplates(ctx context.Context, appId int32, body CreateEventTemplatesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateEventTemplatesRequest(c.baseURL, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doArchiveEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newArchiveEventTemplateRequest(c.baseURL, appId, eventTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetEventTemplateRequest(c.baseURL, appId, eventTemplateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doUpdateEventTemplateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateEventTemplateRequestWithBody(c.baseURL, appId, eventTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doUpdateEventTemplate(ctx context.Context, appId int32, eventTemplateId string, body UpdateEventTemplateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateEventTemplateRequest(c.baseURL, appId, eventTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateTokensWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateTokensRequestWithBody(c.baseURL, appId, eventTemplateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateTokens(ctx context.Context, appId int32, eventTemplateId string, body CreateTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateTokensRequest(c.baseURL, appId, eventTemplateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doArchiveTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newArchiveTokenNameRequest(c.baseURL, appId, eventTemplateId, tokenName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doUpdateTokenNameWithBody(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateTokenNameRequestWithBody(c.baseURL, appId, eventTemplateId, tokenName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doUpdateTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body UpdateTokenNameJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateTokenNameRequest(c.baseURL, appId, eventTemplateId, tokenName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

// newCreateEventsRequest calls the generic CreateEvents builder with application/json body.
func newCreateEventsRequest(baseURL *url.URL, body CreateEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateEventsRequestWithBody(baseURL, "application/json", bodyReader)
}

var opPathCreateEvents = client.MustParseURL("./crm/v3/timeline/events")

// newCreateEventsRequestWithBody generates requests for CreateEvents with any type of body
func newCreateEventsRequestWithBody(baseURL *url.URL, contentType string, body io.Reader) (*http.Request, error) {
	queryURL := baseURL.ResolveReference(opPathCreateEvents)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newCreateBatchRequest calls the generic CreateBatch builder with application/json body.
func newCreateBatchRequest(baseURL *url.URL, body CreateBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateBatchRequestWithBody(baseURL, "application/json", bodyReader)
}

var opPathCreateBatch = client.MustParseURL("./crm/v3/timeline/events/batch/create")

// newCreateBatchRequestWithBody generates requests for CreateBatch with any type of body
func newCreateBatchRequestWithBody(baseURL *url.URL, contentType string, body io.Reader) (*http.Request, error) {
	queryURL := baseURL.ResolveReference(opPathCreateBatch)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newGetEventRequest generates requests for GetEvent
func newGetEventRequest(baseURL *url.URL, eventTemplateId string, eventId string) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetDetailByIdRequest generates requests for GetDetailById
func newGetDetailByIdRequest(baseURL *url.URL, eventTemplateId string, eventId string) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s/detail", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetRenderByIdRequest generates requests for GetRenderById
func newGetRenderByIdRequest(baseURL *url.URL, eventTemplateId string, eventId string, params *GetRenderByIdParams) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/events/%s/%s/render", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Detail != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetAllEventTemplatesRequest generates requests for GetAllEventTemplates
func newGetAllEventTemplatesRequest(baseURL *url.URL, appId int32) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates", pathParam0)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateEventTemplatesRequest calls the generic CreateEventTemplates builder with application/json body.
func newCreateEventTemplatesRequest(baseURL *url.URL, appId int32, body CreateEventTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateEventTemplatesRequestWithBody(baseURL, appId, "application/json", bodyReader)
}

// newCreateEventTemplatesRequestWithBody generates requests for CreateEventTemplates with any type of body
func newCreateEventTemplatesRequestWithBody(baseURL *url.URL, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates", pathParam0)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newArchiveEventTemplateRequest generates requests for ArchiveEventTemplate
func newArchiveEventTemplateRequest(baseURL *url.URL, appId int32, eventTemplateId string) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetEventTemplateRequest generates requests for GetEventTemplate
func newGetEventTemplateRequest(baseURL *url.URL, appId int32, eventTemplateId string) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newUpdateEventTemplateRequest calls the generic UpdateEventTemplate builder with application/json body.
func newUpdateEventTemplateRequest(baseURL *url.URL, appId int32, eventTemplateId string, body UpdateEventTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateEventTemplateRequestWithBody(baseURL, appId, eventTemplateId, "application/json", bodyReader)
}

// newUpdateEventTemplateRequestWithBody generates requests for UpdateEventTemplate with any type of body
func newUpdateEventTemplateRequestWithBody(baseURL *url.URL, appId int32, eventTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newCreateTokensRequest calls the generic CreateTokens builder with application/json body.
func newCreateTokensRequest(baseURL *url.URL, appId int32, eventTemplateId string, body CreateTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateTokensRequestWithBody(baseURL, appId, eventTemplateId, "application/json", bodyReader)
}

// newCreateTokensRequestWithBody generates requests for CreateTokens with any type of body
func newCreateTokensRequestWithBody(baseURL *url.URL, appId int32, eventTemplateId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens", pathParam0, pathParam1)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newArchiveTokenNameRequest generates requests for ArchiveTokenName
func newArchiveTokenNameRequest(baseURL *url.URL, appId int32, eventTemplateId string, tokenName string) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := runtime.StyleParamWithLocation("simple", false, "tokenName", runtime.ParamLocationPath, tokenName)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens/%s", pathParam0, pathParam1, pathParam2)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newUpdateTokenNameRequest calls the generic UpdateTokenName builder with application/json body.
func newUpdateTokenNameRequest(baseURL *url.URL, appId int32, eventTemplateId string, tokenName string, body UpdateTokenNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateTokenNameRequestWithBody(baseURL, appId, eventTemplateId, tokenName, "application/json", bodyReader)
}

// newUpdateTokenNameRequestWithBody generates requests for UpdateTokenName with any type of body
func newUpdateTokenNameRequestWithBody(baseURL *url.URL, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := runtime.StyleParamWithLocation("simple", false, "eventTemplateId", runtime.ParamLocationPath, eventTemplateId)
	if err != nil {
		return nil, err
	}

	pathParam2, err := runtime.StyleParamWithLocation("simple", false, "tokenName", runtime.ParamLocationPath, tokenName)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf("/crm/v3/timeline/%s/event-templates/%s/tokens/%s", pathParam0, pathParam1, pathParam2)
	if opPath[0] == '/' {
		opPath = "." + opPath
	}

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.requestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	baseURL *url.URL

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client client.HTTPRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	requestEditors []client.RequestEditorFn
}

// SetClient sets the underlying client.
func (c *Client) SetClient(doer client.HTTPRequestDoer) {
	c.client = doer
}

// AddRequestEditor adds a request editor to the client.
func (c *Client) AddRequestEditor(fn client.RequestEditorFn) {
	c.requestEditors = append(c.requestEditors, fn)
}

// SetBaseURL overrides the baseURL.
func (c *Client) SetBaseURL(baseURL *url.URL) {
	c.baseURL = baseURL
}

// NewClient creates a new Client, with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	// create a client
	c := Client{}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&c); err != nil {
			return nil, err
		}
	}

	// add default server
	if c.baseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(&c); err != nil {
			return nil, err
		}
	}

	// create httpClient, if not already present
	if c.client == nil {
		c.client = &http.Client{}
	}

	return &c, nil
}

// ClientInterface interface specification for the client.
type ClientInterface interface {
	client.Client
	// CreateEvents request with any body
	CreateEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateEventsResponse, error)
	CreateEvents(ctx context.Context, body CreateEventsJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateEventsResponse, error)

	// CreateBatch request with any body
	CreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error)
	CreateBatch(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error)

	// GetEvent request
	GetEvent(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*GetEventResponse, error)

	// GetDetailById request
	GetDetailById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*GetDetailByIdResponse, error)

	// GetRenderById request
	GetRenderById(ctx context.Context, eventTemplateId string, eventId string, params *GetRenderByIdParams, reqEditors ...client.RequestEditorFn) (*GetRenderByIdResponse, error)

	// GetAllEventTemplates request
	GetAllEventTemplates(ctx context.Context, appId int32, reqEditors ...client.RequestEditorFn) (*GetAllEventTemplatesResponse, error)

	// CreateEventTemplates request with any body
	CreateEventTemplatesWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateEventTemplatesResponse, error)
	CreateEventTemplates(ctx context.Context, appId int32, body CreateEventTemplatesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateEventTemplatesResponse, error)

	// ArchiveEventTemplate request
	ArchiveEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*ArchiveEventTemplateResponse, error)

	// GetEventTemplate request
	GetEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*GetEventTemplateResponse, error)

	// UpdateEventTemplate request with any body
	UpdateEventTemplateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateEventTemplateResponse, error)
	UpdateEventTemplate(ctx context.Context, appId int32, eventTemplateId string, body UpdateEventTemplateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateEventTemplateResponse, error)

	// CreateTokens request with any body
	CreateTokensWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateTokensResponse, error)
	CreateTokens(ctx context.Context, appId int32, eventTemplateId string, body CreateTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateTokensResponse, error)

	// ArchiveTokenName request
	ArchiveTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...client.RequestEditorFn) (*ArchiveTokenNameResponse, error)

	// UpdateTokenName request with any body
	UpdateTokenNameWithBody(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateTokenNameResponse, error)
	UpdateTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body UpdateTokenNameJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateTokenNameResponse, error)
}

type CreateEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimelineEventResponse
}

// Status returns HTTPResponse.Status
func (r CreateEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchResponseTimelineEventResponse
	JSON207      *BatchResponseTimelineEventResponseWithErrors
}

// Status returns HTTPResponse.Status
func (r CreateBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventResponse
}

// Status returns HTTPResponse.Status
func (r GetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventDetail
}

// Status returns HTTPResponse.Status
func (r GetDetailByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRenderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRenderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRenderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEventTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseTimelineEventTemplateNoPaging
}

// Status returns HTTPResponse.Status
func (r GetAllEventTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEventTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEventTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r CreateEventTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEventTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveEventTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveEventTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveEventTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r GetEventTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEventTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplate
}

// Status returns HTTPResponse.Status
func (r UpdateEventTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEventTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplateToken
}

// Status returns HTTPResponse.Status
func (r CreateTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveTokenNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveTokenNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveTokenNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTokenNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineEventTemplateToken
}

// Status returns HTTPResponse.Status
func (r UpdateTokenNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTokenNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateEventsWithBody request with arbitrary body returning *CreateEventsResponse
func (c *Client) CreateEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateEventsResponse, error) {
	rsp, err := c.doCreateEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateEventsResponse(rsp)
}

func (c *Client) CreateEvents(ctx context.Context, body CreateEventsJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateEventsResponse, error) {
	rsp, err := c.doCreateEvents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateEventsResponse(rsp)
}

// CreateBatchWithBody request with arbitrary body returning *CreateBatchResponse
func (c *Client) CreateBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.doCreateBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateBatchResponse(rsp)
}

func (c *Client) CreateBatch(ctx context.Context, body CreateBatchJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateBatchResponse, error) {
	rsp, err := c.doCreateBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateBatchResponse(rsp)
}

// GetEvent request returning *GetEventResponse
func (c *Client) GetEvent(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*GetEventResponse, error) {
	rsp, err := c.doGetEvent(ctx, eventTemplateId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetEventResponse(rsp)
}

// GetDetailById request returning *GetDetailByIdResponse
func (c *Client) GetDetailById(ctx context.Context, eventTemplateId string, eventId string, reqEditors ...client.RequestEditorFn) (*GetDetailByIdResponse, error) {
	rsp, err := c.doGetDetailById(ctx, eventTemplateId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetDetailByIdResponse(rsp)
}

// GetRenderById request returning *GetRenderByIdResponse
func (c *Client) GetRenderById(ctx context.Context, eventTemplateId string, eventId string, params *GetRenderByIdParams, reqEditors ...client.RequestEditorFn) (*GetRenderByIdResponse, error) {
	rsp, err := c.doGetRenderById(ctx, eventTemplateId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetRenderByIdResponse(rsp)
}

// GetAllEventTemplates request returning *GetAllEventTemplatesResponse
func (c *Client) GetAllEventTemplates(ctx context.Context, appId int32, reqEditors ...client.RequestEditorFn) (*GetAllEventTemplatesResponse, error) {
	rsp, err := c.doGetAllEventTemplates(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetAllEventTemplatesResponse(rsp)
}

// CreateEventTemplatesWithBody request with arbitrary body returning *CreateEventTemplatesResponse
func (c *Client) CreateEventTemplatesWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateEventTemplatesResponse, error) {
	rsp, err := c.doCreateEventTemplatesWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateEventTemplatesResponse(rsp)
}

func (c *Client) CreateEventTemplates(ctx context.Context, appId int32, body CreateEventTemplatesJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateEventTemplatesResponse, error) {
	rsp, err := c.doCreateEventTemplates(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateEventTemplatesResponse(rsp)
}

// ArchiveEventTemplate request returning *ArchiveEventTemplateResponse
func (c *Client) ArchiveEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*ArchiveEventTemplateResponse, error) {
	rsp, err := c.doArchiveEventTemplate(ctx, appId, eventTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseArchiveEventTemplateResponse(rsp)
}

// GetEventTemplate request returning *GetEventTemplateResponse
func (c *Client) GetEventTemplate(ctx context.Context, appId int32, eventTemplateId string, reqEditors ...client.RequestEditorFn) (*GetEventTemplateResponse, error) {
	rsp, err := c.doGetEventTemplate(ctx, appId, eventTemplateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetEventTemplateResponse(rsp)
}

// UpdateEventTemplateWithBody request with arbitrary body returning *UpdateEventTemplateResponse
func (c *Client) UpdateEventTemplateWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateEventTemplateResponse, error) {
	rsp, err := c.doUpdateEventTemplateWithBody(ctx, appId, eventTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateEventTemplateResponse(rsp)
}

func (c *Client) UpdateEventTemplate(ctx context.Context, appId int32, eventTemplateId string, body UpdateEventTemplateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateEventTemplateResponse, error) {
	rsp, err := c.doUpdateEventTemplate(ctx, appId, eventTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateEventTemplateResponse(rsp)
}

// CreateTokensWithBody request with arbitrary body returning *CreateTokensResponse
func (c *Client) CreateTokensWithBody(ctx context.Context, appId int32, eventTemplateId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateTokensResponse, error) {
	rsp, err := c.doCreateTokensWithBody(ctx, appId, eventTemplateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateTokensResponse(rsp)
}

func (c *Client) CreateTokens(ctx context.Context, appId int32, eventTemplateId string, body CreateTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateTokensResponse, error) {
	rsp, err := c.doCreateTokens(ctx, appId, eventTemplateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateTokensResponse(rsp)
}

// ArchiveTokenName request returning *ArchiveTokenNameResponse
func (c *Client) ArchiveTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, reqEditors ...client.RequestEditorFn) (*ArchiveTokenNameResponse, error) {
	rsp, err := c.doArchiveTokenName(ctx, appId, eventTemplateId, tokenName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseArchiveTokenNameResponse(rsp)
}

// UpdateTokenNameWithBody request with arbitrary body returning *UpdateTokenNameResponse
func (c *Client) UpdateTokenNameWithBody(ctx context.Context, appId int32, eventTemplateId string, tokenName string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateTokenNameResponse, error) {
	rsp, err := c.doUpdateTokenNameWithBody(ctx, appId, eventTemplateId, tokenName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateTokenNameResponse(rsp)
}

func (c *Client) UpdateTokenName(ctx context.Context, appId int32, eventTemplateId string, tokenName string, body UpdateTokenNameJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateTokenNameResponse, error) {
	rsp, err := c.doUpdateTokenName(ctx, appId, eventTemplateId, tokenName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseUpdateTokenNameResponse(rsp)
}

// parseCreateEventsResponse parses an HTTP response from a CreateEvents call.
func parseCreateEventsResponse(rsp *http.Response) (*CreateEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// parseCreateBatchResponse parses an HTTP response from a CreateBatch call.
func parseCreateBatchResponse(rsp *http.Response) (*CreateBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchResponseTimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseTimelineEventResponseWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// parseGetEventResponse parses an HTTP response from a GetEvent call.
func parseGetEventResponse(rsp *http.Response) (*GetEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseGetDetailByIdResponse parses an HTTP response from a GetDetailById call.
func parseGetDetailByIdResponse(rsp *http.Response) (*GetDetailByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetailByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseGetRenderByIdResponse parses an HTTP response from a GetRenderById call.
func parseGetRenderByIdResponse(rsp *http.Response) (*GetRenderByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRenderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// parseGetAllEventTemplatesResponse parses an HTTP response from a GetAllEventTemplates call.
func parseGetAllEventTemplatesResponse(rsp *http.Response) (*GetAllEventTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEventTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseTimelineEventTemplateNoPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseCreateEventTemplatesResponse parses an HTTP response from a CreateEventTemplates call.
func parseCreateEventTemplatesResponse(rsp *http.Response) (*CreateEventTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEventTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// parseArchiveEventTemplateResponse parses an HTTP response from a ArchiveEventTemplate call.
func parseArchiveEventTemplateResponse(rsp *http.Response) (*ArchiveEventTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveEventTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// parseGetEventTemplateResponse parses an HTTP response from a GetEventTemplate call.
func parseGetEventTemplateResponse(rsp *http.Response) (*GetEventTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseUpdateEventTemplateResponse parses an HTTP response from a UpdateEventTemplate call.
func parseUpdateEventTemplateResponse(rsp *http.Response) (*UpdateEventTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEventTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseCreateTokensResponse parses an HTTP response from a CreateTokens call.
func parseCreateTokensResponse(rsp *http.Response) (*CreateTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplateToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseArchiveTokenNameResponse parses an HTTP response from a ArchiveTokenName call.
func parseArchiveTokenNameResponse(rsp *http.Response) (*ArchiveTokenNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveTokenNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// parseUpdateTokenNameResponse parses an HTTP response from a UpdateTokenName call.
func parseUpdateTokenNameResponse(rsp *http.Response) (*UpdateTokenNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTokenNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineEventTemplateToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
