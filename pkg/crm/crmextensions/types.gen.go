// Package crmextensions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package crmextensions

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
)

// Defines values for ActionHookActionBodyHttpMethod.
const (
	ActionHookActionBodyHttpMethodCONNECT ActionHookActionBodyHttpMethod = "CONNECT"

	ActionHookActionBodyHttpMethodDELETE ActionHookActionBodyHttpMethod = "DELETE"

	ActionHookActionBodyHttpMethodGET ActionHookActionBodyHttpMethod = "GET"

	ActionHookActionBodyHttpMethodHEAD ActionHookActionBodyHttpMethod = "HEAD"

	ActionHookActionBodyHttpMethodOPTIONS ActionHookActionBodyHttpMethod = "OPTIONS"

	ActionHookActionBodyHttpMethodPATCH ActionHookActionBodyHttpMethod = "PATCH"

	ActionHookActionBodyHttpMethodPOST ActionHookActionBodyHttpMethod = "POST"

	ActionHookActionBodyHttpMethodPUT ActionHookActionBodyHttpMethod = "PUT"

	ActionHookActionBodyHttpMethodTRACE ActionHookActionBodyHttpMethod = "TRACE"
)

// Defines values for ActionHookActionBodyType.
const (
	ActionHookActionBodyTypeACTIONHOOK ActionHookActionBodyType = "ACTION_HOOK"
)

// Defines values for CardDisplayPropertyDataType.
const (
	CardDisplayPropertyDataTypeBOOLEAN CardDisplayPropertyDataType = "BOOLEAN"

	CardDisplayPropertyDataTypeCURRENCY CardDisplayPropertyDataType = "CURRENCY"

	CardDisplayPropertyDataTypeDATE CardDisplayPropertyDataType = "DATE"

	CardDisplayPropertyDataTypeDATETIME CardDisplayPropertyDataType = "DATETIME"

	CardDisplayPropertyDataTypeEMAIL CardDisplayPropertyDataType = "EMAIL"

	CardDisplayPropertyDataTypeLINK CardDisplayPropertyDataType = "LINK"

	CardDisplayPropertyDataTypeNUMERIC CardDisplayPropertyDataType = "NUMERIC"

	CardDisplayPropertyDataTypeSTATUS CardDisplayPropertyDataType = "STATUS"

	CardDisplayPropertyDataTypeSTRING CardDisplayPropertyDataType = "STRING"
)

// Defines values for CardObjectTypeBodyName.
const (
	CardObjectTypeBodyNameCompanies CardObjectTypeBodyName = "companies"

	CardObjectTypeBodyNameContacts CardObjectTypeBodyName = "contacts"

	CardObjectTypeBodyNameDeals CardObjectTypeBodyName = "deals"

	CardObjectTypeBodyNameTickets CardObjectTypeBodyName = "tickets"
)

// Defines values for DisplayOptionType.
const (
	DisplayOptionTypeDANGER DisplayOptionType = "DANGER"

	DisplayOptionTypeDEFAULT DisplayOptionType = "DEFAULT"

	DisplayOptionTypeINFO DisplayOptionType = "INFO"

	DisplayOptionTypeSUCCESS DisplayOptionType = "SUCCESS"

	DisplayOptionTypeWARNING DisplayOptionType = "WARNING"
)

// Defines values for IFrameActionBodyType.
const (
	IFrameActionBodyTypeIFRAME IFrameActionBodyType = "IFRAME"
)

// Defines values for IntegratorCardPayloadResponseResponseVersion.
const (
	IntegratorCardPayloadResponseResponseVersionV1 IntegratorCardPayloadResponseResponseVersion = "v1"

	IntegratorCardPayloadResponseResponseVersionV3 IntegratorCardPayloadResponseResponseVersion = "v3"
)

// Defines values for ObjectTokenDataType.
const (
	ObjectTokenDataTypeBOOLEAN ObjectTokenDataType = "BOOLEAN"

	ObjectTokenDataTypeCURRENCY ObjectTokenDataType = "CURRENCY"

	ObjectTokenDataTypeDATE ObjectTokenDataType = "DATE"

	ObjectTokenDataTypeDATETIME ObjectTokenDataType = "DATETIME"

	ObjectTokenDataTypeEMAIL ObjectTokenDataType = "EMAIL"

	ObjectTokenDataTypeLINK ObjectTokenDataType = "LINK"

	ObjectTokenDataTypeNUMERIC ObjectTokenDataType = "NUMERIC"

	ObjectTokenDataTypeSTATUS ObjectTokenDataType = "STATUS"

	ObjectTokenDataTypeSTRING ObjectTokenDataType = "STRING"
)

// ActionConfirmationBody defines model for ActionConfirmationBody.
type ActionConfirmationBody struct {
	CancelButtonLabel  string `json:"cancelButtonLabel"`
	ConfirmButtonLabel string `json:"confirmButtonLabel"`
	Prompt             string `json:"prompt"`
}

// ActionHookActionBody defines model for ActionHookActionBody.
type ActionHookActionBody struct {
	Confirmation          *ActionConfirmationBody        `json:"confirmation,omitempty"`
	HttpMethod            ActionHookActionBodyHttpMethod `json:"httpMethod"`
	Label                 *string                        `json:"label,omitempty"`
	PropertyNamesIncluded []string                       `json:"propertyNamesIncluded"`
	Type                  ActionHookActionBodyType       `json:"type"`
	Url                   string                         `json:"url"`
}

// ActionHookActionBodyHttpMethod defines model for ActionHookActionBody.HttpMethod.
type ActionHookActionBodyHttpMethod string

// ActionHookActionBodyType defines model for ActionHookActionBody.Type.
type ActionHookActionBodyType string

// Configuration for custom user actions on cards.
type CardActions struct {
	// A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.
	BaseUrls []string `json:"baseUrls"`
}

// State of card definition to be created
type CardCreateRequest struct {
	// Configuration for custom user actions on cards.
	Actions CardActions `json:"actions"`

	// Configuration for displayed info on a card
	Display CardDisplayBody `json:"display"`

	// Configuration for this card's data fetch request.
	Fetch CardFetchBody `json:"fetch"`

	// The top-level title for this card. Displayed to users in the CRM UI.
	Title string `json:"title"`
}

// Configuration for displayed info on a card
type CardDisplayBody struct {
	// Card display properties. These will will be rendered as "label : value" pairs in the card UI. See the [example card](#) in the overview docs for more details.
	Properties []CardDisplayProperty `json:"properties"`
}

// Definition for a card display property.
type CardDisplayProperty struct {
	// Type of data represented by this property.
	DataType CardDisplayPropertyDataType `json:"dataType"`

	// The label for this property as you'd like it displayed to users.
	Label string `json:"label"`

	// An internal identifier for this property. This value must be unique TODO.
	Name string `json:"name"`

	// An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.
	Options []DisplayOption `json:"options"`
}

// Type of data represented by this property.
type CardDisplayPropertyDataType string

// Configuration for this card's data fetch request.
type CardFetchBody struct {
	// An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.
	ObjectTypes []CardObjectTypeBody `json:"objectTypes"`

	// URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
	TargetUrl string `json:"targetUrl"`
}

// Variant of CardFetchBody with fields as optional for patches
type CardFetchBodyPatch struct {
	// An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.
	ObjectTypes []CardObjectTypeBody `json:"objectTypes"`

	// URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.
	TargetUrl *string `json:"targetUrl,omitempty"`
}

// List of card definitions
type CardListResponse struct {
	// List of card definitions
	Results []CardResponse `json:"results"`
}

// CardObjectTypeBody defines model for CardObjectTypeBody.
type CardObjectTypeBody struct {
	// A CRM object type where this card should be displayed.
	Name CardObjectTypeBodyName `json:"name"`

	// An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.
	PropertiesToSend []string `json:"propertiesToSend"`
}

// A CRM object type where this card should be displayed.
type CardObjectTypeBodyName string

// Body for a patch with optional fields
type CardPatchRequest struct {
	// Configuration for custom user actions on cards.
	Actions *CardActions `json:"actions,omitempty"`

	// Configuration for displayed info on a card
	Display *CardDisplayBody `json:"display,omitempty"`

	// Variant of CardFetchBody with fields as optional for patches
	Fetch *CardFetchBodyPatch `json:"fetch,omitempty"`

	// The top-level title for this card. Displayed to users in the CRM UI.
	Title *string `json:"title,omitempty"`
}

// Current state of Card Definition
type CardResponse struct {
	// Configuration for custom user actions on cards.
	Actions CardActions `json:"actions"`

	// When this card was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Configuration for displayed info on a card
	Display CardDisplayBody `json:"display"`

	// Configuration for this card's data fetch request.
	Fetch CardFetchBody `json:"fetch"`

	// Generated unique ID for card.
	Id string `json:"id"`

	// Displayed title of this card.
	Title string `json:"title"`

	// The last time this card was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Option definition for STATUS dataTypes.
type DisplayOption struct {
	// The text that will be displayed to users for this option.
	Label string `json:"label"`

	// JSON-friendly unique name for option.
	Name string `json:"name"`

	// The type of status.
	Type DisplayOptionType `json:"type"`
}

// The type of status.
type DisplayOptionType string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// IFrameActionBody defines model for IFrameActionBody.
type IFrameActionBody struct {
	Height                int32                `json:"height"`
	Label                 *string              `json:"label,omitempty"`
	PropertyNamesIncluded []string             `json:"propertyNamesIncluded"`
	Type                  IFrameActionBodyType `json:"type"`
	Url                   string               `json:"url"`
	Width                 int32                `json:"width"`
}

// IFrameActionBodyType defines model for IFrameActionBody.Type.
type IFrameActionBodyType string

// The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page.
type IntegratorCardPayloadResponse struct {
	// URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.
	AllItemsLinkUrl *string `json:"allItemsLinkUrl,omitempty"`

	// The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.
	CardLabel       *string                                       `json:"cardLabel,omitempty"`
	ResponseVersion *IntegratorCardPayloadResponseResponseVersion `json:"responseVersion,omitempty"`

	// A list of up to five valid card sub categories.
	Sections        *[]IntegratorObjectResult `json:"sections,omitempty"`
	TopLevelActions *TopLevelActions          `json:"topLevelActions,omitempty"`

	// The total number of card properties that will be sent in this response.
	TotalCount int32 `json:"totalCount"`
}

// IntegratorCardPayloadResponseResponseVersion defines model for IntegratorCardPayloadResponse.ResponseVersion.
type IntegratorCardPayloadResponseResponseVersion string

// IntegratorObjectResult defines model for IntegratorObjectResult.
type IntegratorObjectResult struct {
	Actions []interface{} `json:"actions"`
	Id      string        `json:"id"`
	LinkUrl *string       `json:"linkUrl,omitempty"`
	Title   string        `json:"title"`
	Tokens  []ObjectToken `json:"tokens"`
}

// ObjectToken defines model for ObjectToken.
type ObjectToken struct {
	DataType *ObjectTokenDataType `json:"dataType,omitempty"`
	Label    *string              `json:"label,omitempty"`
	Name     *string              `json:"name,omitempty"`
	Value    string               `json:"value"`
}

// ObjectTokenDataType defines model for ObjectToken.DataType.
type ObjectTokenDataType string

// TopLevelActions defines model for TopLevelActions.
type TopLevelActions struct {
	Primary   *interface{}      `json:"primary,omitempty"`
	Secondary []interface{}     `json:"secondary"`
	Settings  *IFrameActionBody `json:"settings,omitempty"`
}

// CreateAppJSONBody defines parameters for CreateApp.
type CreateAppJSONBody CardCreateRequest

// UpdateCardJSONBody defines parameters for UpdateCard.
type UpdateCardJSONBody CardPatchRequest

// CreateAppJSONRequestBody defines body for CreateApp for application/json ContentType.
type CreateAppJSONRequestBody CreateAppJSONBody

// UpdateCardJSONRequestBody defines body for UpdateCard for application/json ContentType.
type UpdateCardJSONRequestBody UpdateCardJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
