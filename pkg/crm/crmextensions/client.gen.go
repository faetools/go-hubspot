// Package crmextensions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package crmextensions

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/faetools/client"
)

// operation paths

const (
	opPathGetAllAppFormat   = "./crm/v3/extensions/cards/%s"
	opPathCreateAppFormat   = "./crm/v3/extensions/cards/%s"
	opPathArchiveCardFormat = "./crm/v3/extensions/cards/%s/%s"
	opPathGetCardFormat     = "./crm/v3/extensions/cards/%s/%s"
	opPathUpdateCardFormat  = "./crm/v3/extensions/cards/%s/%s"
)

var opPathGetCardsSampleResponseSampleResponse = client.MustParseURL("./crm/v3/extensions/cards/sample-response")

// ClientInterface interface specification for the client.
type ClientInterface interface {
	// GetCardsSampleResponseSampleResponse request
	GetCardsSampleResponseSampleResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*GetCardsSampleResponseSampleResponseResponse, error)

	// GetAllApp request
	GetAllApp(ctx context.Context, appId int32, reqEditors ...client.RequestEditorFn) (*GetAllAppResponse, error)

	// CreateApp request with any body
	CreateAppWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateAppResponse, error)
	CreateApp(ctx context.Context, appId int32, body CreateAppJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateAppResponse, error)

	// ArchiveCard request
	ArchiveCard(ctx context.Context, appId int32, cardId string, reqEditors ...client.RequestEditorFn) (*ArchiveCardResponse, error)

	// GetCard request
	GetCard(ctx context.Context, appId int32, cardId string, reqEditors ...client.RequestEditorFn) (*GetCardResponse, error)

	// UpdateCard request with any body
	UpdateCardWithBody(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateCardResponse, error)
	UpdateCard(ctx context.Context, appId int32, cardId string, body UpdateCardJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateCardResponse, error)
}

// Client definition

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client client.Client

// NewClient creates a new Client with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	c, err := client.NewClient(opts...)
	if err != nil {
		return nil, err
	}

	if c.BaseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(c); err != nil {
			return nil, err
		}
	}

	return (*Client)(c), nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}

	return nil
}

// GetCardsSampleResponseSampleResponse: GET /crm/v3/extensions/cards/sample-response

type GetCardsSampleResponseSampleResponseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegratorCardPayloadResponse
}

// Status returns HTTPResponse.Status
func (r GetCardsSampleResponseSampleResponseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardsSampleResponseSampleResponseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetCardsSampleResponseSampleResponseRequest generates requests for GetCardsSampleResponseSampleResponse
func newGetCardsSampleResponseSampleResponseRequest(baseURL *url.URL) (*http.Request, error) {
	queryURL := baseURL.ResolveReference(opPathGetCardsSampleResponseSampleResponse)

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetCardsSampleResponseSampleResponse request returning *GetCardsSampleResponseSampleResponseResponse
func (c *Client) GetCardsSampleResponseSampleResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*GetCardsSampleResponseSampleResponseResponse, error) {
	req, err := newGetCardsSampleResponseSampleResponseRequest(c.BaseURL)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetCardsSampleResponseSampleResponseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegratorCardPayloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// GetAllApp: GET /crm/v3/extensions/cards/{appId}

type GetAllAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardListResponse
}

// Status returns HTTPResponse.Status
func (r GetAllAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetAllAppRequest generates requests for GetAllApp
func newGetAllAppRequest(baseURL *url.URL, appId int32) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("appId", appId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetAllAppFormat, pathParam0)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetAllApp request returning *GetAllAppResponse
func (c *Client) GetAllApp(ctx context.Context, appId int32, reqEditors ...client.RequestEditorFn) (*GetAllAppResponse, error) {
	req, err := newGetAllAppRequest(c.BaseURL, appId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetAllAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// CreateApp: POST /crm/v3/extensions/cards/{appId}

type CreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CardResponse
}

// Status returns HTTPResponse.Status
func (r CreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newCreateAppRequestWithBody generates requests for CreateApp with any type of body
func newCreateAppRequestWithBody(baseURL *url.URL, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("appId", appId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathCreateAppFormat, pathParam0)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// CreateAppWithBody request with arbitrary body returning *CreateAppResponse
func (c *Client) CreateAppWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.doCreateAppWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateAppResponse(rsp)
}

func (c *Client) doCreateAppWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateAppRequestWithBody(c.BaseURL, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) CreateApp(ctx context.Context, appId int32, body CreateAppJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateAppResponse, error) {
	rsp, err := c.doCreateApp(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseCreateAppResponse(rsp)
}

// newCreateAppRequest calls the generic CreateApp builder with application/json body.
func newCreateAppRequest(baseURL *url.URL, appId int32, body CreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateAppRequestWithBody(baseURL, appId, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doCreateApp(ctx context.Context, appId int32, body CreateAppJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateAppRequest(c.BaseURL, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseCreateAppResponse parses an HTTP response from a CreateApp call.
func parseCreateAppResponse(rsp *http.Response) (*CreateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &CreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ArchiveCard: DELETE /crm/v3/extensions/cards/{appId}/{cardId}

type ArchiveCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newArchiveCardRequest generates requests for ArchiveCard
func newArchiveCardRequest(baseURL *url.URL, appId int32, cardId string) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("appId", appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("cardId", cardId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathArchiveCardFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodDelete, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ArchiveCard request returning *ArchiveCardResponse
func (c *Client) ArchiveCard(ctx context.Context, appId int32, cardId string, reqEditors ...client.RequestEditorFn) (*ArchiveCardResponse, error) {
	req, err := newArchiveCardRequest(c.BaseURL, appId, cardId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &ArchiveCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// GetCard: GET /crm/v3/extensions/cards/{appId}/{cardId}

type GetCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
}

// Status returns HTTPResponse.Status
func (r GetCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newGetCardRequest generates requests for GetCard
func newGetCardRequest(baseURL *url.URL, appId int32, cardId string) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("appId", appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("cardId", cardId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathGetCardFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// GetCard request returning *GetCardResponse
func (c *Client) GetCard(ctx context.Context, appId int32, cardId string, reqEditors ...client.RequestEditorFn) (*GetCardResponse, error) {
	req, err := newGetCardRequest(c.BaseURL, appId, cardId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	rsp, err := c.Client.Do(req)
	if err != nil {
		return nil, err
	}

	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &GetCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// UpdateCard: PATCH /crm/v3/extensions/cards/{appId}/{cardId}

type UpdateCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CardResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// newUpdateCardRequestWithBody generates requests for UpdateCard with any type of body
func newUpdateCardRequestWithBody(baseURL *url.URL, appId int32, cardId string, contentType string, body io.Reader) (*http.Request, error) {
	pathParam0, err := client.GetPathParam("appId", appId)
	if err != nil {
		return nil, err
	}

	pathParam1, err := client.GetPathParam("cardId", cardId)
	if err != nil {
		return nil, err
	}

	opPath := fmt.Sprintf(opPathUpdateCardFormat, pathParam0, pathParam1)

	queryURL, err := baseURL.Parse(opPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPatch, queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add(client.ContentType, contentType)

	return req, nil
}

// UpdateCardWithBody request with arbitrary body returning *UpdateCardResponse
func (c *Client) UpdateCardWithBody(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*UpdateCardResponse, error) {
	rsp, err := c.doUpdateCardWithBody(ctx, appId, cardId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdateCardResponse(rsp)
}

func (c *Client) doUpdateCardWithBody(ctx context.Context, appId int32, cardId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateCardRequestWithBody(c.BaseURL, appId, cardId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

func (c *Client) UpdateCard(ctx context.Context, appId int32, cardId string, body UpdateCardJSONRequestBody, reqEditors ...client.RequestEditorFn) (*UpdateCardResponse, error) {
	rsp, err := c.doUpdateCard(ctx, appId, cardId, body, reqEditors...)
	if err != nil {
		return nil, err
	}

	return parseUpdateCardResponse(rsp)
}

// newUpdateCardRequest calls the generic UpdateCard builder with application/json body.
func newUpdateCardRequest(baseURL *url.URL, appId int32, cardId string, body UpdateCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newUpdateCardRequestWithBody(baseURL, appId, cardId, client.MIMEApplicationJSON, bodyReader)
}

func (c *Client) doUpdateCard(ctx context.Context, appId int32, cardId string, body UpdateCardJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newUpdateCardRequest(c.BaseURL, appId, cardId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}

	return c.Client.Do(req)
}

// parseUpdateCardResponse parses an HTTP response from a UpdateCard call.
func parseUpdateCardResponse(rsp *http.Response) (*UpdateCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	if err != nil {
		return nil, err
	}
	defer rsp.Body.Close()

	response := &UpdateCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
