// Package webhooks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package webhooks

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	HapikeyScopes = "hapikey.Scopes"
)

// Defines values for BatchResponseSubscriptionResponseStatus.
const (
	BatchResponseSubscriptionResponseStatusCANCELED BatchResponseSubscriptionResponseStatus = "CANCELED"

	BatchResponseSubscriptionResponseStatusCOMPLETE BatchResponseSubscriptionResponseStatus = "COMPLETE"

	BatchResponseSubscriptionResponseStatusPENDING BatchResponseSubscriptionResponseStatus = "PENDING"

	BatchResponseSubscriptionResponseStatusPROCESSING BatchResponseSubscriptionResponseStatus = "PROCESSING"
)

// Defines values for BatchResponseSubscriptionResponseWithErrorsStatus.
const (
	BatchResponseSubscriptionResponseWithErrorsStatusCANCELED BatchResponseSubscriptionResponseWithErrorsStatus = "CANCELED"

	BatchResponseSubscriptionResponseWithErrorsStatusCOMPLETE BatchResponseSubscriptionResponseWithErrorsStatus = "COMPLETE"

	BatchResponseSubscriptionResponseWithErrorsStatusPENDING BatchResponseSubscriptionResponseWithErrorsStatus = "PENDING"

	BatchResponseSubscriptionResponseWithErrorsStatusPROCESSING BatchResponseSubscriptionResponseWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for SubscriptionCreateRequestEventType.
const (
	SubscriptionCreateRequestEventTypeCompanyCreation SubscriptionCreateRequestEventType = "company.creation"

	SubscriptionCreateRequestEventTypeCompanyDeletion SubscriptionCreateRequestEventType = "company.deletion"

	SubscriptionCreateRequestEventTypeCompanyPropertyChange SubscriptionCreateRequestEventType = "company.propertyChange"

	SubscriptionCreateRequestEventTypeContactCreation SubscriptionCreateRequestEventType = "contact.creation"

	SubscriptionCreateRequestEventTypeContactDeletion SubscriptionCreateRequestEventType = "contact.deletion"

	SubscriptionCreateRequestEventTypeContactPrivacyDeletion SubscriptionCreateRequestEventType = "contact.privacyDeletion"

	SubscriptionCreateRequestEventTypeContactPropertyChange SubscriptionCreateRequestEventType = "contact.propertyChange"

	SubscriptionCreateRequestEventTypeDealCreation SubscriptionCreateRequestEventType = "deal.creation"

	SubscriptionCreateRequestEventTypeDealDeletion SubscriptionCreateRequestEventType = "deal.deletion"

	SubscriptionCreateRequestEventTypeDealPropertyChange SubscriptionCreateRequestEventType = "deal.propertyChange"
)

// Defines values for SubscriptionResponseEventType.
const (
	SubscriptionResponseEventTypeCompanyCreation SubscriptionResponseEventType = "company.creation"

	SubscriptionResponseEventTypeCompanyDeletion SubscriptionResponseEventType = "company.deletion"

	SubscriptionResponseEventTypeCompanyPropertyChange SubscriptionResponseEventType = "company.propertyChange"

	SubscriptionResponseEventTypeContactCreation SubscriptionResponseEventType = "contact.creation"

	SubscriptionResponseEventTypeContactDeletion SubscriptionResponseEventType = "contact.deletion"

	SubscriptionResponseEventTypeContactPrivacyDeletion SubscriptionResponseEventType = "contact.privacyDeletion"

	SubscriptionResponseEventTypeContactPropertyChange SubscriptionResponseEventType = "contact.propertyChange"

	SubscriptionResponseEventTypeDealCreation SubscriptionResponseEventType = "deal.creation"

	SubscriptionResponseEventTypeDealDeletion SubscriptionResponseEventType = "deal.deletion"

	SubscriptionResponseEventTypeDealPropertyChange SubscriptionResponseEventType = "deal.propertyChange"
)

// Defines values for ThrottlingSettingsPeriod.
const (
	ThrottlingSettingsPeriodROLLINGMINUTE ThrottlingSettingsPeriod = "ROLLING_MINUTE"

	ThrottlingSettingsPeriodSECONDLY ThrottlingSettingsPeriod = "SECONDLY"
)

// BatchInputSubscriptionBatchUpdateRequest defines model for BatchInputSubscriptionBatchUpdateRequest.
type BatchInputSubscriptionBatchUpdateRequest struct {
	Inputs []SubscriptionBatchUpdateRequest `json:"inputs"`
}

// BatchResponseSubscriptionResponse defines model for BatchResponseSubscriptionResponse.
type BatchResponseSubscriptionResponse struct {
	CompletedAt time.Time                                `json:"completedAt"`
	Links       *BatchResponseSubscriptionResponse_Links `json:"links,omitempty"`
	RequestedAt *time.Time                               `json:"requestedAt,omitempty"`
	Results     []SubscriptionResponse                   `json:"results"`
	StartedAt   time.Time                                `json:"startedAt"`
	Status      BatchResponseSubscriptionResponseStatus  `json:"status"`
}

// BatchResponseSubscriptionResponse_Links defines model for BatchResponseSubscriptionResponse.Links.
type BatchResponseSubscriptionResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSubscriptionResponseStatus defines model for BatchResponseSubscriptionResponse.Status.
type BatchResponseSubscriptionResponseStatus string

// BatchResponseSubscriptionResponseWithErrors defines model for BatchResponseSubscriptionResponseWithErrors.
type BatchResponseSubscriptionResponseWithErrors struct {
	CompletedAt time.Time                                          `json:"completedAt"`
	Errors      *[]StandardError                                   `json:"errors,omitempty"`
	Links       *BatchResponseSubscriptionResponseWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                             `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                         `json:"requestedAt,omitempty"`
	Results     []SubscriptionResponse                             `json:"results"`
	StartedAt   time.Time                                          `json:"startedAt"`
	Status      BatchResponseSubscriptionResponseWithErrorsStatus  `json:"status"`
}

// BatchResponseSubscriptionResponseWithErrors_Links defines model for BatchResponseSubscriptionResponseWithErrors.Links.
type BatchResponseSubscriptionResponseWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSubscriptionResponseWithErrorsStatus defines model for BatchResponseSubscriptionResponseWithErrors.Status.
type BatchResponseSubscriptionResponseWithErrorsStatus string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// New or updated webhook settings for an app.
type SettingsChangeRequest struct {
	// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
	TargetUrl string `json:"targetUrl"`

	// Configuration details for webhook throttling.
	Throttling ThrottlingSettings `json:"throttling"`
}

// Webhook settings for an app.
type SettingsResponse struct {
	// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
	CreatedAt time.Time `json:"createdAt"`

	// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
	TargetUrl string `json:"targetUrl"`

	// Configuration details for webhook throttling.
	Throttling ThrottlingSettings `json:"throttling"`

	// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SubscriptionBatchUpdateRequest defines model for SubscriptionBatchUpdateRequest.
type SubscriptionBatchUpdateRequest struct {
	Active bool  `json:"active"`
	Id     int32 `json:"id"`
}

// New webhook settings for an app.
type SubscriptionCreateRequest struct {
	// Determines if the subscription is active or paused. Defaults to false.
	Active *bool `json:"active,omitempty"`

	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionCreateRequestEventType `json:"eventType"`

	// The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`
}

// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionCreateRequestEventType string

// List of event subscriptions for your app
type SubscriptionListResponse struct {
	// List of event subscriptions for your app
	Results []SubscriptionResponse `json:"results"`
}

// Updated details for the subscription.
type SubscriptionPatchRequest struct {
	// Determines if the subscription is active or paused.
	Active *bool `json:"active,omitempty"`
}

// Complete details for an event subscription.
type SubscriptionResponse struct {
	// Determines if the subscription is active or paused.
	Active bool `json:"active"`

	// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
	CreatedAt time.Time `json:"createdAt"`

	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionResponseEventType `json:"eventType"`

	// The unique ID of the subscription.
	Id string `json:"id"`

	// The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`

	// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionResponseEventType string

// Configuration details for webhook throttling.
type ThrottlingSettings struct {
	// The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by `period`.
	MaxConcurrentRequests int32 `json:"maxConcurrentRequests"`

	// Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
	Period ThrottlingSettingsPeriod `json:"period"`
}

// Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
type ThrottlingSettingsPeriod string

// ConfigureSettingsJSONBody defines parameters for ConfigureSettings.
type ConfigureSettingsJSONBody SettingsChangeRequest

// CreateSubscriptionsJSONBody defines parameters for CreateSubscriptions.
type CreateSubscriptionsJSONBody SubscriptionCreateRequest

// UpdateBatchJSONBody defines parameters for UpdateBatch.
type UpdateBatchJSONBody BatchInputSubscriptionBatchUpdateRequest

// UpdateSubscriptionJSONBody defines parameters for UpdateSubscription.
type UpdateSubscriptionJSONBody SubscriptionPatchRequest

// ConfigureSettingsJSONRequestBody defines body for ConfigureSettings for application/json ContentType.
type ConfigureSettingsJSONRequestBody ConfigureSettingsJSONBody

// CreateSubscriptionsJSONRequestBody defines body for CreateSubscriptions for application/json ContentType.
type CreateSubscriptionsJSONRequestBody CreateSubscriptionsJSONBody

// UpdateBatchJSONRequestBody defines body for UpdateBatch for application/json ContentType.
type UpdateBatchJSONRequestBody UpdateBatchJSONBody

// UpdateSubscriptionJSONRequestBody defines body for UpdateSubscription for application/json ContentType.
type UpdateSubscriptionJSONRequestBody UpdateSubscriptionJSONBody

// Getter for additional properties for BatchResponseSubscriptionResponse_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSubscriptionResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSubscriptionResponse_Links
func (a *BatchResponseSubscriptionResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSubscriptionResponse_Links to handle AdditionalProperties
func (a *BatchResponseSubscriptionResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSubscriptionResponse_Links to handle AdditionalProperties
func (a BatchResponseSubscriptionResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSubscriptionResponseWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSubscriptionResponseWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSubscriptionResponseWithErrors_Links
func (a *BatchResponseSubscriptionResponseWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSubscriptionResponseWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSubscriptionResponseWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSubscriptionResponseWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSubscriptionResponseWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
