// Package transactional provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package transactional

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/faetools/client"
)

// ClientOption allows setting custom parameters during construction.
type ClientOption func(*Client) error

func (c *Client) doSendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newSendEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doSendEmail(ctx context.Context, body SendEmailJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newSendEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetTokensPageSmtpTokens(ctx context.Context, params *GetTokensPageSmtpTokensParams, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetTokensPageSmtpTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateTokenSmtpTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateTokenSmtpTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doCreateTokenSmtpTokens(ctx context.Context, body CreateTokenSmtpTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newCreateTokenSmtpTokensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doArchiveToken(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newArchiveTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGetTokenById(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGetTokenByIdRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doResetPasswordPasswordReset(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newResetPasswordPasswordResetRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

// newSendEmailRequest calls the generic SendEmail builder with application/json body.
func newSendEmailRequest(server string, body SendEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newSendEmailRequestWithBody(server, "application/json", bodyReader)
}

// newSendEmailRequestWithBody generates requests for SendEmail with any type of body
func newSendEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/single-email/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newGetTokensPageSmtpTokensRequest generates requests for GetTokensPageSmtpTokens
func newGetTokensPageSmtpTokensRequest(server string, params *GetTokensPageSmtpTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CampaignName != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignName", runtime.ParamLocationQuery, *params.CampaignName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.EmailCampaignId != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailCampaignId", runtime.ParamLocationQuery, *params.EmailCampaignId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newCreateTokenSmtpTokensRequest calls the generic CreateTokenSmtpTokens builder with application/json body.
func newCreateTokenSmtpTokensRequest(server string, body CreateTokenSmtpTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newCreateTokenSmtpTokensRequestWithBody(server, "application/json", bodyReader)
}

// newCreateTokenSmtpTokensRequestWithBody generates requests for CreateTokenSmtpTokens with any type of body
func newCreateTokenSmtpTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// newArchiveTokenRequest generates requests for ArchiveToken
func newArchiveTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newGetTokenByIdRequest generates requests for GetTokenById
func newGetTokenByIdRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// newResetPasswordPasswordResetRequest generates requests for ResetPasswordPasswordReset
func newResetPasswordPasswordResetRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s/password-reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.requestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client client.HTTPRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	requestEditors []client.RequestEditorFn
}

// SetClient sets the underlying client.
func (c *Client) SetClient(doer client.HTTPRequestDoer) {
	c.client = doer
}

// AddRequestEditor adds a request editor to the client.
func (c *Client) AddRequestEditor(fn client.RequestEditorFn) {
	c.requestEditors = append(c.requestEditors, fn)
}

// NewClient creates a new Client, with reasonable defaults.
func NewClient(opts ...ClientOption) (*Client, error) {
	// create a client with default server
	client := Client{Server: DefaultServer}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}

	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}

	// create httpClient, if not already present
	if client.client == nil {
		client.client = &http.Client{}
	}

	return &client, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientInterface interface specification for the client.
type ClientInterface interface {
	client.Client
	// SendEmail request with any body
	SendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*SendEmailResponse, error)
	SendEmail(ctx context.Context, body SendEmailJSONRequestBody, reqEditors ...client.RequestEditorFn) (*SendEmailResponse, error)

	// GetTokensPageSmtpTokens request
	GetTokensPageSmtpTokens(ctx context.Context, params *GetTokensPageSmtpTokensParams, reqEditors ...client.RequestEditorFn) (*GetTokensPageSmtpTokensResponse, error)

	// CreateTokenSmtpTokens request with any body
	CreateTokenSmtpTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateTokenSmtpTokensResponse, error)
	CreateTokenSmtpTokens(ctx context.Context, body CreateTokenSmtpTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateTokenSmtpTokensResponse, error)

	// ArchiveToken request
	ArchiveToken(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*ArchiveTokenResponse, error)

	// GetTokenById request
	GetTokenById(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*GetTokenByIdResponse, error)

	// ResetPasswordPasswordReset request
	ResetPasswordPasswordReset(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*ResetPasswordPasswordResetResponse, error)
}

type SendEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailSendStatusView
}

// Status returns HTTPResponse.Status
func (r SendEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokensPageSmtpTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseSmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r GetTokensPageSmtpTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokensPageSmtpTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenSmtpTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r CreateTokenSmtpTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenSmtpTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r GetTokenByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetPasswordPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r ResetPasswordPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPasswordPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SendEmailWithBody request with arbitrary body returning *SendEmailResponse
func (c *Client) SendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*SendEmailResponse, error) {
	rsp, err := c.doSendEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseSendEmailResponse(rsp)
}

func (c *Client) SendEmail(ctx context.Context, body SendEmailJSONRequestBody, reqEditors ...client.RequestEditorFn) (*SendEmailResponse, error) {
	rsp, err := c.doSendEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseSendEmailResponse(rsp)
}

// GetTokensPageSmtpTokens request returning *GetTokensPageSmtpTokensResponse
func (c *Client) GetTokensPageSmtpTokens(ctx context.Context, params *GetTokensPageSmtpTokensParams, reqEditors ...client.RequestEditorFn) (*GetTokensPageSmtpTokensResponse, error) {
	rsp, err := c.doGetTokensPageSmtpTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetTokensPageSmtpTokensResponse(rsp)
}

// CreateTokenSmtpTokensWithBody request with arbitrary body returning *CreateTokenSmtpTokensResponse
func (c *Client) CreateTokenSmtpTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*CreateTokenSmtpTokensResponse, error) {
	rsp, err := c.doCreateTokenSmtpTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateTokenSmtpTokensResponse(rsp)
}

func (c *Client) CreateTokenSmtpTokens(ctx context.Context, body CreateTokenSmtpTokensJSONRequestBody, reqEditors ...client.RequestEditorFn) (*CreateTokenSmtpTokensResponse, error) {
	rsp, err := c.doCreateTokenSmtpTokens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseCreateTokenSmtpTokensResponse(rsp)
}

// ArchiveToken request returning *ArchiveTokenResponse
func (c *Client) ArchiveToken(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*ArchiveTokenResponse, error) {
	rsp, err := c.doArchiveToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseArchiveTokenResponse(rsp)
}

// GetTokenById request returning *GetTokenByIdResponse
func (c *Client) GetTokenById(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*GetTokenByIdResponse, error) {
	rsp, err := c.doGetTokenById(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGetTokenByIdResponse(rsp)
}

// ResetPasswordPasswordReset request returning *ResetPasswordPasswordResetResponse
func (c *Client) ResetPasswordPasswordReset(ctx context.Context, tokenId string, reqEditors ...client.RequestEditorFn) (*ResetPasswordPasswordResetResponse, error) {
	rsp, err := c.doResetPasswordPasswordReset(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseResetPasswordPasswordResetResponse(rsp)
}

// parseSendEmailResponse parses an HTTP response from a SendEmail call.
func parseSendEmailResponse(rsp *http.Response) (*SendEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailSendStatusView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseGetTokensPageSmtpTokensResponse parses an HTTP response from a GetTokensPageSmtpTokens call.
func parseGetTokensPageSmtpTokensResponse(rsp *http.Response) (*GetTokensPageSmtpTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokensPageSmtpTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseSmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseCreateTokenSmtpTokensResponse parses an HTTP response from a CreateTokenSmtpTokens call.
func parseCreateTokenSmtpTokensResponse(rsp *http.Response) (*CreateTokenSmtpTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenSmtpTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// parseArchiveTokenResponse parses an HTTP response from a ArchiveToken call.
func parseArchiveTokenResponse(rsp *http.Response) (*ArchiveTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// parseGetTokenByIdResponse parses an HTTP response from a GetTokenById call.
func parseGetTokenByIdResponse(rsp *http.Response) (*GetTokenByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// parseResetPasswordPasswordResetResponse parses an HTTP response from a ResetPasswordPasswordReset call.
func parseResetPasswordPasswordResetResponse(rsp *http.Response) (*ResetPasswordPasswordResetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetPasswordPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
