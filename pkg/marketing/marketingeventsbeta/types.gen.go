// Package marketingeventsbeta provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package marketingeventsbeta

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
	HapikeyScopes           = "hapikey.Scopes"
	Oauth2_legacyScopes     = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseMarketingEventPublicDefaultResponseStatus.
const (
	BatchResponseMarketingEventPublicDefaultResponseStatusCANCELED BatchResponseMarketingEventPublicDefaultResponseStatus = "CANCELED"

	BatchResponseMarketingEventPublicDefaultResponseStatusCOMPLETE BatchResponseMarketingEventPublicDefaultResponseStatus = "COMPLETE"

	BatchResponseMarketingEventPublicDefaultResponseStatusPENDING BatchResponseMarketingEventPublicDefaultResponseStatus = "PENDING"

	BatchResponseMarketingEventPublicDefaultResponseStatusPROCESSING BatchResponseMarketingEventPublicDefaultResponseStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for PropertyValueSource.
const (
	PropertyValueSourceACADEMY PropertyValueSource = "ACADEMY"

	PropertyValueSourceADS PropertyValueSource = "ADS"

	PropertyValueSourceAIGROUP PropertyValueSource = "AI_GROUP"

	PropertyValueSourceANALYTICS PropertyValueSource = "ANALYTICS"

	PropertyValueSourceAPI PropertyValueSource = "API"

	PropertyValueSourceAPPROVALS PropertyValueSource = "APPROVALS"

	PropertyValueSourceASSISTS PropertyValueSource = "ASSISTS"

	PropertyValueSourceASSOCIATIONS PropertyValueSource = "ASSOCIATIONS"

	PropertyValueSourceAUTOMATIONPLATFORM PropertyValueSource = "AUTOMATION_PLATFORM"

	PropertyValueSourceAVATARSSERVICE PropertyValueSource = "AVATARS_SERVICE"

	PropertyValueSourceBATCHUPDATE PropertyValueSource = "BATCH_UPDATE"

	PropertyValueSourceBCCTOCRM PropertyValueSource = "BCC_TO_CRM"

	PropertyValueSourceBEHAVIORALEVENTS PropertyValueSource = "BEHAVIORAL_EVENTS"

	PropertyValueSourceBETASSIGNMENT PropertyValueSource = "BET_ASSIGNMENT"

	PropertyValueSourceBETCRMCONNECTOR PropertyValueSource = "BET_CRM_CONNECTOR"

	PropertyValueSourceBIDEN PropertyValueSource = "BIDEN"

	PropertyValueSourceBOT PropertyValueSource = "BOT"

	PropertyValueSourceCALCULATED PropertyValueSource = "CALCULATED"

	PropertyValueSourceCOMMUNICATOR PropertyValueSource = "COMMUNICATOR"

	PropertyValueSourceCOMPANIES PropertyValueSource = "COMPANIES"

	PropertyValueSourceCOMPANYFAMILIES PropertyValueSource = "COMPANY_FAMILIES"

	PropertyValueSourceCOMPANYINSIGHTS PropertyValueSource = "COMPANY_INSIGHTS"

	PropertyValueSourceCONTACTS PropertyValueSource = "CONTACTS"

	PropertyValueSourceCONTACTSWEB PropertyValueSource = "CONTACTS_WEB"

	PropertyValueSourceCONTENTMEMBERSHIP PropertyValueSource = "CONTENT_MEMBERSHIP"

	PropertyValueSourceCONVERSATIONS PropertyValueSource = "CONVERSATIONS"

	PropertyValueSourceCRMUI PropertyValueSource = "CRM_UI"

	PropertyValueSourceDEALS PropertyValueSource = "DEALS"

	PropertyValueSourceDEFAULT PropertyValueSource = "DEFAULT"

	PropertyValueSourceEMAIL PropertyValueSource = "EMAIL"

	PropertyValueSourceEMAILINTEGRATION PropertyValueSource = "EMAIL_INTEGRATION"

	PropertyValueSourceENGAGEMENTS PropertyValueSource = "ENGAGEMENTS"

	PropertyValueSourceEXTENSION PropertyValueSource = "EXTENSION"

	PropertyValueSourceFORM PropertyValueSource = "FORM"

	PropertyValueSourceFORWARDTOCRM PropertyValueSource = "FORWARD_TO_CRM"

	PropertyValueSourceGMAILINTEGRATION PropertyValueSource = "GMAIL_INTEGRATION"

	PropertyValueSourceGOALS PropertyValueSource = "GOALS"

	PropertyValueSourceHEISENBERG PropertyValueSource = "HEISENBERG"

	PropertyValueSourceIMPORT PropertyValueSource = "IMPORT"

	PropertyValueSourceINTEGRATION PropertyValueSource = "INTEGRATION"

	PropertyValueSourceINTEGRATIONSPLATFORM PropertyValueSource = "INTEGRATIONS_PLATFORM"

	PropertyValueSourceINTEGRATIONSSYNC PropertyValueSource = "INTEGRATIONS_SYNC"

	PropertyValueSourceLEADIN PropertyValueSource = "LEADIN"

	PropertyValueSourceMEETINGS PropertyValueSource = "MEETINGS"

	PropertyValueSourceMERGECOMPANIES PropertyValueSource = "MERGE_COMPANIES"

	PropertyValueSourceMERGECONTACTS PropertyValueSource = "MERGE_CONTACTS"

	PropertyValueSourceMERGEOBJECTS PropertyValueSource = "MERGE_OBJECTS"

	PropertyValueSourceMIGRATION PropertyValueSource = "MIGRATION"

	PropertyValueSourceMOBILEANDROID PropertyValueSource = "MOBILE_ANDROID"

	PropertyValueSourceMOBILEIOS PropertyValueSource = "MOBILE_IOS"

	PropertyValueSourcePAYMENTS PropertyValueSource = "PAYMENTS"

	PropertyValueSourcePIPELINESETTINGS PropertyValueSource = "PIPELINE_SETTINGS"

	PropertyValueSourcePORTALOBJECTSYNC PropertyValueSource = "PORTAL_OBJECT_SYNC"

	PropertyValueSourcePORTALUSERASSOCIATOR PropertyValueSource = "PORTAL_USER_ASSOCIATOR"

	PropertyValueSourcePRESENTATIONS PropertyValueSource = "PRESENTATIONS"

	PropertyValueSourcePROPERTYSETTINGS PropertyValueSource = "PROPERTY_SETTINGS"

	PropertyValueSourceQUOTAS PropertyValueSource = "QUOTAS"

	PropertyValueSourceQUOTES PropertyValueSource = "QUOTES"

	PropertyValueSourceRECYCLINGBIN PropertyValueSource = "RECYCLING_BIN"

	PropertyValueSourceSALES PropertyValueSource = "SALES"

	PropertyValueSourceSALESFORCE PropertyValueSource = "SALESFORCE"

	PropertyValueSourceSALESMESSAGES PropertyValueSource = "SALES_MESSAGES"

	PropertyValueSourceSEQUENCES PropertyValueSource = "SEQUENCES"

	PropertyValueSourceSETTINGS PropertyValueSource = "SETTINGS"

	PropertyValueSourceSIDEKICK PropertyValueSource = "SIDEKICK"

	PropertyValueSourceSIGNALS PropertyValueSource = "SIGNALS"

	PropertyValueSourceSOCIAL PropertyValueSource = "SOCIAL"

	PropertyValueSourceSUCCESS PropertyValueSource = "SUCCESS"

	PropertyValueSourceTALLY PropertyValueSource = "TALLY"

	PropertyValueSourceTASK PropertyValueSource = "TASK"

	PropertyValueSourceWALINCREMENTAL PropertyValueSource = "WAL_INCREMENTAL"

	PropertyValueSourceWORKFLOWS PropertyValueSource = "WORKFLOWS"
)

// BatchInputMarketingEventCreateRequestParams defines model for BatchInputMarketingEventCreateRequestParams.
type BatchInputMarketingEventCreateRequestParams struct {
	Inputs []MarketingEventCreateRequestParams `json:"inputs"`
}

// List of marketing event details to create or update
type BatchInputMarketingEventEmailSubscriber struct {
	// List of marketing event details to create or update
	Inputs []MarketingEventEmailSubscriber `json:"inputs"`
}

// BatchInputMarketingEventExternalUniqueIdentifier defines model for BatchInputMarketingEventExternalUniqueIdentifier.
type BatchInputMarketingEventExternalUniqueIdentifier struct {
	Inputs []MarketingEventExternalUniqueIdentifier `json:"inputs"`
}

// List of HubSpot contacts to subscribe to the marketing event
type BatchInputMarketingEventSubscriber struct {
	// List of HubSpot contacts to subscribe to the marketing event
	Inputs []MarketingEventSubscriber `json:"inputs"`
}

// BatchResponseMarketingEventPublicDefaultResponse defines model for BatchResponseMarketingEventPublicDefaultResponse.
type BatchResponseMarketingEventPublicDefaultResponse struct {
	CompletedAt time.Time                                               `json:"completedAt"`
	Errors      *[]StandardError                                        `json:"errors,omitempty"`
	Links       *BatchResponseMarketingEventPublicDefaultResponse_Links `json:"links,omitempty"`
	NumErrors   *int32                                                  `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                              `json:"requestedAt,omitempty"`
	Results     []MarketingEventPublicDefaultResponse                   `json:"results"`
	StartedAt   time.Time                                               `json:"startedAt"`
	Status      BatchResponseMarketingEventPublicDefaultResponseStatus  `json:"status"`
}

// BatchResponseMarketingEventPublicDefaultResponse_Links defines model for BatchResponseMarketingEventPublicDefaultResponse.Links.
type BatchResponseMarketingEventPublicDefaultResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseMarketingEventPublicDefaultResponseStatus defines model for BatchResponseMarketingEventPublicDefaultResponse.Status.
type BatchResponseMarketingEventPublicDefaultResponseStatus string

// CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging defines model for CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging.
type CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging struct {
	Results []MarketingEventExternalUniqueIdentifier `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// EventDetailSettings defines model for EventDetailSettings.
type EventDetailSettings struct {
	// The id of the application the settings are for
	AppId int32 `json:"appId"`

	// The url that will be used to fetch marketing event details by id
	EventDetailsUrl string `json:"eventDetailsUrl"`
}

// EventDetailSettingsUrl defines model for EventDetailSettingsUrl.
type EventDetailSettingsUrl struct {
	// The url that will be used to fetch marketing event details by id. Must contain a `%s` character sequence that will be substituted with the event id. For example: `https://my.event.app/events/%s`
	EventDetailsUrl string `json:"eventDetailsUrl"`
}

// MarketingEventCreateRequestParams defines model for MarketingEventCreateRequestParams.
type MarketingEventCreateRequestParams struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.  Defaults to `false`
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The accountId that is associated with this marketing event in the external event application.
	ExternalAccountId string `json:"externalAccountId"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// MarketingEventDefaultResponse defines model for MarketingEventDefaultResponse.
type MarketingEventDefaultResponse struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// The URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// MarketingEventEmailSubscriber defines model for MarketingEventEmailSubscriber.
type MarketingEventEmailSubscriber struct {
	// The email address of the contact in HubSpot to associate with the event. Note that the contact must already exist in HubSpot; a contact will not be created.
	Email string `json:"email"`

	// The date and time at which the contact subscribed to the event.
	InteractionDateTime int64 `json:"interactionDateTime"`
}

// MarketingEventExternalUniqueIdentifier defines model for MarketingEventExternalUniqueIdentifier.
type MarketingEventExternalUniqueIdentifier struct {
	// The id of the application that created the marketing event in HubSpot.
	AppId int32 `json:"appId"`

	// The accountId that is associated with this marketing event in the external event application.
	ExternalAccountId string `json:"externalAccountId"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`
}

// MarketingEventPublicDefaultResponse defines model for MarketingEventPublicDefaultResponse.
type MarketingEventPublicDefaultResponse struct {
	CreatedAt time.Time `json:"createdAt"`

	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`
	Id       string  `json:"id"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	UpdatedAt     time.Time  `json:"updatedAt"`
}

// MarketingEventPublicReadResponse defines model for MarketingEventPublicReadResponse.
type MarketingEventPublicReadResponse struct {
	// The number of HubSpot contacts that attended this marketing event.
	Attendees int32 `json:"attendees"`

	// The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.
	Cancellations int32     `json:"cancellations"`
	CreatedAt     time.Time `json:"createdAt"`

	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`
	Id              string `json:"id"`

	// The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.
	NoShows int32 `json:"noShows"`

	// The number of HubSpot contacts that registered for this marketing event.
	Registrants int32 `json:"registrants"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	UpdatedAt     time.Time  `json:"updatedAt"`
}

// MarketingEventSubscriber defines model for MarketingEventSubscriber.
type MarketingEventSubscriber struct {
	// The date and time at which the contact subscribed to the event.
	InteractionDateTime int64  `json:"interactionDateTime"`
	Vid                 *int32 `json:"vid,omitempty"`
}

// MarketingEventUpdateRequestParams defines model for MarketingEventUpdateRequestParams.
type MarketingEventUpdateRequestParams struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled. Defaults to `false`
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName *string `json:"eventName,omitempty"`

	// The name of the organizer of the marketing event.
	EventOrganizer *string `json:"eventOrganizer,omitempty"`

	// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// PropertyValue defines model for PropertyValue.
type PropertyValue struct {
	Name                    string              `json:"name"`
	RequestId               string              `json:"requestId"`
	SelectedByUser          bool                `json:"selectedByUser"`
	SelectedByUserTimestamp int64               `json:"selectedByUserTimestamp"`
	Source                  PropertyValueSource `json:"source"`
	SourceId                string              `json:"sourceId"`
	SourceLabel             string              `json:"sourceLabel"`

	// Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`
	SourceMetadata  string  `json:"sourceMetadata"`
	SourceVid       []int64 `json:"sourceVid"`
	Timestamp       int64   `json:"timestamp"`
	UpdatedByUserId *int32  `json:"updatedByUserId,omitempty"`
	Value           string  `json:"value"`
}

// PropertyValueSource defines model for PropertyValue.Source.
type PropertyValueSource string

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// EventsMarketingEventsJSONBody defines parameters for EventsMarketingEvents.
type EventsMarketingEventsJSONBody MarketingEventCreateRequestParams

// DeleteEventsJSONBody defines parameters for DeleteEvents.
type DeleteEventsJSONBody BatchInputMarketingEventExternalUniqueIdentifier

// SearchEventsParams defines parameters for SearchEvents.
type SearchEventsParams struct {
	// The partial event id to search for
	Q string `json:"q"`
}

// UpsertEventsJSONBody defines parameters for UpsertEvents.
type UpsertEventsJSONBody BatchInputMarketingEventCreateRequestParams

// DeleteExternalEventParams defines parameters for DeleteExternalEvent.
type DeleteExternalEventParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// GetExternalEventParams defines parameters for GetExternalEvent.
type GetExternalEventParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// PatchExternalEventJSONBody defines parameters for PatchExternalEvent.
type PatchExternalEventJSONBody MarketingEventUpdateRequestParams

// PatchExternalEventParams defines parameters for PatchExternalEvent.
type PatchExternalEventParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// PutExternalEventJSONBody defines parameters for PutExternalEvent.
type PutExternalEventJSONBody MarketingEventCreateRequestParams

// CancelExternalEventParams defines parameters for CancelExternalEvent.
type CancelExternalEventParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// EmailUpsertSubscriberStateJSONBody defines parameters for EmailUpsertSubscriberState.
type EmailUpsertSubscriberStateJSONBody BatchInputMarketingEventEmailSubscriber

// EmailUpsertSubscriberStateParams defines parameters for EmailUpsertSubscriberState.
type EmailUpsertSubscriberStateParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// UpsertSubscriberStateJSONBody defines parameters for UpsertSubscriberState.
type UpsertSubscriberStateJSONBody BatchInputMarketingEventSubscriber

// UpsertSubscriberStateParams defines parameters for UpsertSubscriberState.
type UpsertSubscriberStateParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// PostAppSettingsJSONBody defines parameters for PostAppSettings.
type PostAppSettingsJSONBody EventDetailSettingsUrl

// EventsMarketingEventsJSONRequestBody defines body for EventsMarketingEvents for application/json ContentType.
type EventsMarketingEventsJSONRequestBody EventsMarketingEventsJSONBody

// DeleteEventsJSONRequestBody defines body for DeleteEvents for application/json ContentType.
type DeleteEventsJSONRequestBody DeleteEventsJSONBody

// UpsertEventsJSONRequestBody defines body for UpsertEvents for application/json ContentType.
type UpsertEventsJSONRequestBody UpsertEventsJSONBody

// PatchExternalEventJSONRequestBody defines body for PatchExternalEvent for application/json ContentType.
type PatchExternalEventJSONRequestBody PatchExternalEventJSONBody

// PutExternalEventJSONRequestBody defines body for PutExternalEvent for application/json ContentType.
type PutExternalEventJSONRequestBody PutExternalEventJSONBody

// EmailUpsertSubscriberStateJSONRequestBody defines body for EmailUpsertSubscriberState for application/json ContentType.
type EmailUpsertSubscriberStateJSONRequestBody EmailUpsertSubscriberStateJSONBody

// UpsertSubscriberStateJSONRequestBody defines body for UpsertSubscriberState for application/json ContentType.
type UpsertSubscriberStateJSONRequestBody UpsertSubscriberStateJSONBody

// PostAppSettingsJSONRequestBody defines body for PostAppSettings for application/json ContentType.
type PostAppSettingsJSONRequestBody PostAppSettingsJSONBody

// Getter for additional properties for BatchResponseMarketingEventPublicDefaultResponse_Links. Returns the specified
// element and whether it was found
func (a BatchResponseMarketingEventPublicDefaultResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseMarketingEventPublicDefaultResponse_Links
func (a *BatchResponseMarketingEventPublicDefaultResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseMarketingEventPublicDefaultResponse_Links to handle AdditionalProperties
func (a *BatchResponseMarketingEventPublicDefaultResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseMarketingEventPublicDefaultResponse_Links to handle AdditionalProperties
func (a BatchResponseMarketingEventPublicDefaultResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
