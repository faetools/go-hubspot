// Package visitoridentification provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package visitoridentification

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/faetools/client"
)

func (c *Client) doGenerateTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGenerateTokenCreateRequestWithBody(c.baseURL, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

func (c *Client) doGenerateTokenCreate(ctx context.Context, body GenerateTokenCreateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*http.Response, error) {
	req, err := newGenerateTokenCreateRequest(c.baseURL, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.client.Do(req)
}

// newGenerateTokenCreateRequest calls the generic GenerateTokenCreate builder with application/json body.
func newGenerateTokenCreateRequest(baseURL *url.URL, body GenerateTokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return newGenerateTokenCreateRequestWithBody(baseURL, "application/json", bodyReader)
}

// newGenerateTokenCreateRequestWithBody generates requests for GenerateTokenCreate with any type of body
func newGenerateTokenCreateRequestWithBody(baseURL *url.URL, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	operationPath := fmt.Sprintf("/conversations/v3/visitor-identification/tokens/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := baseURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []client.RequestEditorFn) error {
	for _, r := range c.requestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// compile time assert that it fulfils the interface
var _ ClientInterface = (*Client)(nil)

// Client conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	baseURL *url.URL

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	client client.HTTPRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	requestEditors []client.RequestEditorFn
}

// SetClient sets the underlying client.
func (c *Client) SetClient(doer client.HTTPRequestDoer) {
	c.client = doer
}

// AddRequestEditor adds a request editor to the client.
func (c *Client) AddRequestEditor(fn client.RequestEditorFn) {
	c.requestEditors = append(c.requestEditors, fn)
}

// SetBaseURL overrides the baseURL.
func (c *Client) SetBaseURL(baseURL *url.URL) {
	c.baseURL = baseURL
}

// NewClient creates a new Client, with reasonable defaults.
func NewClient(opts ...client.Option) (*Client, error) {
	// create a client
	c := Client{}

	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&c); err != nil {
			return nil, err
		}
	}

	// add default server
	if c.baseURL == nil {
		if err := client.WithBaseURL(DefaultServer)(&c); err != nil {
			return nil, err
		}
	}

	// create httpClient, if not already present
	if c.client == nil {
		c.client = &http.Client{}
	}

	return &c, nil
}

// ClientInterface interface specification for the client.
type ClientInterface interface {
	client.Client
	// GenerateTokenCreate request with any body
	GenerateTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*GenerateTokenCreateResponse, error)
	GenerateTokenCreate(ctx context.Context, body GenerateTokenCreateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*GenerateTokenCreateResponse, error)
}

type GenerateTokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentificationTokenResponse
}

// Status returns HTTPResponse.Status
func (r GenerateTokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GenerateTokenCreateWithBody request with arbitrary body returning *GenerateTokenCreateResponse
func (c *Client) GenerateTokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*GenerateTokenCreateResponse, error) {
	rsp, err := c.doGenerateTokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGenerateTokenCreateResponse(rsp)
}

func (c *Client) GenerateTokenCreate(ctx context.Context, body GenerateTokenCreateJSONRequestBody, reqEditors ...client.RequestEditorFn) (*GenerateTokenCreateResponse, error) {
	rsp, err := c.doGenerateTokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return parseGenerateTokenCreateResponse(rsp)
}

// parseGenerateTokenCreateResponse parses an HTTP response from a GenerateTokenCreate call.
func parseGenerateTokenCreateResponse(rsp *http.Response) (*GenerateTokenCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentificationTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
