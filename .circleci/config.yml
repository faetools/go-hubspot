# Code generated by devtool; DO NOT EDIT.
version: 2.1
orbs:
  tool: faetools/service-tool@0.0.9
executors:
  golang-dev:
    docker:
      - image: golang:1.17.2
commands:
  pactinstall:
    description: Command for installing Pact binary
    parameters:
      PACT_VERSION:
        default: 1.88.66
        type: string
    steps:
      - run:
          name: Generate Checksum
          command: |
            touch /tmp/cachechecksum.txt
            echo "<<parameters.PACT_VERSION>>" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - pactinstall-{{ arch }}-v2-{{ checksum "/tmp/cachechecksum.txt" }}
      - run:
          name: Install
          command: |
            cd /opt
            if [ -d "/tmp/cache" ]
            then

                echo "using cache";
                mkdir -p /opt/pact/bin
                cp -r /tmp/cache/pact/<<parameters.PACT_VERSION>>/. /opt/pact/.
            else

                echo "pulling from source";
                curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v<<parameters.PACT_VERSION>>/pact-<<parameters.PACT_VERSION>>-linux-x86_64.tar.gz
                tar xzf pact-<<parameters.PACT_VERSION>>-linux-x86_64.tar.gz
                mkdir -p /tmp/cache/pact/<<parameters.PACT_VERSION>>
                cp -r pact/. /tmp/cache/pact/<<parameters.PACT_VERSION>>/.
            fi
      - save_cache:
          key: pactinstall-{{ arch }}-v2-{{ checksum "/tmp/cachechecksum.txt" }}
          paths:
            - /tmp/cache
  gh-client-install:
    description: Install GH CLI client
    parameters:
      GH_CLI_VERSION:
        type: string
        default: 1.11.0
    steps:
      - run:
          name: Generate Checksum
          command: |
            touch /tmp/cachechecksum.txt
            echo "<< parameters.GH_CLI_VERSION >>" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - ghclient-{{ arch }}-v1-{{ checksum "/tmp/cachechecksum.txt" }}
      - run:
          name: Setup
          working_directory: /tmp
          command: |
            if [ -d "/tmp/cache" ]
            then

              sudo cp /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>/ghclient /usr/local/bin/gh
            else

              mkdir -p /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>
              wget https://github.com/cli/cli/releases/download/v<< parameters.GH_CLI_VERSION >>/gh_<< parameters.GH_CLI_VERSION >>_linux_amd64.tar.gz -O /tmp/ghcli.tar.gz
              tar -xf /tmp/ghcli.tar.gz
              sudo mv /tmp/gh_<< parameters.GH_CLI_VERSION >>_linux_amd64/bin/gh /usr/local/bin/gh
              sudo cp /usr/local/bin/gh /tmp/cache/ghclient/<< parameters.GH_CLI_VERSION >>/ghclient
            fi
      - save_cache:
          key: ghclient-{{ arch }}-v1-{{ checksum "/tmp/cachechecksum.txt" }}
          paths:
            - /tmp/cache
defaults: &resources
  team: firestarters
  datastore_resource_names: '[]'
  datastore_composite_resource_names: '{}'
  object_store_resource_names: '[]'
  object_store_expire_days: '[]'
  assets_resource_names: '[]'
  assets_expire_days: '[]'
  consume_event_names: '{}'
  consume_event_receive_count: '{}'
  consume_event_hashed: true
  gateway_http_type: api
  gateway_rate_limit_second: "5"
  gateway_allowed_payload_size: "1"
parameters:
  validate_pact:
    type: boolean
    default: false
  destroy_pr_capability_environment:
    type: boolean
    default: false
  destroy_pr_capability_version:
    type: string
    default: ""
jobs:
  test-unit:
    machine:
      image: ubuntu-2004:202104-01
    environment:
      GOPRIVATE: github.com/faetools/*
      GOFLAGS: -mod=vendor
      GOTESTSUM_VERSION: 1.6.4
      SONAR_SCANNER_VERSION: 4.6.1.2450
      GOLANGCI_LINT_VERSION: 1.43.0
    steps:
      - checkout
      - run:
          name: Generate Checksum
          command: |
            touch /tmp/cachechecksum.txt
            echo "$GOTESTSUM_VERSION-$SONAR_SCANNER_VERSION-$GOLANGCI_LINT_VERSION" > /tmp/cachechecksum.txt
      - restore_cache:
          keys:
            - unit-setup-{{ arch }}-v1-{{ checksum "/tmp/cachechecksum.txt" }}
      - run:
          name: Setup
          command: |
            sudo mkdir -p /usr/local/go_workspace/bin
            if [ -d "/tmp/cache" ]
            then

                echo "using cache";
                sudo cp /tmp/cache/gotestsum/${GOTESTSUM_VERSION}/gotestsum /usr/local/bin/gotestsum
                mkdir -p /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux
                cp -r /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}/. /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/.
                sudo cp /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}/golangci-lint /usr/local/go_workspace/bin/golangci-lint
            else

                echo "pulling from source";
                curl -sSL "https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION}_linux_amd64.tar.gz" | sudo tar -xz -C /usr/local/bin gotestsum
                wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip -P /tmp
                unzip /tmp/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip -d /tmp
                curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/go_workspace/bin v${GOLANGCI_LINT_VERSION}
                mkdir -p /tmp/cache/gotestsum/${GOTESTSUM_VERSION}
                mkdir -p /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}
                mkdir -p /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}
                cp /usr/local/bin/gotestsum /tmp/cache/gotestsum/${GOTESTSUM_VERSION}/gotestsum
                cp -r /tmp/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/. /tmp/cache/sonar-scanner/${SONAR_SCANNER_VERSION}/.
                sudo cp /usr/local/go_workspace/bin/golangci-lint /tmp/cache/golangci-lint/${GOLANGCI_LINT_VERSION}/golangci-lint
            fi
            mkdir /tmp/test-results
            mkdir -p /tmp/artifacts
      - save_cache:
          key: unit-setup-{{ arch }}-v1-{{ checksum "/tmp/cachechecksum.txt" }}
          paths:
            - /tmp/cache
      - restore_cache:
          keys:
            - v2-golang-cache-{{ arch }}-{{ checksum "go.sum" }}
      - run:
          name: Go Test
          environment:
            CI: true
          command: |
            gotestsum --junitfile /tmp/test-results/unit-tests.xml ./... -race -coverprofile=coverage.out -coverpkg=./...
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: Golangci Lint
          command: /usr/local/go_workspace/bin/golangci-lint run --out-format checkstyle --issues-exit-code=0 --timeout=5m0s > report.xml
      - store_artifacts:
          path: ~/project/report.xml
      - run:
          name: Code Coverage HTML
          working_directory: cmd/app
          command: go tool cover -html=../../coverage.out -o /tmp/artifacts/coverage.html
      - store_artifacts:
          path: /tmp/artifacts
      - save_cache:
          key: v2-golang-cache-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - ~/.cache/golangci-lint
      - run:
          name: Check sonar cache
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]] && [[ "$CIRCLE_BRANCH" != "main" ]] && [[ -z "$CIRCLE_PULL_REQUEST" ]]; then

              circleci-agent step halt
            fi
  test-contract:
    executor: golang-dev
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: Run contract tests
          command: |
            export PATH=$PATH:/opt/pact/bin
            go clean -testcache
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then go test -mod=vendor ./test/contracts/...; fi
            mkdir -p test/contracts/consumer/pacts
      - persist_to_workspace:
          root: /go/src/service/test/
          paths:
            - contracts/consumer/pacts/
      - store_artifacts:
          path: /go/src/service/test/contracts/consumer/logs
      - store_artifacts:
          path: /go/src/service/test/contracts/provider/logs
  pact-contract-upload:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - attach_workspace:
          at: /go/src/service/test/contracts/consumer/pacts/
      - pactinstall
      - run:
          name: Pact contract upload
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer/pacts ]; then cd ./test/contracts/consumer/pacts/ && shopt -s nullglob && for j in *.json; do pact-broker publish --consumer-app-version $CIRCLE_SHA1 --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN $j --tag master; done; fi
  pact-verify:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    environment:
      PACT_WEBHOOK: true
    steps:
      - checkout
      - pactinstall
      - run:
          name: Verify Pact
          command: |
            export PATH=$PATH:/opt/pact/bin
            go test -mod=vendor ./test/contracts/provider/
  can-i-deploy:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: Can I Deploy
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then pact-broker can-i-deploy --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN --pacticipant $CIRCLE_PROJECT_REPONAME --version $CIRCLE_SHA1 --to production --retry-while-unknown 20; fi
  tag-pact-production:
    executor: golang-dev
    resource_class: small
    working_directory: /go/src/service
    steps:
      - checkout
      - pactinstall
      - run:
          name: Tag Pact Production
          command: |
            export PATH=$PATH:/opt/pact/bin
            if [ -d ./test/contracts/consumer ] || [ -d ./test/contracts/provider ]; then pact-broker create-version-tag --broker-base-url https://faetools.pactflow.io --broker-token $PACT_API_TOKEN --pacticipant $CIRCLE_PROJECT_REPONAME --version $CIRCLE_SHA1 --tag production; fi
  capability-test:
    docker:
      - image: $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/capability-testing:latest
    parameters:
      pr:
        type: boolean
        default: false
    environment:
      CIRCLE_RUN_ON_PR: << parameters.pr >>
      PROXY_SERVER: https://mountebank-staging.fae-tools.com
    working_directory: /
    parallelism: 2
    steps:
      - run:
          name: Capability Tests
          command: /run_tests.sh
          no_output_timeout: 15m
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Initiate Environment Destruction
                when: on_fail
                command: |
                  echo "Initiating testing environment destruction"
                  PIPELINE_TRIGGER=$(curl --silent --show-error --fail -H "Content-Type: application/json" -H "Circle-Token: $CIRCLE_API_KEY" --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"destroy_pr_capability_environment":true,"destroy_pr_capability_version":"'"$CIRCLE_SHA1"'"}}' https://circleci.com/api/v2/project/gh/faetools/$CIRCLE_PROJECT_REPONAME/pipeline)
                  PIPELINE_ID=$(echo $PIPELINE_TRIGGER | jq -r ".id")
                  if [[ $PIPELINE_ID = "null" ]]; then echo "No pipeline id found in response"; echo $PIPELINE_TRIGGER; exit 1; fi
                  for i in {1..40}; do

                    WORKFLOW_STATUS=$(curl --silent --show-error --fail -H "Circle-Token: $CIRCLE_API_KEY" https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow | jq -r ".items[0].status")
                    if [[ $WORKFLOW_STATUS == "failed" ]]; then echo "Cleanup has failed, pipeline id $PIPELINE_ID. Please post in #gld-engineering with the CI link"; exit 1; fi
                    if [[ $WORKFLOW_STATUS != "running" && $WORKFLOW_STATUS != "null" && $WORKFLOW_STATUS != "failing" ]]; then echo "Remains of this test have been successfully removed"; exit 0; fi
                    if [[ $WORKFLOW_STATUS == "failing" ]]; then echo "Cleanup is not going well, prepare for failure"; fi
                    echo "."
                    sleep 15
                  done
                  echo "Destroy job failed to run or failed to complete after 10 minutes, please post in #gld-engineering with the CI link"
                  exit 1
      - store_test_results:
          path: /results
workflows:
  master:
    unless: << pipeline.parameters.validate_pact >>
    jobs:
      - test-unit:
          name: Unit Tests
          filters:
            branches:
              only:
                - master
      - tool/build-amd:
          name: Build AMD
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
      - tool/build-arm:
          name: Build ARM
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
      - tool/build-combine:
          name: Build Combine
          context:
            - aws-production
            - default-region
          requires:
            - Build AMD
            - Build ARM
          filters:
            branches:
              only:
                - master
      - test-contract:
          name: Contract Tests
          filters:
            branches:
              only:
                - master
      - pact-contract-upload:
          name: Pact Contract Upload
          filters:
            branches:
              only:
                - master
          requires:
            - Contract Tests
            - Unit Tests
      - can-i-deploy:
          name: Can I Deploy
          requires:
            - Pact Contract Upload
          filters:
            branches:
              only:
                - master
      - tag-pact-production:
          name: Tag Pact Production
          requires:
            - Can I Deploy
          filters:
            branches:
              only:
                - master
      - tool/resource-creation:
          name: Production Resource Creation
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
          requires:
            - Build Combine
            - Unit Tests
            - Can I Deploy
          service_name_prefix: production
          !!merge <<: *resources
      - tool/deploy:
          name: Production Deploy
          context:
            - aws-production
            - default-region
          filters:
            branches:
              only:
                - master
          requires:
            - Production Resource Creation
          account_id: "378547578369"
          platform_environment: production
          service_chart: fae/service-tool
          service_chart_version: 0.12.0
          sentry: false
  pr:
    unless: << pipeline.parameters.destroy_pr_capability_environment >>
    jobs:
      - test-unit:
          name: Unit Tests
          context: code-analysis
          filters:
            branches:
              ignore:
                - master
                - main
      - test-contract:
          name: Contract Tests
          filters:
            branches:
              ignore:
                - master
                - main
  pact:
    when: << pipeline.parameters.validate_pact >>
    jobs:
      - pact-verify:
          name: Verify Pact
          context: pactflow
          filters:
            branches:
              only:
                - master
                - main
