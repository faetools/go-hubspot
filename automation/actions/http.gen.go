// Package actions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package actions

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
	HapikeyScopes           = "hapikey.Scopes"
	Oauth2_legacyScopes     = "oauth2_legacy.Scopes"
)

// Defines values for ActionFunctionFunctionType.
const (
	ActionFunctionFunctionTypePOSTFETCHOPTIONS ActionFunctionFunctionType = "POST_FETCH_OPTIONS"

	ActionFunctionFunctionTypePREACTIONEXECUTION ActionFunctionFunctionType = "PRE_ACTION_EXECUTION"

	ActionFunctionFunctionTypePREFETCHOPTIONS ActionFunctionFunctionType = "PRE_FETCH_OPTIONS"
)

// Defines values for ActionFunctionIdentifierFunctionType.
const (
	ActionFunctionIdentifierFunctionTypePOSTFETCHOPTIONS ActionFunctionIdentifierFunctionType = "POST_FETCH_OPTIONS"

	ActionFunctionIdentifierFunctionTypePREACTIONEXECUTION ActionFunctionIdentifierFunctionType = "PRE_ACTION_EXECUTION"

	ActionFunctionIdentifierFunctionTypePREFETCHOPTIONS ActionFunctionIdentifierFunctionType = "PRE_FETCH_OPTIONS"
)

// Defines values for ConditionalSingleFieldDependencyDependencyType.
const (
	ConditionalSingleFieldDependencyDependencyTypeCONDITIONALSINGLEFIELD ConditionalSingleFieldDependencyDependencyType = "CONDITIONAL_SINGLE_FIELD"
)

// Defines values for FieldTypeDefinitionFieldType.
const (
	FieldTypeDefinitionFieldTypeBooleancheckbox FieldTypeDefinitionFieldType = "booleancheckbox"

	FieldTypeDefinitionFieldTypeCalculationEquation FieldTypeDefinitionFieldType = "calculation_equation"

	FieldTypeDefinitionFieldTypeCalculationReadTime FieldTypeDefinitionFieldType = "calculation_read_time"

	FieldTypeDefinitionFieldTypeCalculationRollup FieldTypeDefinitionFieldType = "calculation_rollup"

	FieldTypeDefinitionFieldTypeCalculationScore FieldTypeDefinitionFieldType = "calculation_score"

	FieldTypeDefinitionFieldTypeCheckbox FieldTypeDefinitionFieldType = "checkbox"

	FieldTypeDefinitionFieldTypeDate FieldTypeDefinitionFieldType = "date"

	FieldTypeDefinitionFieldTypeFile FieldTypeDefinitionFieldType = "file"

	FieldTypeDefinitionFieldTypeNumber FieldTypeDefinitionFieldType = "number"

	FieldTypeDefinitionFieldTypePhonenumber FieldTypeDefinitionFieldType = "phonenumber"

	FieldTypeDefinitionFieldTypeRadio FieldTypeDefinitionFieldType = "radio"

	FieldTypeDefinitionFieldTypeSelect FieldTypeDefinitionFieldType = "select"

	FieldTypeDefinitionFieldTypeText FieldTypeDefinitionFieldType = "text"

	FieldTypeDefinitionFieldTypeTextarea FieldTypeDefinitionFieldType = "textarea"

	FieldTypeDefinitionFieldTypeUnknown FieldTypeDefinitionFieldType = "unknown"
)

// Defines values for FieldTypeDefinitionReferencedObjectType.
const (
	FieldTypeDefinitionReferencedObjectTypeAD FieldTypeDefinitionReferencedObjectType = "AD"

	FieldTypeDefinitionReferencedObjectTypeADACCOUNT FieldTypeDefinitionReferencedObjectType = "AD_ACCOUNT"

	FieldTypeDefinitionReferencedObjectTypeADCAMPAIGN FieldTypeDefinitionReferencedObjectType = "AD_CAMPAIGN"

	FieldTypeDefinitionReferencedObjectTypeADGROUP FieldTypeDefinitionReferencedObjectType = "AD_GROUP"

	FieldTypeDefinitionReferencedObjectTypeATTRIBUTION FieldTypeDefinitionReferencedObjectType = "ATTRIBUTION"

	FieldTypeDefinitionReferencedObjectTypeAUTOMATIONPLATFORMFLOW FieldTypeDefinitionReferencedObjectType = "AUTOMATION_PLATFORM_FLOW"

	FieldTypeDefinitionReferencedObjectTypeBETALERT FieldTypeDefinitionReferencedObjectType = "BET_ALERT"

	FieldTypeDefinitionReferencedObjectTypeBETDELIVERABLESERVICE FieldTypeDefinitionReferencedObjectType = "BET_DELIVERABLE_SERVICE"

	FieldTypeDefinitionReferencedObjectTypeBLOGPOST FieldTypeDefinitionReferencedObjectType = "BLOG_POST"

	FieldTypeDefinitionReferencedObjectTypeCALL FieldTypeDefinitionReferencedObjectType = "CALL"

	FieldTypeDefinitionReferencedObjectTypeCAMPAIGN FieldTypeDefinitionReferencedObjectType = "CAMPAIGN"

	FieldTypeDefinitionReferencedObjectTypeCHATFLOW FieldTypeDefinitionReferencedObjectType = "CHATFLOW"

	FieldTypeDefinitionReferencedObjectTypeCOMMUNICATION FieldTypeDefinitionReferencedObjectType = "COMMUNICATION"

	FieldTypeDefinitionReferencedObjectTypeCOMPANY FieldTypeDefinitionReferencedObjectType = "COMPANY"

	FieldTypeDefinitionReferencedObjectTypeCONTACT FieldTypeDefinitionReferencedObjectType = "CONTACT"

	FieldTypeDefinitionReferencedObjectTypeCONTACTCREATEATTRIBUTION FieldTypeDefinitionReferencedObjectType = "CONTACT_CREATE_ATTRIBUTION"

	FieldTypeDefinitionReferencedObjectTypeCONTENT FieldTypeDefinitionReferencedObjectType = "CONTENT"

	FieldTypeDefinitionReferencedObjectTypeCONVERSATION FieldTypeDefinitionReferencedObjectType = "CONVERSATION"

	FieldTypeDefinitionReferencedObjectTypeCONVERSATIONINBOX FieldTypeDefinitionReferencedObjectType = "CONVERSATION_INBOX"

	FieldTypeDefinitionReferencedObjectTypeCONVERSATIONSESSION FieldTypeDefinitionReferencedObjectType = "CONVERSATION_SESSION"

	FieldTypeDefinitionReferencedObjectTypeCTA FieldTypeDefinitionReferencedObjectType = "CTA"

	FieldTypeDefinitionReferencedObjectTypeDEAL FieldTypeDefinitionReferencedObjectType = "DEAL"

	FieldTypeDefinitionReferencedObjectTypeEMAIL FieldTypeDefinitionReferencedObjectType = "EMAIL"

	FieldTypeDefinitionReferencedObjectTypeENGAGEMENT FieldTypeDefinitionReferencedObjectType = "ENGAGEMENT"

	FieldTypeDefinitionReferencedObjectTypeEXPORT FieldTypeDefinitionReferencedObjectType = "EXPORT"

	FieldTypeDefinitionReferencedObjectTypeFEEDBACKSUBMISSION FieldTypeDefinitionReferencedObjectType = "FEEDBACK_SUBMISSION"

	FieldTypeDefinitionReferencedObjectTypeFORECAST FieldTypeDefinitionReferencedObjectType = "FORECAST"

	FieldTypeDefinitionReferencedObjectTypeFORM FieldTypeDefinitionReferencedObjectType = "FORM"

	FieldTypeDefinitionReferencedObjectTypeFORMSUBMISSIONINBOUNDDB FieldTypeDefinitionReferencedObjectType = "FORM_SUBMISSION_INBOUNDDB"

	FieldTypeDefinitionReferencedObjectTypeHUB FieldTypeDefinitionReferencedObjectType = "HUB"

	FieldTypeDefinitionReferencedObjectTypeIMPORT FieldTypeDefinitionReferencedObjectType = "IMPORT"

	FieldTypeDefinitionReferencedObjectTypeINVOICE FieldTypeDefinitionReferencedObjectType = "INVOICE"

	FieldTypeDefinitionReferencedObjectTypeKEYWORD FieldTypeDefinitionReferencedObjectType = "KEYWORD"

	FieldTypeDefinitionReferencedObjectTypeLANDINGPAGE FieldTypeDefinitionReferencedObjectType = "LANDING_PAGE"

	FieldTypeDefinitionReferencedObjectTypeLINEITEM FieldTypeDefinitionReferencedObjectType = "LINE_ITEM"

	FieldTypeDefinitionReferencedObjectTypeMARKETINGEMAIL FieldTypeDefinitionReferencedObjectType = "MARKETING_EMAIL"

	FieldTypeDefinitionReferencedObjectTypeMARKETINGEVENT FieldTypeDefinitionReferencedObjectType = "MARKETING_EVENT"

	FieldTypeDefinitionReferencedObjectTypeMEDIABRIDGE FieldTypeDefinitionReferencedObjectType = "MEDIA_BRIDGE"

	FieldTypeDefinitionReferencedObjectTypeMEETINGEVENT FieldTypeDefinitionReferencedObjectType = "MEETING_EVENT"

	FieldTypeDefinitionReferencedObjectTypeNOTE FieldTypeDefinitionReferencedObjectType = "NOTE"

	FieldTypeDefinitionReferencedObjectTypeOBJECTLIST FieldTypeDefinitionReferencedObjectType = "OBJECT_LIST"

	FieldTypeDefinitionReferencedObjectTypeOWNER FieldTypeDefinitionReferencedObjectType = "OWNER"

	FieldTypeDefinitionReferencedObjectTypePORTAL FieldTypeDefinitionReferencedObjectType = "PORTAL"

	FieldTypeDefinitionReferencedObjectTypePRODUCT FieldTypeDefinitionReferencedObjectType = "PRODUCT"

	FieldTypeDefinitionReferencedObjectTypePRODUCTORFOLDER FieldTypeDefinitionReferencedObjectType = "PRODUCT_OR_FOLDER"

	FieldTypeDefinitionReferencedObjectTypePUBLISHINGTASK FieldTypeDefinitionReferencedObjectType = "PUBLISHING_TASK"

	FieldTypeDefinitionReferencedObjectTypeQUOTA FieldTypeDefinitionReferencedObjectType = "QUOTA"

	FieldTypeDefinitionReferencedObjectTypeQUOTE FieldTypeDefinitionReferencedObjectType = "QUOTE"

	FieldTypeDefinitionReferencedObjectTypeRESTORABLECRMOBJECT FieldTypeDefinitionReferencedObjectType = "RESTORABLE_CRM_OBJECT"

	FieldTypeDefinitionReferencedObjectTypeSALESFORCESYNCERROR FieldTypeDefinitionReferencedObjectType = "SALESFORCE_SYNC_ERROR"

	FieldTypeDefinitionReferencedObjectTypeSEQUENCE FieldTypeDefinitionReferencedObjectType = "SEQUENCE"

	FieldTypeDefinitionReferencedObjectTypeSEQUENCESTEP FieldTypeDefinitionReferencedObjectType = "SEQUENCE_STEP"

	FieldTypeDefinitionReferencedObjectTypeSITEPAGE FieldTypeDefinitionReferencedObjectType = "SITE_PAGE"

	FieldTypeDefinitionReferencedObjectTypeSNIPPET FieldTypeDefinitionReferencedObjectType = "SNIPPET"

	FieldTypeDefinitionReferencedObjectTypeSOCIALCHANNEL FieldTypeDefinitionReferencedObjectType = "SOCIAL_CHANNEL"

	FieldTypeDefinitionReferencedObjectTypeSOCIALPOST FieldTypeDefinitionReferencedObjectType = "SOCIAL_POST"

	FieldTypeDefinitionReferencedObjectTypeTASK FieldTypeDefinitionReferencedObjectType = "TASK"

	FieldTypeDefinitionReferencedObjectTypeTASKTEMPLATE FieldTypeDefinitionReferencedObjectType = "TASK_TEMPLATE"

	FieldTypeDefinitionReferencedObjectTypeTEMPLATE FieldTypeDefinitionReferencedObjectType = "TEMPLATE"

	FieldTypeDefinitionReferencedObjectTypeTICKET FieldTypeDefinitionReferencedObjectType = "TICKET"

	FieldTypeDefinitionReferencedObjectTypeUNKNOWN FieldTypeDefinitionReferencedObjectType = "UNKNOWN"

	FieldTypeDefinitionReferencedObjectTypeUNSUBSCRIBE FieldTypeDefinitionReferencedObjectType = "UNSUBSCRIBE"
)

// Defines values for FieldTypeDefinitionType.
const (
	FieldTypeDefinitionTypeBool FieldTypeDefinitionType = "bool"

	FieldTypeDefinitionTypeCurrencyNumber FieldTypeDefinitionType = "currency_number"

	FieldTypeDefinitionTypeDate FieldTypeDefinitionType = "date"

	FieldTypeDefinitionTypeDatetime FieldTypeDefinitionType = "datetime"

	FieldTypeDefinitionTypeEnumeration FieldTypeDefinitionType = "enumeration"

	FieldTypeDefinitionTypeJson FieldTypeDefinitionType = "json"

	FieldTypeDefinitionTypeNumber FieldTypeDefinitionType = "number"

	FieldTypeDefinitionTypeObjectCoordinates FieldTypeDefinitionType = "object_coordinates"

	FieldTypeDefinitionTypePhoneNumber FieldTypeDefinitionType = "phone_number"

	FieldTypeDefinitionTypeString FieldTypeDefinitionType = "string"
)

// Defines values for InputFieldDefinitionSupportedValueTypes.
const (
	InputFieldDefinitionSupportedValueTypesFIELDDATA InputFieldDefinitionSupportedValueTypes = "FIELD_DATA"

	InputFieldDefinitionSupportedValueTypesOBJECTPROPERTY InputFieldDefinitionSupportedValueTypes = "OBJECT_PROPERTY"

	InputFieldDefinitionSupportedValueTypesSTATICVALUE InputFieldDefinitionSupportedValueTypes = "STATIC_VALUE"
)

// Defines values for SingleFieldDependencyDependencyType.
const (
	SingleFieldDependencyDependencyTypeSINGLEFIELD SingleFieldDependencyDependencyType = "SINGLE_FIELD"
)

// A serverless function associated with this custom workflow action.
type ActionFunction struct {
	// The function source code.
	FunctionSource string `json:"functionSource"`

	// The type of function. This determines when the function will be called.
	FunctionType ActionFunctionFunctionType `json:"functionType"`

	// The ID qualifier for the function. This is used to specify which input field a function is associated with for `PRE_FETCH_OPTIONS` and `POST_FETCH_OPTIONS` function types.
	Id *string `json:"id,omitempty"`
}

// The type of function. This determines when the function will be called.
type ActionFunctionFunctionType string

// A serverless function associated with this custom workflow action.
type ActionFunctionIdentifier struct {
	// The type of function. This determines when the function will be called.
	FunctionType ActionFunctionIdentifierFunctionType `json:"functionType"`

	// The ID qualifier for the function. This is used to specify which input field a function is associated with for `PRE_FETCH_OPTIONS` and `POST_FETCH_OPTIONS` function types.
	Id *string `json:"id,omitempty"`
}

// The type of function. This determines when the function will be called.
type ActionFunctionIdentifierFunctionType string

// User-facing labels for this custom workflow action.
type ActionLabels struct {
	// The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow.
	ActionCardContent *string `json:"actionCardContent,omitempty"`

	// A description for this custom action. This will show up in the action editor along with the input fields.
	ActionDescription *string `json:"actionDescription,omitempty"`

	// The name of this custom action. This is what will show up when users are selecting an action in the workflows app.
	ActionName string `json:"actionName"`

	// The name to be displayed at the top of the action editor in the workflows app.
	AppDisplayName *string `json:"appDisplayName,omitempty"`

	// A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.
	InputFieldDescriptions *ActionLabels_InputFieldDescriptions `json:"inputFieldDescriptions,omitempty"`

	// A map of input field names to the user-facing labels.
	InputFieldLabels *ActionLabels_InputFieldLabels `json:"inputFieldLabels,omitempty"`
}

// A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.
type ActionLabels_InputFieldDescriptions struct {
	AdditionalProperties map[string]string `json:"-"`
}

// A map of input field names to the user-facing labels.
type ActionLabels_InputFieldLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// A revision of this custom action.
type ActionRevision struct {
	// The date the revision was created.
	CreatedAt time.Time `json:"createdAt"`

	// Configuration for custom workflow action.
	Definition ExtensionActionDefinition `json:"definition"`
	Id         string                    `json:"id"`

	// The version number of the custom action.
	RevisionId string `json:"revisionId"`
}

// BatchInputCallbackCompletionBatchRequest defines model for BatchInputCallbackCompletionBatchRequest.
type BatchInputCallbackCompletionBatchRequest struct {
	Inputs []CallbackCompletionBatchRequest `json:"inputs"`
}

// Any information to send back to Workflows when completing an action callback as part of a batch request.
type CallbackCompletionBatchRequest struct {
	// The ID of the callback to complete.
	CallbackId string `json:"callbackId"`

	// A map of action output names and values.
	OutputFields CallbackCompletionBatchRequest_OutputFields `json:"outputFields"`
}

// A map of action output names and values.
type CallbackCompletionBatchRequest_OutputFields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Any information to send back to Workflows when completing an action callback.
type CallbackCompletionRequest struct {
	// A map of action output names and values.
	OutputFields CallbackCompletionRequest_OutputFields `json:"outputFields"`
}

// A map of action output names and values.
type CallbackCompletionRequest_OutputFields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CollectionResponseActionFunctionIdentifierNoPaging defines model for CollectionResponseActionFunctionIdentifierNoPaging.
type CollectionResponseActionFunctionIdentifierNoPaging struct {
	Results []ActionFunctionIdentifier `json:"results"`
}

// CollectionResponseActionRevisionForwardPaging defines model for CollectionResponseActionRevisionForwardPaging.
type CollectionResponseActionRevisionForwardPaging struct {
	Paging  *ForwardPaging   `json:"paging,omitempty"`
	Results []ActionRevision `json:"results"`
}

// CollectionResponseExtensionActionDefinitionForwardPaging defines model for CollectionResponseExtensionActionDefinitionForwardPaging.
type CollectionResponseExtensionActionDefinitionForwardPaging struct {
	Paging  *ForwardPaging              `json:"paging,omitempty"`
	Results []ExtensionActionDefinition `json:"results"`
}

// ConditionalSingleFieldDependency defines model for ConditionalSingleFieldDependency.
type ConditionalSingleFieldDependency struct {
	ControllingFieldName  string                                         `json:"controllingFieldName"`
	ControllingFieldValue string                                         `json:"controllingFieldValue"`
	DependencyType        ConditionalSingleFieldDependencyDependencyType `json:"dependencyType"`
	DependentFieldNames   []string                                       `json:"dependentFieldNames"`
}

// ConditionalSingleFieldDependencyDependencyType defines model for ConditionalSingleFieldDependency.DependencyType.
type ConditionalSingleFieldDependencyDependencyType string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Configuration for custom workflow action.
type ExtensionActionDefinition struct {
	// The URL that will accept an HTTPS request each time workflows executes the custom action.
	ActionUrl string `json:"actionUrl"`

	// The date that this custom action was archived, if the custom action is archived.
	ArchivedAt *int64 `json:"archivedAt,omitempty"`

	// A list of functions associated with the custom workflow action.
	Functions []ActionFunctionIdentifier `json:"functions"`

	// The ID of the custom action.
	Id string `json:"id"`

	// A list of dependencies between the input fields. These configure when the input fields should be visible.
	InputFieldDependencies *[]interface{} `json:"inputFieldDependencies,omitempty"`

	// The list of input fields to display in this custom action.
	InputFields []InputFieldDefinition `json:"inputFields"`

	// The user-facing labels for the custom action.
	Labels ExtensionActionDefinition_Labels `json:"labels"`

	// Configures what properties of the enrolled CRM object are included in the action execution request
	ObjectRequestOptions *ObjectRequestOptions `json:"objectRequestOptions,omitempty"`

	// The object types that this custom action supports.
	ObjectTypes []string `json:"objectTypes"`

	// Whether this custom action is published to customers.
	Published  bool   `json:"published"`
	RevisionId string `json:"revisionId"`
}

// The user-facing labels for the custom action.
type ExtensionActionDefinition_Labels struct {
	AdditionalProperties map[string]ActionLabels `json:"-"`
}

// State of custom workflow action to be created.
type ExtensionActionDefinitionInput struct {
	// The URL that will accept an HTTPS request each time workflows executes the custom action.
	ActionUrl string `json:"actionUrl"`

	// The date that this custom action was archived, if the custom action is archived.
	ArchivedAt *int64 `json:"archivedAt,omitempty"`

	// A list of functions associated with the custom workflow action.
	Functions []ActionFunction `json:"functions"`

	// A list of dependencies between the input fields. These configure when the input fields should be visible.
	InputFieldDependencies *[]interface{} `json:"inputFieldDependencies,omitempty"`

	// The list of input fields to display in this custom action.
	InputFields []InputFieldDefinition `json:"inputFields"`

	// The user-facing labels for the custom action.
	Labels ExtensionActionDefinitionInput_Labels `json:"labels"`

	// Configures what properties of the enrolled CRM object are included in the action execution request
	ObjectRequestOptions *ObjectRequestOptions `json:"objectRequestOptions,omitempty"`

	// The object types that this custom action supports.
	ObjectTypes []string `json:"objectTypes"`

	// Whether this custom action is published to customers.
	Published bool `json:"published"`
}

// The user-facing labels for the custom action.
type ExtensionActionDefinitionInput_Labels struct {
	AdditionalProperties map[string]ActionLabels `json:"-"`
}

// Fields on custom workflow action to be updated.
type ExtensionActionDefinitionPatch struct {
	// The URL that will accept an HTTPS request each time workflows executes the custom action.
	ActionUrl *string `json:"actionUrl,omitempty"`

	// A list of dependencies between the input fields. These configure when the input fields should be visible.
	InputFieldDependencies *[]interface{} `json:"inputFieldDependencies,omitempty"`

	// The list of input fields to display in this custom action.
	InputFields *[]InputFieldDefinition `json:"inputFields,omitempty"`

	// The user-facing labels for the custom action.
	Labels *ExtensionActionDefinitionPatch_Labels `json:"labels,omitempty"`

	// Configures what properties of the enrolled CRM object are included in the action execution request
	ObjectRequestOptions *ObjectRequestOptions `json:"objectRequestOptions,omitempty"`

	// The object types that this custom action supports.
	ObjectTypes *[]string `json:"objectTypes,omitempty"`

	// Whether this custom action is published to customers.
	Published *bool `json:"published,omitempty"`
}

// The user-facing labels for the custom action.
type ExtensionActionDefinitionPatch_Labels struct {
	AdditionalProperties map[string]ActionLabels `json:"-"`
}

// The data type expected by an input field.
type FieldTypeDefinition struct {
	// Controls how the field appears in HubSpot.
	FieldType *FieldTypeDefinitionFieldType `json:"fieldType,omitempty"`

	// The input field name.
	Name string `json:"name"`

	// A list of valid options for the field value.
	Options []Option `json:"options"`

	// A URL that will accept HTTPS requests when the valid options for the field are fetched.
	OptionsUrl *string `json:"optionsUrl,omitempty"`

	// This can be set to `OWNER` if the field should contain a HubSpot owner value.
	ReferencedObjectType *FieldTypeDefinitionReferencedObjectType `json:"referencedObjectType,omitempty"`

	// The data type of the field.
	Type FieldTypeDefinitionType `json:"type"`
}

// Controls how the field appears in HubSpot.
type FieldTypeDefinitionFieldType string

// This can be set to `OWNER` if the field should contain a HubSpot owner value.
type FieldTypeDefinitionReferencedObjectType string

// The data type of the field.
type FieldTypeDefinitionType string

// ForwardPaging defines model for ForwardPaging.
type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty"`
}

// Configuration for an input field on the custom action
type InputFieldDefinition struct {
	// Whether the field is required for the custom action to be valid
	IsRequired bool `json:"isRequired"`

	// Controls what kind of input a customer can use to specify the field value. Must contain exactly one of `STATIC_VALUE` or `OBJECT_PROPERTY`. If `STATIC_VALUE`, the customer will be able to choose a value when configuring the custom action; if `OBJECT_PROPERTY`, the customer will be able to choose a property from the enrolled workflow object that the field value will be copied from. In the future we may support more than one input control type here.
	SupportedValueTypes *[]InputFieldDefinitionSupportedValueTypes `json:"supportedValueTypes,omitempty"`

	// The data type expected by an input field.
	TypeDefinition FieldTypeDefinition `json:"typeDefinition"`
}

// InputFieldDefinitionSupportedValueTypes defines model for InputFieldDefinition.SupportedValueTypes.
type InputFieldDefinitionSupportedValueTypes string

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Configures what properties of the enrolled CRM object are included in the action execution request
type ObjectRequestOptions struct {
	// A list of properties of the CRM object to include with the request to the `actionUrl`.
	Properties []string `json:"properties"`
}

// An option for a field value.
type Option struct {
	Description  string  `json:"description"`
	DisplayOrder int32   `json:"displayOrder"`
	DoubleData   float32 `json:"doubleData"`
	Hidden       bool    `json:"hidden"`

	// The user-facing label for the option.
	Label    string `json:"label"`
	ReadOnly bool   `json:"readOnly"`

	// The internal value for the option. This is what will be included in the execution request to the `actionUrl`.
	Value string `json:"value"`
}

// SingleFieldDependency defines model for SingleFieldDependency.
type SingleFieldDependency struct {
	ControllingFieldName string                              `json:"controllingFieldName"`
	DependencyType       SingleFieldDependencyDependencyType `json:"dependencyType"`
	DependentFieldNames  []string                            `json:"dependentFieldNames"`
}

// SingleFieldDependencyDependencyType defines model for SingleFieldDependency.DependencyType.
type SingleFieldDependencyDependencyType string

// Postautomationv4actionscallbackscompleteCompleteBatchJSONBody defines parameters for Postautomationv4actionscallbackscompleteCompleteBatch.
type Postautomationv4actionscallbackscompleteCompleteBatchJSONBody BatchInputCallbackCompletionBatchRequest

// Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONBody defines parameters for Postautomationv4actionscallbacksCallbackIdcompleteComplete.
type Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONBody CallbackCompletionRequest

// Getautomationv4actionsAppIdGetPageParams defines parameters for Getautomationv4actionsAppIdGetPage.
type Getautomationv4actionsAppIdGetPageParams struct {
	// Maximum number of results per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`

	// Whether to include archived custom actions.
	Archived *bool `json:"archived,omitempty"`
}

// Postautomationv4actionsAppIdCreateJSONBody defines parameters for Postautomationv4actionsAppIdCreate.
type Postautomationv4actionsAppIdCreateJSONBody ExtensionActionDefinitionInput

// Getautomationv4actionsAppIdDefinitionIdGetByIdParams defines parameters for Getautomationv4actionsAppIdDefinitionIdGetById.
type Getautomationv4actionsAppIdDefinitionIdGetByIdParams struct {
	// Whether to include archived custom actions.
	Archived *bool `json:"archived,omitempty"`
}

// Patchautomationv4actionsAppIdDefinitionIdUpdateJSONBody defines parameters for Patchautomationv4actionsAppIdDefinitionIdUpdate.
type Patchautomationv4actionsAppIdDefinitionIdUpdateJSONBody ExtensionActionDefinitionPatch

// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType defines parameters for Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType.
type Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType string

// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType defines parameters for Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType.
type Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType string

// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType defines parameters for Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionType.
type Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType string

// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType defines parameters for Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive.
type Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType string

// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType defines parameters for Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById.
type Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType string

// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType defines parameters for Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplace.
type Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType string

// Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams defines parameters for Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage.
type Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams struct {
	// Maximum number of results per page.
	Limit *int32 `json:"limit,omitempty"`

	// The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.
	After *string `json:"after,omitempty"`
}

// Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody defines body for Postautomationv4actionscallbackscompleteCompleteBatch for application/json ContentType.
type Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody Postautomationv4actionscallbackscompleteCompleteBatchJSONBody

// Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody defines body for Postautomationv4actionscallbacksCallbackIdcompleteComplete for application/json ContentType.
type Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONBody

// Postautomationv4actionsAppIdCreateJSONRequestBody defines body for Postautomationv4actionsAppIdCreate for application/json ContentType.
type Postautomationv4actionsAppIdCreateJSONRequestBody Postautomationv4actionsAppIdCreateJSONBody

// Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody defines body for Patchautomationv4actionsAppIdDefinitionIdUpdate for application/json ContentType.
type Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody Patchautomationv4actionsAppIdDefinitionIdUpdateJSONBody

// Getter for additional properties for ActionLabels_InputFieldDescriptions. Returns the specified
// element and whether it was found
func (a ActionLabels_InputFieldDescriptions) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActionLabels_InputFieldDescriptions
func (a *ActionLabels_InputFieldDescriptions) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActionLabels_InputFieldDescriptions to handle AdditionalProperties
func (a *ActionLabels_InputFieldDescriptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActionLabels_InputFieldDescriptions to handle AdditionalProperties
func (a ActionLabels_InputFieldDescriptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ActionLabels_InputFieldLabels. Returns the specified
// element and whether it was found
func (a ActionLabels_InputFieldLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ActionLabels_InputFieldLabels
func (a *ActionLabels_InputFieldLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ActionLabels_InputFieldLabels to handle AdditionalProperties
func (a *ActionLabels_InputFieldLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ActionLabels_InputFieldLabels to handle AdditionalProperties
func (a ActionLabels_InputFieldLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CallbackCompletionBatchRequest_OutputFields. Returns the specified
// element and whether it was found
func (a CallbackCompletionBatchRequest_OutputFields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CallbackCompletionBatchRequest_OutputFields
func (a *CallbackCompletionBatchRequest_OutputFields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CallbackCompletionBatchRequest_OutputFields to handle AdditionalProperties
func (a *CallbackCompletionBatchRequest_OutputFields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CallbackCompletionBatchRequest_OutputFields to handle AdditionalProperties
func (a CallbackCompletionBatchRequest_OutputFields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CallbackCompletionRequest_OutputFields. Returns the specified
// element and whether it was found
func (a CallbackCompletionRequest_OutputFields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CallbackCompletionRequest_OutputFields
func (a *CallbackCompletionRequest_OutputFields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CallbackCompletionRequest_OutputFields to handle AdditionalProperties
func (a *CallbackCompletionRequest_OutputFields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CallbackCompletionRequest_OutputFields to handle AdditionalProperties
func (a CallbackCompletionRequest_OutputFields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtensionActionDefinition_Labels. Returns the specified
// element and whether it was found
func (a ExtensionActionDefinition_Labels) Get(fieldName string) (value ActionLabels, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtensionActionDefinition_Labels
func (a *ExtensionActionDefinition_Labels) Set(fieldName string, value ActionLabels) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ActionLabels)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtensionActionDefinition_Labels to handle AdditionalProperties
func (a *ExtensionActionDefinition_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ActionLabels)
		for fieldName, fieldBuf := range object {
			var fieldVal ActionLabels
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtensionActionDefinition_Labels to handle AdditionalProperties
func (a ExtensionActionDefinition_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtensionActionDefinitionInput_Labels. Returns the specified
// element and whether it was found
func (a ExtensionActionDefinitionInput_Labels) Get(fieldName string) (value ActionLabels, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtensionActionDefinitionInput_Labels
func (a *ExtensionActionDefinitionInput_Labels) Set(fieldName string, value ActionLabels) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ActionLabels)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtensionActionDefinitionInput_Labels to handle AdditionalProperties
func (a *ExtensionActionDefinitionInput_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ActionLabels)
		for fieldName, fieldBuf := range object {
			var fieldVal ActionLabels
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtensionActionDefinitionInput_Labels to handle AdditionalProperties
func (a ExtensionActionDefinitionInput_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExtensionActionDefinitionPatch_Labels. Returns the specified
// element and whether it was found
func (a ExtensionActionDefinitionPatch_Labels) Get(fieldName string) (value ActionLabels, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExtensionActionDefinitionPatch_Labels
func (a *ExtensionActionDefinitionPatch_Labels) Set(fieldName string, value ActionLabels) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ActionLabels)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExtensionActionDefinitionPatch_Labels to handle AdditionalProperties
func (a *ExtensionActionDefinitionPatch_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ActionLabels)
		for fieldName, fieldBuf := range object {
			var fieldVal ActionLabels
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExtensionActionDefinitionPatch_Labels to handle AdditionalProperties
func (a ExtensionActionDefinitionPatch_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postautomationv4actionscallbackscompleteCompleteBatch request with any body
	Postautomationv4actionscallbackscompleteCompleteBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postautomationv4actionscallbackscompleteCompleteBatch(ctx context.Context, body Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postautomationv4actionscallbacksCallbackIdcompleteComplete request with any body
	Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBody(ctx context.Context, callbackId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postautomationv4actionscallbacksCallbackIdcompleteComplete(ctx context.Context, callbackId string, body Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdGetPage request
	Getautomationv4actionsAppIdGetPage(ctx context.Context, appId int32, params *Getautomationv4actionsAppIdGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postautomationv4actionsAppIdCreate request with any body
	Postautomationv4actionsAppIdCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postautomationv4actionsAppIdCreate(ctx context.Context, appId int32, body Postautomationv4actionsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteautomationv4actionsAppIdDefinitionIdArchive request
	Deleteautomationv4actionsAppIdDefinitionIdArchive(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdGetById(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchautomationv4actionsAppIdDefinitionIdUpdate request with any body
	Patchautomationv4actionsAppIdDefinitionIdUpdateWithBody(ctx context.Context, appId int32, definitionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchautomationv4actionsAppIdDefinitionIdUpdate(ctx context.Context, appId int32, definitionId string, body Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage request
	Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType request
	Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType request
	Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionType request with any body
	Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBody(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive request
	Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplace request with any body
	Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBody(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType, functionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage request
	Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById(ctx context.Context, appId int32, definitionId string, revisionId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postautomationv4actionscallbackscompleteCompleteBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionscallbackscompleteCompleteBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postautomationv4actionscallbackscompleteCompleteBatch(ctx context.Context, body Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionscallbackscompleteCompleteBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBody(ctx context.Context, callbackId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequestWithBody(c.Server, callbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postautomationv4actionscallbacksCallbackIdcompleteComplete(ctx context.Context, callbackId string, body Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequest(c.Server, callbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdGetPage(ctx context.Context, appId int32, params *Getautomationv4actionsAppIdGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdGetPageRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postautomationv4actionsAppIdCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionsAppIdCreateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postautomationv4actionsAppIdCreate(ctx context.Context, appId int32, body Postautomationv4actionsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostautomationv4actionsAppIdCreateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteautomationv4actionsAppIdDefinitionIdArchive(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteautomationv4actionsAppIdDefinitionIdArchiveRequest(c.Server, appId, definitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdGetById(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdGetByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdGetByIdRequest(c.Server, appId, definitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchautomationv4actionsAppIdDefinitionIdUpdateWithBody(ctx context.Context, appId int32, definitionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequestWithBody(c.Server, appId, definitionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchautomationv4actionsAppIdDefinitionIdUpdate(ctx context.Context, appId int32, definitionId string, body Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequest(c.Server, appId, definitionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageRequest(c.Server, appId, definitionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeRequest(c.Server, appId, definitionId, functionType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeRequest(c.Server, appId, definitionId, functionType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBody(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeRequestWithBody(c.Server, appId, definitionId, functionType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveRequest(c.Server, appId, definitionId, functionType, functionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdRequest(c.Server, appId, definitionId, functionType, functionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBody(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType, functionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceRequestWithBody(c.Server, appId, definitionId, functionType, functionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageRequest(c.Server, appId, definitionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById(ctx context.Context, appId int32, definitionId string, revisionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdRequest(c.Server, appId, definitionId, revisionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostautomationv4actionscallbackscompleteCompleteBatchRequest calls the generic Postautomationv4actionscallbackscompleteCompleteBatch builder with application/json body
func NewPostautomationv4actionscallbackscompleteCompleteBatchRequest(server string, body Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostautomationv4actionscallbackscompleteCompleteBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostautomationv4actionscallbackscompleteCompleteBatchRequestWithBody generates requests for Postautomationv4actionscallbackscompleteCompleteBatch with any type of body
func NewPostautomationv4actionscallbackscompleteCompleteBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/callbacks/complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequest calls the generic Postautomationv4actionscallbacksCallbackIdcompleteComplete builder with application/json body
func NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequest(server string, callbackId string, body Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequestWithBody(server, callbackId, "application/json", bodyReader)
}

// NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequestWithBody generates requests for Postautomationv4actionscallbacksCallbackIdcompleteComplete with any type of body
func NewPostautomationv4actionscallbacksCallbackIdcompleteCompleteRequestWithBody(server string, callbackId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "callbackId", runtime.ParamLocationPath, callbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/callbacks/%s/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetautomationv4actionsAppIdGetPageRequest generates requests for Getautomationv4actionsAppIdGetPage
func NewGetautomationv4actionsAppIdGetPageRequest(server string, appId int32, params *Getautomationv4actionsAppIdGetPageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostautomationv4actionsAppIdCreateRequest calls the generic Postautomationv4actionsAppIdCreate builder with application/json body
func NewPostautomationv4actionsAppIdCreateRequest(server string, appId int32, body Postautomationv4actionsAppIdCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostautomationv4actionsAppIdCreateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostautomationv4actionsAppIdCreateRequestWithBody generates requests for Postautomationv4actionsAppIdCreate with any type of body
func NewPostautomationv4actionsAppIdCreateRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteautomationv4actionsAppIdDefinitionIdArchiveRequest generates requests for Deleteautomationv4actionsAppIdDefinitionIdArchive
func NewDeleteautomationv4actionsAppIdDefinitionIdArchiveRequest(server string, appId int32, definitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdGetByIdRequest generates requests for Getautomationv4actionsAppIdDefinitionIdGetById
func NewGetautomationv4actionsAppIdDefinitionIdGetByIdRequest(server string, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdGetByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Archived != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequest calls the generic Patchautomationv4actionsAppIdDefinitionIdUpdate builder with application/json body
func NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequest(server string, appId int32, definitionId string, body Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequestWithBody(server, appId, definitionId, "application/json", bodyReader)
}

// NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequestWithBody generates requests for Patchautomationv4actionsAppIdDefinitionIdUpdate with any type of body
func NewPatchautomationv4actionsAppIdDefinitionIdUpdateRequestWithBody(server string, appId int32, definitionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageRequest generates requests for Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage
func NewGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageRequest(server string, appId int32, definitionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeRequest generates requests for Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType
func NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeRequest(server string, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeRequest generates requests for Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType
func NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeRequest(server string, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeRequestWithBody generates requests for Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionType with any type of body
func NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeRequestWithBody(server string, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveRequest generates requests for Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive
func NewDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveRequest(server string, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType, functionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "functionId", runtime.ParamLocationPath, functionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdRequest generates requests for Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById
func NewGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdRequest(server string, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType, functionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "functionId", runtime.ParamLocationPath, functionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceRequestWithBody generates requests for Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplace with any type of body
func NewPutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceRequestWithBody(server string, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType, functionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "functionType", runtime.ParamLocationPath, functionType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "functionId", runtime.ParamLocationPath, functionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/functions/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageRequest generates requests for Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage
func NewGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageRequest(server string, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/revisions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdRequest generates requests for Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById
func NewGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdRequest(server string, appId int32, definitionId string, revisionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "definitionId", runtime.ParamLocationPath, definitionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revisionId", runtime.ParamLocationPath, revisionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/automation/v4/actions/%s/%s/revisions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postautomationv4actionscallbackscompleteCompleteBatch request with any body
	Postautomationv4actionscallbackscompleteCompleteBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbackscompleteCompleteBatchResponse, error)
	Postautomationv4actionscallbackscompleteCompleteBatchWithResponse(ctx context.Context, body Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbackscompleteCompleteBatchResponse, error)

	// Postautomationv4actionscallbacksCallbackIdcompleteComplete request with any body
	Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBodyWithResponse(ctx context.Context, callbackId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse, error)
	Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithResponse(ctx context.Context, callbackId string, body Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse, error)

	// Getautomationv4actionsAppIdGetPage request
	Getautomationv4actionsAppIdGetPageWithResponse(ctx context.Context, appId int32, params *Getautomationv4actionsAppIdGetPageParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdGetPageResponse, error)

	// Postautomationv4actionsAppIdCreate request with any body
	Postautomationv4actionsAppIdCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionsAppIdCreateResponse, error)
	Postautomationv4actionsAppIdCreateWithResponse(ctx context.Context, appId int32, body Postautomationv4actionsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionsAppIdCreateResponse, error)

	// Deleteautomationv4actionsAppIdDefinitionIdArchive request
	Deleteautomationv4actionsAppIdDefinitionIdArchiveWithResponse(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdGetByIdResponse, error)

	// Patchautomationv4actionsAppIdDefinitionIdUpdate request with any body
	Patchautomationv4actionsAppIdDefinitionIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchautomationv4actionsAppIdDefinitionIdUpdateResponse, error)
	Patchautomationv4actionsAppIdDefinitionIdUpdateWithResponse(ctx context.Context, appId int32, definitionId string, body Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchautomationv4actionsAppIdDefinitionIdUpdateResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage request
	Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageWithResponse(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse, error)

	// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType request
	Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeWithResponse(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType request
	Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeWithResponse(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse, error)

	// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionType request with any body
	Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse, error)

	// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive request
	Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveWithResponse(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse, error)

	// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplace request with any body
	Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType, functionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage request
	Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageWithResponse(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse, error)

	// Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById request
	Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, revisionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse, error)
}

type Postautomationv4actionscallbackscompleteCompleteBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postautomationv4actionscallbackscompleteCompleteBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postautomationv4actionscallbackscompleteCompleteBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseExtensionActionDefinitionForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postautomationv4actionsAppIdCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExtensionActionDefinition
}

// Status returns HTTPResponse.Status
func (r Postautomationv4actionsAppIdCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postautomationv4actionsAppIdCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtensionActionDefinition
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchautomationv4actionsAppIdDefinitionIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtensionActionDefinition
}

// Status returns HTTPResponse.Status
func (r Patchautomationv4actionsAppIdDefinitionIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchautomationv4actionsAppIdDefinitionIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseActionFunctionIdentifierNoPaging
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionFunction
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionFunctionIdentifier
}

// Status returns HTTPResponse.Status
func (r Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionFunction
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionFunctionIdentifier
}

// Status returns HTTPResponse.Status
func (r Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseActionRevisionForwardPaging
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionRevision
}

// Status returns HTTPResponse.Status
func (r Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postautomationv4actionscallbackscompleteCompleteBatchWithBodyWithResponse request with arbitrary body returning *Postautomationv4actionscallbackscompleteCompleteBatchResponse
func (c *ClientWithResponses) Postautomationv4actionscallbackscompleteCompleteBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbackscompleteCompleteBatchResponse, error) {
	rsp, err := c.Postautomationv4actionscallbackscompleteCompleteBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionscallbackscompleteCompleteBatchResponse(rsp)
}

func (c *ClientWithResponses) Postautomationv4actionscallbackscompleteCompleteBatchWithResponse(ctx context.Context, body Postautomationv4actionscallbackscompleteCompleteBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbackscompleteCompleteBatchResponse, error) {
	rsp, err := c.Postautomationv4actionscallbackscompleteCompleteBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionscallbackscompleteCompleteBatchResponse(rsp)
}

// Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBodyWithResponse request with arbitrary body returning *Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse
func (c *ClientWithResponses) Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBodyWithResponse(ctx context.Context, callbackId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse, error) {
	rsp, err := c.Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithBody(ctx, callbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionscallbacksCallbackIdcompleteCompleteResponse(rsp)
}

func (c *ClientWithResponses) Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithResponse(ctx context.Context, callbackId string, body Postautomationv4actionscallbacksCallbackIdcompleteCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse, error) {
	rsp, err := c.Postautomationv4actionscallbacksCallbackIdcompleteComplete(ctx, callbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionscallbacksCallbackIdcompleteCompleteResponse(rsp)
}

// Getautomationv4actionsAppIdGetPageWithResponse request returning *Getautomationv4actionsAppIdGetPageResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdGetPageWithResponse(ctx context.Context, appId int32, params *Getautomationv4actionsAppIdGetPageParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdGetPageResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdGetPage(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdGetPageResponse(rsp)
}

// Postautomationv4actionsAppIdCreateWithBodyWithResponse request with arbitrary body returning *Postautomationv4actionsAppIdCreateResponse
func (c *ClientWithResponses) Postautomationv4actionsAppIdCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postautomationv4actionsAppIdCreateResponse, error) {
	rsp, err := c.Postautomationv4actionsAppIdCreateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionsAppIdCreateResponse(rsp)
}

func (c *ClientWithResponses) Postautomationv4actionsAppIdCreateWithResponse(ctx context.Context, appId int32, body Postautomationv4actionsAppIdCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postautomationv4actionsAppIdCreateResponse, error) {
	rsp, err := c.Postautomationv4actionsAppIdCreate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostautomationv4actionsAppIdCreateResponse(rsp)
}

// Deleteautomationv4actionsAppIdDefinitionIdArchiveWithResponse request returning *Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse
func (c *ClientWithResponses) Deleteautomationv4actionsAppIdDefinitionIdArchiveWithResponse(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse, error) {
	rsp, err := c.Deleteautomationv4actionsAppIdDefinitionIdArchive(ctx, appId, definitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteautomationv4actionsAppIdDefinitionIdArchiveResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdGetByIdWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdGetByIdResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdGetByIdParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdGetByIdResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdGetById(ctx, appId, definitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdGetByIdResponse(rsp)
}

// Patchautomationv4actionsAppIdDefinitionIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchautomationv4actionsAppIdDefinitionIdUpdateResponse
func (c *ClientWithResponses) Patchautomationv4actionsAppIdDefinitionIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchautomationv4actionsAppIdDefinitionIdUpdateResponse, error) {
	rsp, err := c.Patchautomationv4actionsAppIdDefinitionIdUpdateWithBody(ctx, appId, definitionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchautomationv4actionsAppIdDefinitionIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchautomationv4actionsAppIdDefinitionIdUpdateWithResponse(ctx context.Context, appId int32, definitionId string, body Patchautomationv4actionsAppIdDefinitionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchautomationv4actionsAppIdDefinitionIdUpdateResponse, error) {
	rsp, err := c.Patchautomationv4actionsAppIdDefinitionIdUpdate(ctx, appId, definitionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchautomationv4actionsAppIdDefinitionIdUpdateResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageWithResponse(ctx context.Context, appId int32, definitionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdfunctionsGetPage(ctx, appId, definitionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse(rsp)
}

// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeWithResponse request returning *Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse
func (c *ClientWithResponses) Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeWithResponse(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse, error) {
	rsp, err := c.Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionType(ctx, appId, definitionId, functionType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeWithResponse(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeParamsFunctionType, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionType(ctx, appId, definitionId, functionType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse(rsp)
}

// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBodyWithResponse request with arbitrary body returning *Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse
func (c *ClientWithResponses) Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeParamsFunctionType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse, error) {
	rsp, err := c.Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithBody(ctx, appId, definitionId, functionType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse(rsp)
}

// Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveWithResponse request returning *Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse
func (c *ClientWithResponses) Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveWithResponse(ctx context.Context, appId int32, definitionId string, functionType Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse, error) {
	rsp, err := c.Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchive(ctx, appId, definitionId, functionType, functionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, functionType Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdParamsFunctionType, functionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetById(ctx, appId, definitionId, functionType, functionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse(rsp)
}

// Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBodyWithResponse request with arbitrary body returning *Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse
func (c *ClientWithResponses) Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBodyWithResponse(ctx context.Context, appId int32, definitionId string, functionType Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceParamsFunctionType, functionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse, error) {
	rsp, err := c.Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithBody(ctx, appId, definitionId, functionType, functionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageWithResponse(ctx context.Context, appId int32, definitionId string, params *Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageParams, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdrevisionsGetPage(ctx, appId, definitionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse(rsp)
}

// Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdWithResponse request returning *Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse
func (c *ClientWithResponses) Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdWithResponse(ctx context.Context, appId int32, definitionId string, revisionId string, reqEditors ...RequestEditorFn) (*Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse, error) {
	rsp, err := c.Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetById(ctx, appId, definitionId, revisionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse(rsp)
}

// ParsePostautomationv4actionscallbackscompleteCompleteBatchResponse parses an HTTP response from a Postautomationv4actionscallbackscompleteCompleteBatchWithResponse call
func ParsePostautomationv4actionscallbackscompleteCompleteBatchResponse(rsp *http.Response) (*Postautomationv4actionscallbackscompleteCompleteBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postautomationv4actionscallbackscompleteCompleteBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostautomationv4actionscallbacksCallbackIdcompleteCompleteResponse parses an HTTP response from a Postautomationv4actionscallbacksCallbackIdcompleteCompleteWithResponse call
func ParsePostautomationv4actionscallbacksCallbackIdcompleteCompleteResponse(rsp *http.Response) (*Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postautomationv4actionscallbacksCallbackIdcompleteCompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdGetPageResponse parses an HTTP response from a Getautomationv4actionsAppIdGetPageWithResponse call
func ParseGetautomationv4actionsAppIdGetPageResponse(rsp *http.Response) (*Getautomationv4actionsAppIdGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseExtensionActionDefinitionForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostautomationv4actionsAppIdCreateResponse parses an HTTP response from a Postautomationv4actionsAppIdCreateWithResponse call
func ParsePostautomationv4actionsAppIdCreateResponse(rsp *http.Response) (*Postautomationv4actionsAppIdCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postautomationv4actionsAppIdCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExtensionActionDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteautomationv4actionsAppIdDefinitionIdArchiveResponse parses an HTTP response from a Deleteautomationv4actionsAppIdDefinitionIdArchiveWithResponse call
func ParseDeleteautomationv4actionsAppIdDefinitionIdArchiveResponse(rsp *http.Response) (*Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteautomationv4actionsAppIdDefinitionIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdGetByIdResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdGetByIdWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdGetByIdResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtensionActionDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchautomationv4actionsAppIdDefinitionIdUpdateResponse parses an HTTP response from a Patchautomationv4actionsAppIdDefinitionIdUpdateWithResponse call
func ParsePatchautomationv4actionsAppIdDefinitionIdUpdateResponse(rsp *http.Response) (*Patchautomationv4actionsAppIdDefinitionIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchautomationv4actionsAppIdDefinitionIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtensionActionDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdfunctionsGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseActionFunctionIdentifierNoPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse parses an HTTP response from a Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeWithResponse call
func ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse(rsp *http.Response) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeArchiveByFunctionTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeGetByFunctionTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse parses an HTTP response from a Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeWithResponse call
func ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse(rsp *http.Response) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeCreateOrReplaceByFunctionTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionFunctionIdentifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse parses an HTTP response from a Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveWithResponse call
func ParseDeleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse(rsp *http.Response) (*Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionFunction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse parses an HTTP response from a Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceWithResponse call
func ParsePutautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse(rsp *http.Response) (*Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putautomationv4actionsAppIdDefinitionIdfunctionsFunctionTypeFunctionIdCreateOrReplaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionFunctionIdentifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdrevisionsGetPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseActionRevisionForwardPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse parses an HTTP response from a Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdWithResponse call
func ParseGetautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse(rsp *http.Response) (*Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getautomationv4actionsAppIdDefinitionIdrevisionsRevisionIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionRevision
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
