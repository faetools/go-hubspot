// Package webhooks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package webhooks

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes = "hapikey.Scopes"
)

// Defines values for BatchResponseSubscriptionResponseStatus.
const (
	BatchResponseSubscriptionResponseStatusCANCELED BatchResponseSubscriptionResponseStatus = "CANCELED"

	BatchResponseSubscriptionResponseStatusCOMPLETE BatchResponseSubscriptionResponseStatus = "COMPLETE"

	BatchResponseSubscriptionResponseStatusPENDING BatchResponseSubscriptionResponseStatus = "PENDING"

	BatchResponseSubscriptionResponseStatusPROCESSING BatchResponseSubscriptionResponseStatus = "PROCESSING"
)

// Defines values for BatchResponseSubscriptionResponseWithErrorsStatus.
const (
	BatchResponseSubscriptionResponseWithErrorsStatusCANCELED BatchResponseSubscriptionResponseWithErrorsStatus = "CANCELED"

	BatchResponseSubscriptionResponseWithErrorsStatusCOMPLETE BatchResponseSubscriptionResponseWithErrorsStatus = "COMPLETE"

	BatchResponseSubscriptionResponseWithErrorsStatusPENDING BatchResponseSubscriptionResponseWithErrorsStatus = "PENDING"

	BatchResponseSubscriptionResponseWithErrorsStatusPROCESSING BatchResponseSubscriptionResponseWithErrorsStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for SubscriptionCreateRequestEventType.
const (
	SubscriptionCreateRequestEventTypeCompanyCreation SubscriptionCreateRequestEventType = "company.creation"

	SubscriptionCreateRequestEventTypeCompanyDeletion SubscriptionCreateRequestEventType = "company.deletion"

	SubscriptionCreateRequestEventTypeCompanyPropertyChange SubscriptionCreateRequestEventType = "company.propertyChange"

	SubscriptionCreateRequestEventTypeContactCreation SubscriptionCreateRequestEventType = "contact.creation"

	SubscriptionCreateRequestEventTypeContactDeletion SubscriptionCreateRequestEventType = "contact.deletion"

	SubscriptionCreateRequestEventTypeContactPrivacyDeletion SubscriptionCreateRequestEventType = "contact.privacyDeletion"

	SubscriptionCreateRequestEventTypeContactPropertyChange SubscriptionCreateRequestEventType = "contact.propertyChange"

	SubscriptionCreateRequestEventTypeDealCreation SubscriptionCreateRequestEventType = "deal.creation"

	SubscriptionCreateRequestEventTypeDealDeletion SubscriptionCreateRequestEventType = "deal.deletion"

	SubscriptionCreateRequestEventTypeDealPropertyChange SubscriptionCreateRequestEventType = "deal.propertyChange"
)

// Defines values for SubscriptionResponseEventType.
const (
	SubscriptionResponseEventTypeCompanyCreation SubscriptionResponseEventType = "company.creation"

	SubscriptionResponseEventTypeCompanyDeletion SubscriptionResponseEventType = "company.deletion"

	SubscriptionResponseEventTypeCompanyPropertyChange SubscriptionResponseEventType = "company.propertyChange"

	SubscriptionResponseEventTypeContactCreation SubscriptionResponseEventType = "contact.creation"

	SubscriptionResponseEventTypeContactDeletion SubscriptionResponseEventType = "contact.deletion"

	SubscriptionResponseEventTypeContactPrivacyDeletion SubscriptionResponseEventType = "contact.privacyDeletion"

	SubscriptionResponseEventTypeContactPropertyChange SubscriptionResponseEventType = "contact.propertyChange"

	SubscriptionResponseEventTypeDealCreation SubscriptionResponseEventType = "deal.creation"

	SubscriptionResponseEventTypeDealDeletion SubscriptionResponseEventType = "deal.deletion"

	SubscriptionResponseEventTypeDealPropertyChange SubscriptionResponseEventType = "deal.propertyChange"
)

// Defines values for ThrottlingSettingsPeriod.
const (
	ThrottlingSettingsPeriodROLLINGMINUTE ThrottlingSettingsPeriod = "ROLLING_MINUTE"

	ThrottlingSettingsPeriodSECONDLY ThrottlingSettingsPeriod = "SECONDLY"
)

// BatchInputSubscriptionBatchUpdateRequest defines model for BatchInputSubscriptionBatchUpdateRequest.
type BatchInputSubscriptionBatchUpdateRequest struct {
	Inputs []SubscriptionBatchUpdateRequest `json:"inputs"`
}

// BatchResponseSubscriptionResponse defines model for BatchResponseSubscriptionResponse.
type BatchResponseSubscriptionResponse struct {
	CompletedAt time.Time                                `json:"completedAt"`
	Links       *BatchResponseSubscriptionResponse_Links `json:"links,omitempty"`
	RequestedAt *time.Time                               `json:"requestedAt,omitempty"`
	Results     []SubscriptionResponse                   `json:"results"`
	StartedAt   time.Time                                `json:"startedAt"`
	Status      BatchResponseSubscriptionResponseStatus  `json:"status"`
}

// BatchResponseSubscriptionResponse_Links defines model for BatchResponseSubscriptionResponse.Links.
type BatchResponseSubscriptionResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSubscriptionResponseStatus defines model for BatchResponseSubscriptionResponse.Status.
type BatchResponseSubscriptionResponseStatus string

// BatchResponseSubscriptionResponseWithErrors defines model for BatchResponseSubscriptionResponseWithErrors.
type BatchResponseSubscriptionResponseWithErrors struct {
	CompletedAt time.Time                                          `json:"completedAt"`
	Errors      *[]StandardError                                   `json:"errors,omitempty"`
	Links       *BatchResponseSubscriptionResponseWithErrors_Links `json:"links,omitempty"`
	NumErrors   *int32                                             `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                         `json:"requestedAt,omitempty"`
	Results     []SubscriptionResponse                             `json:"results"`
	StartedAt   time.Time                                          `json:"startedAt"`
	Status      BatchResponseSubscriptionResponseWithErrorsStatus  `json:"status"`
}

// BatchResponseSubscriptionResponseWithErrors_Links defines model for BatchResponseSubscriptionResponseWithErrors.Links.
type BatchResponseSubscriptionResponseWithErrors_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseSubscriptionResponseWithErrorsStatus defines model for BatchResponseSubscriptionResponseWithErrors.Status.
type BatchResponseSubscriptionResponseWithErrorsStatus string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// New or updated webhook settings for an app.
type SettingsChangeRequest struct {
	// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
	TargetUrl string `json:"targetUrl"`

	// Configuration details for webhook throttling.
	Throttling ThrottlingSettings `json:"throttling"`
}

// Webhook settings for an app.
type SettingsResponse struct {
	// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
	CreatedAt time.Time `json:"createdAt"`

	// A publicly available URL for Hubspot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
	TargetUrl string `json:"targetUrl"`

	// Configuration details for webhook throttling.
	Throttling ThrottlingSettings `json:"throttling"`

	// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// SubscriptionBatchUpdateRequest defines model for SubscriptionBatchUpdateRequest.
type SubscriptionBatchUpdateRequest struct {
	Active bool  `json:"active"`
	Id     int32 `json:"id"`
}

// New webhook settings for an app.
type SubscriptionCreateRequest struct {
	// Determines if the subscription is active or paused. Defaults to false.
	Active *bool `json:"active,omitempty"`

	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionCreateRequestEventType `json:"eventType"`

	// The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`
}

// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionCreateRequestEventType string

// List of event subscriptions for your app
type SubscriptionListResponse struct {
	// List of event subscriptions for your app
	Results []SubscriptionResponse `json:"results"`
}

// Updated details for the subscription.
type SubscriptionPatchRequest struct {
	// Determines if the subscription is active or paused.
	Active *bool `json:"active,omitempty"`
}

// Complete details for an event subscription.
type SubscriptionResponse struct {
	// Determines if the subscription is active or paused.
	Active bool `json:"active"`

	// When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
	CreatedAt time.Time `json:"createdAt"`

	// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
	EventType SubscriptionResponseEventType `json:"eventType"`

	// The unique ID of the subscription.
	Id string `json:"id"`

	// The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`.
	PropertyName *string `json:"propertyName,omitempty"`

	// When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
type SubscriptionResponseEventType string

// Configuration details for webhook throttling.
type ThrottlingSettings struct {
	// The maximum number of HTTP requests HubSpot will attempt to make to your app in a given time frame determined by `period`.
	MaxConcurrentRequests int32 `json:"maxConcurrentRequests"`

	// Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
	Period ThrottlingSettingsPeriod `json:"period"`
}

// Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
type ThrottlingSettingsPeriod string

// Putwebhooksv3AppIdsettingsConfigureJSONBody defines parameters for Putwebhooksv3AppIdsettingsConfigure.
type Putwebhooksv3AppIdsettingsConfigureJSONBody SettingsChangeRequest

// Postwebhooksv3AppIdsubscriptionsCreateJSONBody defines parameters for Postwebhooksv3AppIdsubscriptionsCreate.
type Postwebhooksv3AppIdsubscriptionsCreateJSONBody SubscriptionCreateRequest

// Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONBody defines parameters for Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch.
type Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONBody BatchInputSubscriptionBatchUpdateRequest

// Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONBody defines parameters for Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate.
type Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONBody SubscriptionPatchRequest

// Putwebhooksv3AppIdsettingsConfigureJSONRequestBody defines body for Putwebhooksv3AppIdsettingsConfigure for application/json ContentType.
type Putwebhooksv3AppIdsettingsConfigureJSONRequestBody Putwebhooksv3AppIdsettingsConfigureJSONBody

// Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody defines body for Postwebhooksv3AppIdsubscriptionsCreate for application/json ContentType.
type Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody Postwebhooksv3AppIdsubscriptionsCreateJSONBody

// Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody defines body for Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch for application/json ContentType.
type Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONBody

// Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody defines body for Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate for application/json ContentType.
type Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONBody

// Getter for additional properties for BatchResponseSubscriptionResponse_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSubscriptionResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSubscriptionResponse_Links
func (a *BatchResponseSubscriptionResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSubscriptionResponse_Links to handle AdditionalProperties
func (a *BatchResponseSubscriptionResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSubscriptionResponse_Links to handle AdditionalProperties
func (a BatchResponseSubscriptionResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BatchResponseSubscriptionResponseWithErrors_Links. Returns the specified
// element and whether it was found
func (a BatchResponseSubscriptionResponseWithErrors_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseSubscriptionResponseWithErrors_Links
func (a *BatchResponseSubscriptionResponseWithErrors_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseSubscriptionResponseWithErrors_Links to handle AdditionalProperties
func (a *BatchResponseSubscriptionResponseWithErrors_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseSubscriptionResponseWithErrors_Links to handle AdditionalProperties
func (a BatchResponseSubscriptionResponseWithErrors_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Deletewebhooksv3AppIdsettingsClear request
	Deletewebhooksv3AppIdsettingsClear(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getwebhooksv3AppIdsettingsGetAll request
	Getwebhooksv3AppIdsettingsGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putwebhooksv3AppIdsettingsConfigure request with any body
	Putwebhooksv3AppIdsettingsConfigureWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putwebhooksv3AppIdsettingsConfigure(ctx context.Context, appId int32, body Putwebhooksv3AppIdsettingsConfigureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getwebhooksv3AppIdsubscriptionsGetAll request
	Getwebhooksv3AppIdsubscriptionsGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postwebhooksv3AppIdsubscriptionsCreate request with any body
	Postwebhooksv3AppIdsubscriptionsCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postwebhooksv3AppIdsubscriptionsCreate(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch request with any body
	Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive request
	Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById request
	Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate request with any body
	Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBody(ctx context.Context, appId int32, subscriptionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate(ctx context.Context, appId int32, subscriptionId int32, body Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Deletewebhooksv3AppIdsettingsClear(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletewebhooksv3AppIdsettingsClearRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getwebhooksv3AppIdsettingsGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetwebhooksv3AppIdsettingsGetAllRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putwebhooksv3AppIdsettingsConfigureWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutwebhooksv3AppIdsettingsConfigureRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putwebhooksv3AppIdsettingsConfigure(ctx context.Context, appId int32, body Putwebhooksv3AppIdsettingsConfigureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutwebhooksv3AppIdsettingsConfigureRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getwebhooksv3AppIdsubscriptionsGetAll(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetwebhooksv3AppIdsubscriptionsGetAllRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postwebhooksv3AppIdsubscriptionsCreateWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostwebhooksv3AppIdsubscriptionsCreateRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postwebhooksv3AppIdsubscriptionsCreate(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostwebhooksv3AppIdsubscriptionsCreateRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveRequest(c.Server, appId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdRequest(c.Server, appId, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBody(ctx context.Context, appId int32, subscriptionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequestWithBody(c.Server, appId, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate(ctx context.Context, appId int32, subscriptionId int32, body Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequest(c.Server, appId, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeletewebhooksv3AppIdsettingsClearRequest generates requests for Deletewebhooksv3AppIdsettingsClear
func NewDeletewebhooksv3AppIdsettingsClearRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetwebhooksv3AppIdsettingsGetAllRequest generates requests for Getwebhooksv3AppIdsettingsGetAll
func NewGetwebhooksv3AppIdsettingsGetAllRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutwebhooksv3AppIdsettingsConfigureRequest calls the generic Putwebhooksv3AppIdsettingsConfigure builder with application/json body
func NewPutwebhooksv3AppIdsettingsConfigureRequest(server string, appId int32, body Putwebhooksv3AppIdsettingsConfigureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutwebhooksv3AppIdsettingsConfigureRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPutwebhooksv3AppIdsettingsConfigureRequestWithBody generates requests for Putwebhooksv3AppIdsettingsConfigure with any type of body
func NewPutwebhooksv3AppIdsettingsConfigureRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetwebhooksv3AppIdsubscriptionsGetAllRequest generates requests for Getwebhooksv3AppIdsubscriptionsGetAll
func NewGetwebhooksv3AppIdsubscriptionsGetAllRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostwebhooksv3AppIdsubscriptionsCreateRequest calls the generic Postwebhooksv3AppIdsubscriptionsCreate builder with application/json body
func NewPostwebhooksv3AppIdsubscriptionsCreateRequest(server string, appId int32, body Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostwebhooksv3AppIdsubscriptionsCreateRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostwebhooksv3AppIdsubscriptionsCreateRequestWithBody generates requests for Postwebhooksv3AppIdsubscriptionsCreate with any type of body
func NewPostwebhooksv3AppIdsubscriptionsCreateRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequest calls the generic Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch builder with application/json body
func NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequest(server string, appId int32, body Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequestWithBody generates requests for Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch with any type of body
func NewPostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions/batch/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveRequest generates requests for Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive
func NewDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveRequest(server string, appId int32, subscriptionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdRequest generates requests for Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById
func NewGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdRequest(server string, appId int32, subscriptionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequest calls the generic Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate builder with application/json body
func NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequest(server string, appId int32, subscriptionId int32, body Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequestWithBody(server, appId, subscriptionId, "application/json", bodyReader)
}

// NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequestWithBody generates requests for Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate with any type of body
func NewPatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateRequestWithBody(server string, appId int32, subscriptionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/v3/%s/subscriptions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Deletewebhooksv3AppIdsettingsClear request
	Deletewebhooksv3AppIdsettingsClearWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Deletewebhooksv3AppIdsettingsClearResponse, error)

	// Getwebhooksv3AppIdsettingsGetAll request
	Getwebhooksv3AppIdsettingsGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsettingsGetAllResponse, error)

	// Putwebhooksv3AppIdsettingsConfigure request with any body
	Putwebhooksv3AppIdsettingsConfigureWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putwebhooksv3AppIdsettingsConfigureResponse, error)
	Putwebhooksv3AppIdsettingsConfigureWithResponse(ctx context.Context, appId int32, body Putwebhooksv3AppIdsettingsConfigureJSONRequestBody, reqEditors ...RequestEditorFn) (*Putwebhooksv3AppIdsettingsConfigureResponse, error)

	// Getwebhooksv3AppIdsubscriptionsGetAll request
	Getwebhooksv3AppIdsubscriptionsGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsubscriptionsGetAllResponse, error)

	// Postwebhooksv3AppIdsubscriptionsCreate request with any body
	Postwebhooksv3AppIdsubscriptionsCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsCreateResponse, error)
	Postwebhooksv3AppIdsubscriptionsCreateWithResponse(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsCreateResponse, error)

	// Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch request with any body
	Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse, error)
	Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithResponse(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse, error)

	// Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive request
	Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveWithResponse(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse, error)

	// Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById request
	Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdWithResponse(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse, error)

	// Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate request with any body
	Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, subscriptionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse, error)
	Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithResponse(ctx context.Context, appId int32, subscriptionId int32, body Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse, error)
}

type Deletewebhooksv3AppIdsettingsClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletewebhooksv3AppIdsettingsClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletewebhooksv3AppIdsettingsClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getwebhooksv3AppIdsettingsGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsResponse
}

// Status returns HTTPResponse.Status
func (r Getwebhooksv3AppIdsettingsGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getwebhooksv3AppIdsettingsGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putwebhooksv3AppIdsettingsConfigureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettingsResponse
}

// Status returns HTTPResponse.Status
func (r Putwebhooksv3AppIdsettingsConfigureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putwebhooksv3AppIdsettingsConfigureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getwebhooksv3AppIdsubscriptionsGetAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionListResponse
}

// Status returns HTTPResponse.Status
func (r Getwebhooksv3AppIdsubscriptionsGetAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getwebhooksv3AppIdsubscriptionsGetAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postwebhooksv3AppIdsubscriptionsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubscriptionResponse
}

// Status returns HTTPResponse.Status
func (r Postwebhooksv3AppIdsubscriptionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postwebhooksv3AppIdsubscriptionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseSubscriptionResponse
	JSON207      *BatchResponseSubscriptionResponseWithErrors
}

// Status returns HTTPResponse.Status
func (r Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponse
}

// Status returns HTTPResponse.Status
func (r Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriptionResponse
}

// Status returns HTTPResponse.Status
func (r Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Deletewebhooksv3AppIdsettingsClearWithResponse request returning *Deletewebhooksv3AppIdsettingsClearResponse
func (c *ClientWithResponses) Deletewebhooksv3AppIdsettingsClearWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Deletewebhooksv3AppIdsettingsClearResponse, error) {
	rsp, err := c.Deletewebhooksv3AppIdsettingsClear(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletewebhooksv3AppIdsettingsClearResponse(rsp)
}

// Getwebhooksv3AppIdsettingsGetAllWithResponse request returning *Getwebhooksv3AppIdsettingsGetAllResponse
func (c *ClientWithResponses) Getwebhooksv3AppIdsettingsGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsettingsGetAllResponse, error) {
	rsp, err := c.Getwebhooksv3AppIdsettingsGetAll(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetwebhooksv3AppIdsettingsGetAllResponse(rsp)
}

// Putwebhooksv3AppIdsettingsConfigureWithBodyWithResponse request with arbitrary body returning *Putwebhooksv3AppIdsettingsConfigureResponse
func (c *ClientWithResponses) Putwebhooksv3AppIdsettingsConfigureWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putwebhooksv3AppIdsettingsConfigureResponse, error) {
	rsp, err := c.Putwebhooksv3AppIdsettingsConfigureWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutwebhooksv3AppIdsettingsConfigureResponse(rsp)
}

func (c *ClientWithResponses) Putwebhooksv3AppIdsettingsConfigureWithResponse(ctx context.Context, appId int32, body Putwebhooksv3AppIdsettingsConfigureJSONRequestBody, reqEditors ...RequestEditorFn) (*Putwebhooksv3AppIdsettingsConfigureResponse, error) {
	rsp, err := c.Putwebhooksv3AppIdsettingsConfigure(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutwebhooksv3AppIdsettingsConfigureResponse(rsp)
}

// Getwebhooksv3AppIdsubscriptionsGetAllWithResponse request returning *Getwebhooksv3AppIdsubscriptionsGetAllResponse
func (c *ClientWithResponses) Getwebhooksv3AppIdsubscriptionsGetAllWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsubscriptionsGetAllResponse, error) {
	rsp, err := c.Getwebhooksv3AppIdsubscriptionsGetAll(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetwebhooksv3AppIdsubscriptionsGetAllResponse(rsp)
}

// Postwebhooksv3AppIdsubscriptionsCreateWithBodyWithResponse request with arbitrary body returning *Postwebhooksv3AppIdsubscriptionsCreateResponse
func (c *ClientWithResponses) Postwebhooksv3AppIdsubscriptionsCreateWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsCreateResponse, error) {
	rsp, err := c.Postwebhooksv3AppIdsubscriptionsCreateWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostwebhooksv3AppIdsubscriptionsCreateResponse(rsp)
}

func (c *ClientWithResponses) Postwebhooksv3AppIdsubscriptionsCreateWithResponse(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsCreateResponse, error) {
	rsp, err := c.Postwebhooksv3AppIdsubscriptionsCreate(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostwebhooksv3AppIdsubscriptionsCreateResponse(rsp)
}

// Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBodyWithResponse request with arbitrary body returning *Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse
func (c *ClientWithResponses) Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse, error) {
	rsp, err := c.Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse(rsp)
}

func (c *ClientWithResponses) Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithResponse(ctx context.Context, appId int32, body Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse, error) {
	rsp, err := c.Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatch(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse(rsp)
}

// Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveWithResponse request returning *Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse
func (c *ClientWithResponses) Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveWithResponse(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse, error) {
	rsp, err := c.Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchive(ctx, appId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse(rsp)
}

// Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdWithResponse request returning *Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse
func (c *ClientWithResponses) Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdWithResponse(ctx context.Context, appId int32, subscriptionId int32, reqEditors ...RequestEditorFn) (*Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse, error) {
	rsp, err := c.Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetById(ctx, appId, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse(rsp)
}

// Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBodyWithResponse request with arbitrary body returning *Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse
func (c *ClientWithResponses) Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBodyWithResponse(ctx context.Context, appId int32, subscriptionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse, error) {
	rsp, err := c.Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithBody(ctx, appId, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse(rsp)
}

func (c *ClientWithResponses) Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithResponse(ctx context.Context, appId int32, subscriptionId int32, body Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse, error) {
	rsp, err := c.Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdate(ctx, appId, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse(rsp)
}

// ParseDeletewebhooksv3AppIdsettingsClearResponse parses an HTTP response from a Deletewebhooksv3AppIdsettingsClearWithResponse call
func ParseDeletewebhooksv3AppIdsettingsClearResponse(rsp *http.Response) (*Deletewebhooksv3AppIdsettingsClearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletewebhooksv3AppIdsettingsClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetwebhooksv3AppIdsettingsGetAllResponse parses an HTTP response from a Getwebhooksv3AppIdsettingsGetAllWithResponse call
func ParseGetwebhooksv3AppIdsettingsGetAllResponse(rsp *http.Response) (*Getwebhooksv3AppIdsettingsGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getwebhooksv3AppIdsettingsGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutwebhooksv3AppIdsettingsConfigureResponse parses an HTTP response from a Putwebhooksv3AppIdsettingsConfigureWithResponse call
func ParsePutwebhooksv3AppIdsettingsConfigureResponse(rsp *http.Response) (*Putwebhooksv3AppIdsettingsConfigureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putwebhooksv3AppIdsettingsConfigureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetwebhooksv3AppIdsubscriptionsGetAllResponse parses an HTTP response from a Getwebhooksv3AppIdsubscriptionsGetAllWithResponse call
func ParseGetwebhooksv3AppIdsubscriptionsGetAllResponse(rsp *http.Response) (*Getwebhooksv3AppIdsubscriptionsGetAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getwebhooksv3AppIdsubscriptionsGetAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostwebhooksv3AppIdsubscriptionsCreateResponse parses an HTTP response from a Postwebhooksv3AppIdsubscriptionsCreateWithResponse call
func ParsePostwebhooksv3AppIdsubscriptionsCreateResponse(rsp *http.Response) (*Postwebhooksv3AppIdsubscriptionsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postwebhooksv3AppIdsubscriptionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParsePostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse parses an HTTP response from a Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchWithResponse call
func ParsePostwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse(rsp *http.Response) (*Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postwebhooksv3AppIdsubscriptionsbatchupdateUpdateBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchResponseSubscriptionResponseWithErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	}

	return response, nil
}

// ParseDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse parses an HTTP response from a Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveWithResponse call
func ParseDeletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse(rsp *http.Response) (*Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletewebhooksv3AppIdsubscriptionsSubscriptionIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse parses an HTTP response from a Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdWithResponse call
func ParseGetwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse(rsp *http.Response) (*Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getwebhooksv3AppIdsubscriptionsSubscriptionIdGetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse parses an HTTP response from a Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateWithResponse call
func ParsePatchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse(rsp *http.Response) (*Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchwebhooksv3AppIdsubscriptionsSubscriptionIdUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
