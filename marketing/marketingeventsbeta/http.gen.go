// Package marketingeventsbeta provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package marketingeventsbeta

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Developer_hapikeyScopes = "developer_hapikey.Scopes"
	HapikeyScopes           = "hapikey.Scopes"
	Oauth2_legacyScopes     = "oauth2_legacy.Scopes"
)

// Defines values for BatchResponseMarketingEventPublicDefaultResponseStatus.
const (
	BatchResponseMarketingEventPublicDefaultResponseStatusCANCELED BatchResponseMarketingEventPublicDefaultResponseStatus = "CANCELED"

	BatchResponseMarketingEventPublicDefaultResponseStatusCOMPLETE BatchResponseMarketingEventPublicDefaultResponseStatus = "COMPLETE"

	BatchResponseMarketingEventPublicDefaultResponseStatusPENDING BatchResponseMarketingEventPublicDefaultResponseStatus = "PENDING"

	BatchResponseMarketingEventPublicDefaultResponseStatusPROCESSING BatchResponseMarketingEventPublicDefaultResponseStatus = "PROCESSING"
)

// Defines values for ErrorCategoryHttpStatus.
const (
	ErrorCategoryHttpStatusACCEPTED ErrorCategoryHttpStatus = "ACCEPTED"

	ErrorCategoryHttpStatusALREADYREPORTED ErrorCategoryHttpStatus = "ALREADY_REPORTED"

	ErrorCategoryHttpStatusBADGATEWAY ErrorCategoryHttpStatus = "BAD_GATEWAY"

	ErrorCategoryHttpStatusBADREQUEST ErrorCategoryHttpStatus = "BAD_REQUEST"

	ErrorCategoryHttpStatusCONFLICT ErrorCategoryHttpStatus = "CONFLICT"

	ErrorCategoryHttpStatusCONTINUE ErrorCategoryHttpStatus = "CONTINUE"

	ErrorCategoryHttpStatusCREATED ErrorCategoryHttpStatus = "CREATED"

	ErrorCategoryHttpStatusEXPECTATIONFAILED ErrorCategoryHttpStatus = "EXPECTATION_FAILED"

	ErrorCategoryHttpStatusFAILEDDEPENDENCY ErrorCategoryHttpStatus = "FAILED_DEPENDENCY"

	ErrorCategoryHttpStatusFORBIDDEN ErrorCategoryHttpStatus = "FORBIDDEN"

	ErrorCategoryHttpStatusFOUND ErrorCategoryHttpStatus = "FOUND"

	ErrorCategoryHttpStatusGATEWAYTIMEOUT ErrorCategoryHttpStatus = "GATEWAY_TIMEOUT"

	ErrorCategoryHttpStatusGONE ErrorCategoryHttpStatus = "GONE"

	ErrorCategoryHttpStatusHTTPVERSIONNOTSUPPORTED ErrorCategoryHttpStatus = "HTTP_VERSION_NOT_SUPPORTED"

	ErrorCategoryHttpStatusIMATEAPOT ErrorCategoryHttpStatus = "IM_A_TEAPOT"

	ErrorCategoryHttpStatusIMUSED ErrorCategoryHttpStatus = "IM_USED"

	ErrorCategoryHttpStatusINSUFFICIENTSTORAGE ErrorCategoryHttpStatus = "INSUFFICIENT_STORAGE"

	ErrorCategoryHttpStatusINTERNALSERVERERROR ErrorCategoryHttpStatus = "INTERNAL_SERVER_ERROR"

	ErrorCategoryHttpStatusINTERNALSTALESERVICEDISCOVERY ErrorCategoryHttpStatus = "INTERNAL_STALE_SERVICE_DISCOVERY"

	ErrorCategoryHttpStatusLENGTHREQUIRED ErrorCategoryHttpStatus = "LENGTH_REQUIRED"

	ErrorCategoryHttpStatusLOCKED ErrorCategoryHttpStatus = "LOCKED"

	ErrorCategoryHttpStatusLOOPDETECTED ErrorCategoryHttpStatus = "LOOP_DETECTED"

	ErrorCategoryHttpStatusMETHODNOTALLOWED ErrorCategoryHttpStatus = "METHOD_NOT_ALLOWED"

	ErrorCategoryHttpStatusMISDIRECTEDREQUEST ErrorCategoryHttpStatus = "MISDIRECTED_REQUEST"

	ErrorCategoryHttpStatusMOVEDPERMANENTLY ErrorCategoryHttpStatus = "MOVED_PERMANENTLY"

	ErrorCategoryHttpStatusMULTIPLECHOICES ErrorCategoryHttpStatus = "MULTIPLE_CHOICES"

	ErrorCategoryHttpStatusMULTISTATUS ErrorCategoryHttpStatus = "MULTI_STATUS"

	ErrorCategoryHttpStatusNETWORKAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "NETWORK_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusNOCONTENT ErrorCategoryHttpStatus = "NO_CONTENT"

	ErrorCategoryHttpStatusNONAUTHORITATIVEINFORMATION ErrorCategoryHttpStatus = "NON_AUTHORITATIVE_INFORMATION"

	ErrorCategoryHttpStatusNOTACCEPTABLE ErrorCategoryHttpStatus = "NOT_ACCEPTABLE"

	ErrorCategoryHttpStatusNOTEXTENDED ErrorCategoryHttpStatus = "NOT_EXTENDED"

	ErrorCategoryHttpStatusNOTFOUND ErrorCategoryHttpStatus = "NOT_FOUND"

	ErrorCategoryHttpStatusNOTIMPLEMENTED ErrorCategoryHttpStatus = "NOT_IMPLEMENTED"

	ErrorCategoryHttpStatusNOTMODIFIED ErrorCategoryHttpStatus = "NOT_MODIFIED"

	ErrorCategoryHttpStatusOK ErrorCategoryHttpStatus = "OK"

	ErrorCategoryHttpStatusPARTIALCONTENT ErrorCategoryHttpStatus = "PARTIAL_CONTENT"

	ErrorCategoryHttpStatusPAYMENTREQUIRED ErrorCategoryHttpStatus = "PAYMENT_REQUIRED"

	ErrorCategoryHttpStatusPERMANENTREDIRECT ErrorCategoryHttpStatus = "PERMANENT_REDIRECT"

	ErrorCategoryHttpStatusPRECONDITIONFAILED ErrorCategoryHttpStatus = "PRECONDITION_FAILED"

	ErrorCategoryHttpStatusPRECONDITIONREQUIRED ErrorCategoryHttpStatus = "PRECONDITION_REQUIRED"

	ErrorCategoryHttpStatusPROCESSING ErrorCategoryHttpStatus = "PROCESSING"

	ErrorCategoryHttpStatusPROXYAUTHENTICATIONREQUIRED ErrorCategoryHttpStatus = "PROXY_AUTHENTICATION_REQUIRED"

	ErrorCategoryHttpStatusREQUESTEDRANGENOTSATISFIABLE ErrorCategoryHttpStatus = "REQUESTED_RANGE_NOT_SATISFIABLE"

	ErrorCategoryHttpStatusREQUESTENTITYTOOLARGE ErrorCategoryHttpStatus = "REQUEST_ENTITY_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTHEADERSFIELDSTOOLARGE ErrorCategoryHttpStatus = "REQUEST_HEADERS_FIELDS_TOO_LARGE"

	ErrorCategoryHttpStatusREQUESTTIMEOUT ErrorCategoryHttpStatus = "REQUEST_TIMEOUT"

	ErrorCategoryHttpStatusREQUESTURITOOLONG ErrorCategoryHttpStatus = "REQUEST_URI_TOO_LONG"

	ErrorCategoryHttpStatusRESETCONTENT ErrorCategoryHttpStatus = "RESET_CONTENT"

	ErrorCategoryHttpStatusSEEOTHER ErrorCategoryHttpStatus = "SEE_OTHER"

	ErrorCategoryHttpStatusSERVICEUNAVAILABLE ErrorCategoryHttpStatus = "SERVICE_UNAVAILABLE"

	ErrorCategoryHttpStatusSWITCHINGPROTOCOLS ErrorCategoryHttpStatus = "SWITCHING_PROTOCOLS"

	ErrorCategoryHttpStatusTEMPORARYREDIRECT ErrorCategoryHttpStatus = "TEMPORARY_REDIRECT"

	ErrorCategoryHttpStatusTOOMANYREQUESTS ErrorCategoryHttpStatus = "TOO_MANY_REQUESTS"

	ErrorCategoryHttpStatusUNAUTHORIZED ErrorCategoryHttpStatus = "UNAUTHORIZED"

	ErrorCategoryHttpStatusUNAVAILABLEFORLEGALREASONS ErrorCategoryHttpStatus = "UNAVAILABLE_FOR_LEGAL_REASONS"

	ErrorCategoryHttpStatusUNPROCESSABLEENTITY ErrorCategoryHttpStatus = "UNPROCESSABLE_ENTITY"

	ErrorCategoryHttpStatusUNSUPPORTEDMEDIATYPE ErrorCategoryHttpStatus = "UNSUPPORTED_MEDIA_TYPE"

	ErrorCategoryHttpStatusUPGRADEREQUIRED ErrorCategoryHttpStatus = "UPGRADE_REQUIRED"

	ErrorCategoryHttpStatusUSEPROXY ErrorCategoryHttpStatus = "USE_PROXY"

	ErrorCategoryHttpStatusVARIANTALSONEGOTIATES ErrorCategoryHttpStatus = "VARIANT_ALSO_NEGOTIATES"
)

// Defines values for PropertyValueSource.
const (
	PropertyValueSourceACADEMY PropertyValueSource = "ACADEMY"

	PropertyValueSourceADS PropertyValueSource = "ADS"

	PropertyValueSourceAIGROUP PropertyValueSource = "AI_GROUP"

	PropertyValueSourceANALYTICS PropertyValueSource = "ANALYTICS"

	PropertyValueSourceAPI PropertyValueSource = "API"

	PropertyValueSourceAPPROVALS PropertyValueSource = "APPROVALS"

	PropertyValueSourceASSISTS PropertyValueSource = "ASSISTS"

	PropertyValueSourceASSOCIATIONS PropertyValueSource = "ASSOCIATIONS"

	PropertyValueSourceAUTOMATIONPLATFORM PropertyValueSource = "AUTOMATION_PLATFORM"

	PropertyValueSourceAVATARSSERVICE PropertyValueSource = "AVATARS_SERVICE"

	PropertyValueSourceBATCHUPDATE PropertyValueSource = "BATCH_UPDATE"

	PropertyValueSourceBCCTOCRM PropertyValueSource = "BCC_TO_CRM"

	PropertyValueSourceBEHAVIORALEVENTS PropertyValueSource = "BEHAVIORAL_EVENTS"

	PropertyValueSourceBETASSIGNMENT PropertyValueSource = "BET_ASSIGNMENT"

	PropertyValueSourceBETCRMCONNECTOR PropertyValueSource = "BET_CRM_CONNECTOR"

	PropertyValueSourceBIDEN PropertyValueSource = "BIDEN"

	PropertyValueSourceBOT PropertyValueSource = "BOT"

	PropertyValueSourceCALCULATED PropertyValueSource = "CALCULATED"

	PropertyValueSourceCOMMUNICATOR PropertyValueSource = "COMMUNICATOR"

	PropertyValueSourceCOMPANIES PropertyValueSource = "COMPANIES"

	PropertyValueSourceCOMPANYFAMILIES PropertyValueSource = "COMPANY_FAMILIES"

	PropertyValueSourceCOMPANYINSIGHTS PropertyValueSource = "COMPANY_INSIGHTS"

	PropertyValueSourceCONTACTS PropertyValueSource = "CONTACTS"

	PropertyValueSourceCONTACTSWEB PropertyValueSource = "CONTACTS_WEB"

	PropertyValueSourceCONTENTMEMBERSHIP PropertyValueSource = "CONTENT_MEMBERSHIP"

	PropertyValueSourceCONVERSATIONS PropertyValueSource = "CONVERSATIONS"

	PropertyValueSourceCRMUI PropertyValueSource = "CRM_UI"

	PropertyValueSourceDEALS PropertyValueSource = "DEALS"

	PropertyValueSourceDEFAULT PropertyValueSource = "DEFAULT"

	PropertyValueSourceEMAIL PropertyValueSource = "EMAIL"

	PropertyValueSourceEMAILINTEGRATION PropertyValueSource = "EMAIL_INTEGRATION"

	PropertyValueSourceENGAGEMENTS PropertyValueSource = "ENGAGEMENTS"

	PropertyValueSourceEXTENSION PropertyValueSource = "EXTENSION"

	PropertyValueSourceFORM PropertyValueSource = "FORM"

	PropertyValueSourceFORWARDTOCRM PropertyValueSource = "FORWARD_TO_CRM"

	PropertyValueSourceGMAILINTEGRATION PropertyValueSource = "GMAIL_INTEGRATION"

	PropertyValueSourceGOALS PropertyValueSource = "GOALS"

	PropertyValueSourceHEISENBERG PropertyValueSource = "HEISENBERG"

	PropertyValueSourceIMPORT PropertyValueSource = "IMPORT"

	PropertyValueSourceINTEGRATION PropertyValueSource = "INTEGRATION"

	PropertyValueSourceINTEGRATIONSPLATFORM PropertyValueSource = "INTEGRATIONS_PLATFORM"

	PropertyValueSourceINTEGRATIONSSYNC PropertyValueSource = "INTEGRATIONS_SYNC"

	PropertyValueSourceLEADIN PropertyValueSource = "LEADIN"

	PropertyValueSourceMEETINGS PropertyValueSource = "MEETINGS"

	PropertyValueSourceMERGECOMPANIES PropertyValueSource = "MERGE_COMPANIES"

	PropertyValueSourceMERGECONTACTS PropertyValueSource = "MERGE_CONTACTS"

	PropertyValueSourceMERGEOBJECTS PropertyValueSource = "MERGE_OBJECTS"

	PropertyValueSourceMIGRATION PropertyValueSource = "MIGRATION"

	PropertyValueSourceMOBILEANDROID PropertyValueSource = "MOBILE_ANDROID"

	PropertyValueSourceMOBILEIOS PropertyValueSource = "MOBILE_IOS"

	PropertyValueSourcePAYMENTS PropertyValueSource = "PAYMENTS"

	PropertyValueSourcePIPELINESETTINGS PropertyValueSource = "PIPELINE_SETTINGS"

	PropertyValueSourcePORTALOBJECTSYNC PropertyValueSource = "PORTAL_OBJECT_SYNC"

	PropertyValueSourcePORTALUSERASSOCIATOR PropertyValueSource = "PORTAL_USER_ASSOCIATOR"

	PropertyValueSourcePRESENTATIONS PropertyValueSource = "PRESENTATIONS"

	PropertyValueSourcePROPERTYSETTINGS PropertyValueSource = "PROPERTY_SETTINGS"

	PropertyValueSourceQUOTAS PropertyValueSource = "QUOTAS"

	PropertyValueSourceQUOTES PropertyValueSource = "QUOTES"

	PropertyValueSourceRECYCLINGBIN PropertyValueSource = "RECYCLING_BIN"

	PropertyValueSourceSALES PropertyValueSource = "SALES"

	PropertyValueSourceSALESFORCE PropertyValueSource = "SALESFORCE"

	PropertyValueSourceSALESMESSAGES PropertyValueSource = "SALES_MESSAGES"

	PropertyValueSourceSEQUENCES PropertyValueSource = "SEQUENCES"

	PropertyValueSourceSETTINGS PropertyValueSource = "SETTINGS"

	PropertyValueSourceSIDEKICK PropertyValueSource = "SIDEKICK"

	PropertyValueSourceSIGNALS PropertyValueSource = "SIGNALS"

	PropertyValueSourceSOCIAL PropertyValueSource = "SOCIAL"

	PropertyValueSourceSUCCESS PropertyValueSource = "SUCCESS"

	PropertyValueSourceTALLY PropertyValueSource = "TALLY"

	PropertyValueSourceTASK PropertyValueSource = "TASK"

	PropertyValueSourceWALINCREMENTAL PropertyValueSource = "WAL_INCREMENTAL"

	PropertyValueSourceWORKFLOWS PropertyValueSource = "WORKFLOWS"
)

// BatchInputMarketingEventCreateRequestParams defines model for BatchInputMarketingEventCreateRequestParams.
type BatchInputMarketingEventCreateRequestParams struct {
	Inputs []MarketingEventCreateRequestParams `json:"inputs"`
}

// List of marketing event details to create or update
type BatchInputMarketingEventEmailSubscriber struct {
	// List of marketing event details to create or update
	Inputs []MarketingEventEmailSubscriber `json:"inputs"`
}

// BatchInputMarketingEventExternalUniqueIdentifier defines model for BatchInputMarketingEventExternalUniqueIdentifier.
type BatchInputMarketingEventExternalUniqueIdentifier struct {
	Inputs []MarketingEventExternalUniqueIdentifier `json:"inputs"`
}

// List of HubSpot contacts to subscribe to the marketing event
type BatchInputMarketingEventSubscriber struct {
	// List of HubSpot contacts to subscribe to the marketing event
	Inputs []MarketingEventSubscriber `json:"inputs"`
}

// BatchResponseMarketingEventPublicDefaultResponse defines model for BatchResponseMarketingEventPublicDefaultResponse.
type BatchResponseMarketingEventPublicDefaultResponse struct {
	CompletedAt time.Time                                               `json:"completedAt"`
	Errors      *[]StandardError                                        `json:"errors,omitempty"`
	Links       *BatchResponseMarketingEventPublicDefaultResponse_Links `json:"links,omitempty"`
	NumErrors   *int32                                                  `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                              `json:"requestedAt,omitempty"`
	Results     []MarketingEventPublicDefaultResponse                   `json:"results"`
	StartedAt   time.Time                                               `json:"startedAt"`
	Status      BatchResponseMarketingEventPublicDefaultResponseStatus  `json:"status"`
}

// BatchResponseMarketingEventPublicDefaultResponse_Links defines model for BatchResponseMarketingEventPublicDefaultResponse.Links.
type BatchResponseMarketingEventPublicDefaultResponse_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// BatchResponseMarketingEventPublicDefaultResponseStatus defines model for BatchResponseMarketingEventPublicDefaultResponse.Status.
type BatchResponseMarketingEventPublicDefaultResponseStatus string

// CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging defines model for CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging.
type CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging struct {
	Results []MarketingEventExternalUniqueIdentifier `json:"results"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorCategory defines model for ErrorCategory.
type ErrorCategory struct {
	HttpStatus ErrorCategoryHttpStatus `json:"httpStatus"`
	Name       string                  `json:"name"`
}

// ErrorCategoryHttpStatus defines model for ErrorCategory.HttpStatus.
type ErrorCategoryHttpStatus string

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// EventDetailSettings defines model for EventDetailSettings.
type EventDetailSettings struct {
	// The id of the application the settings are for
	AppId int32 `json:"appId"`

	// The url that will be used to fetch marketing event details by id
	EventDetailsUrl string `json:"eventDetailsUrl"`
}

// EventDetailSettingsUrl defines model for EventDetailSettingsUrl.
type EventDetailSettingsUrl struct {
	// The url that will be used to fetch marketing event details by id. Must contain a `%s` character sequence that will be substituted with the event id. For example: `https://my.event.app/events/%s`
	EventDetailsUrl string `json:"eventDetailsUrl"`
}

// MarketingEventCreateRequestParams defines model for MarketingEventCreateRequestParams.
type MarketingEventCreateRequestParams struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.  Defaults to `false`
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The accountId that is associated with this marketing event in the external event application.
	ExternalAccountId string `json:"externalAccountId"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// MarketingEventDefaultResponse defines model for MarketingEventDefaultResponse.
type MarketingEventDefaultResponse struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// The URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// MarketingEventEmailSubscriber defines model for MarketingEventEmailSubscriber.
type MarketingEventEmailSubscriber struct {
	// The email address of the contact in HubSpot to associate with the event. Note that the contact must already exist in HubSpot; a contact will not be created.
	Email string `json:"email"`

	// The date and time at which the contact subscribed to the event.
	InteractionDateTime int64 `json:"interactionDateTime"`
}

// MarketingEventExternalUniqueIdentifier defines model for MarketingEventExternalUniqueIdentifier.
type MarketingEventExternalUniqueIdentifier struct {
	// The id of the application that created the marketing event in HubSpot.
	AppId int32 `json:"appId"`

	// The accountId that is associated with this marketing event in the external event application.
	ExternalAccountId string `json:"externalAccountId"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`
}

// MarketingEventPublicDefaultResponse defines model for MarketingEventPublicDefaultResponse.
type MarketingEventPublicDefaultResponse struct {
	CreatedAt time.Time `json:"createdAt"`

	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`
	Id       string  `json:"id"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	UpdatedAt     time.Time  `json:"updatedAt"`
}

// MarketingEventPublicReadResponse defines model for MarketingEventPublicReadResponse.
type MarketingEventPublicReadResponse struct {
	// The number of HubSpot contacts that attended this marketing event.
	Attendees int32 `json:"attendees"`

	// The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.
	Cancellations int32     `json:"cancellations"`
	CreatedAt     time.Time `json:"createdAt"`

	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled.
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName string `json:"eventName"`

	// The name of the organizer of the marketing event.
	EventOrganizer string `json:"eventOrganizer"`

	// The type of the marketing event.
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The id of the marketing event in the external event application.
	ExternalEventId string `json:"externalEventId"`
	Id              string `json:"id"`

	// The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.
	NoShows int32 `json:"noShows"`

	// The number of HubSpot contacts that registered for this marketing event.
	Registrants int32 `json:"registrants"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	UpdatedAt     time.Time  `json:"updatedAt"`
}

// MarketingEventSubscriber defines model for MarketingEventSubscriber.
type MarketingEventSubscriber struct {
	// The date and time at which the contact subscribed to the event.
	InteractionDateTime int64  `json:"interactionDateTime"`
	Vid                 *int32 `json:"vid,omitempty"`
}

// MarketingEventUpdateRequestParams defines model for MarketingEventUpdateRequestParams.
type MarketingEventUpdateRequestParams struct {
	// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
	// In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
	CustomProperties *[]PropertyValue `json:"customProperties,omitempty"`

	// The end date and time of the marketing event.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`

	// Indicates if the marketing event has been cancelled. Defaults to `false`
	EventCancelled *bool `json:"eventCancelled,omitempty"`

	// The description of the marketing event.
	EventDescription *string `json:"eventDescription,omitempty"`

	// The name of the marketing event.
	EventName *string `json:"eventName,omitempty"`

	// The name of the organizer of the marketing event.
	EventOrganizer *string `json:"eventOrganizer,omitempty"`

	// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
	EventType *string `json:"eventType,omitempty"`

	// A URL in the external event application where the marketing event can be managed.
	EventUrl *string `json:"eventUrl,omitempty"`

	// The start date and time of the marketing event.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// PropertyValue defines model for PropertyValue.
type PropertyValue struct {
	Name                    string              `json:"name"`
	RequestId               string              `json:"requestId"`
	SelectedByUser          bool                `json:"selectedByUser"`
	SelectedByUserTimestamp int64               `json:"selectedByUserTimestamp"`
	Source                  PropertyValueSource `json:"source"`
	SourceId                string              `json:"sourceId"`
	SourceLabel             string              `json:"sourceLabel"`

	// Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`
	SourceMetadata  string  `json:"sourceMetadata"`
	SourceVid       []int64 `json:"sourceVid"`
	Timestamp       int64   `json:"timestamp"`
	UpdatedByUserId *int32  `json:"updatedByUserId,omitempty"`
	Value           string  `json:"value"`
}

// PropertyValueSource defines model for PropertyValue.Source.
type PropertyValueSource string

// StandardError defines model for StandardError.
type StandardError struct {
	Category    ErrorCategory           `json:"category"`
	Context     StandardError_Context   `json:"context"`
	Errors      []ErrorDetail           `json:"errors"`
	Id          *string                 `json:"id,omitempty"`
	Links       StandardError_Links     `json:"links"`
	Message     string                  `json:"message"`
	Status      string                  `json:"status"`
	SubCategory *map[string]interface{} `json:"subCategory,omitempty"`
}

// StandardError_Context defines model for StandardError.Context.
type StandardError_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// StandardError_Links defines model for StandardError.Links.
type StandardError_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Postmarketingv3marketingEventseventsJSONBody defines parameters for Postmarketingv3marketingEventsevents.
type Postmarketingv3marketingEventseventsJSONBody MarketingEventCreateRequestParams

// Postmarketingv3marketingEventseventsdeleteJSONBody defines parameters for Postmarketingv3marketingEventseventsdelete.
type Postmarketingv3marketingEventseventsdeleteJSONBody BatchInputMarketingEventExternalUniqueIdentifier

// Getmarketingv3marketingEventseventssearchParams defines parameters for Getmarketingv3marketingEventseventssearch.
type Getmarketingv3marketingEventseventssearchParams struct {
	// The partial event id to search for
	Q string `json:"q"`
}

// Postmarketingv3marketingEventseventsupsertJSONBody defines parameters for Postmarketingv3marketingEventseventsupsert.
type Postmarketingv3marketingEventseventsupsertJSONBody BatchInputMarketingEventCreateRequestParams

// Deletemarketingv3marketingEventseventsExternalEventIdParams defines parameters for Deletemarketingv3marketingEventseventsExternalEventId.
type Deletemarketingv3marketingEventseventsExternalEventIdParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Getmarketingv3marketingEventseventsExternalEventIdParams defines parameters for Getmarketingv3marketingEventseventsExternalEventId.
type Getmarketingv3marketingEventseventsExternalEventIdParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Patchmarketingv3marketingEventseventsExternalEventIdJSONBody defines parameters for Patchmarketingv3marketingEventseventsExternalEventId.
type Patchmarketingv3marketingEventseventsExternalEventIdJSONBody MarketingEventUpdateRequestParams

// Patchmarketingv3marketingEventseventsExternalEventIdParams defines parameters for Patchmarketingv3marketingEventseventsExternalEventId.
type Patchmarketingv3marketingEventseventsExternalEventIdParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Putmarketingv3marketingEventseventsExternalEventIdJSONBody defines parameters for Putmarketingv3marketingEventseventsExternalEventId.
type Putmarketingv3marketingEventseventsExternalEventIdJSONBody MarketingEventCreateRequestParams

// Postmarketingv3marketingEventseventsExternalEventIdcancelParams defines parameters for Postmarketingv3marketingEventseventsExternalEventIdcancel.
type Postmarketingv3marketingEventseventsExternalEventIdcancelParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONBody defines parameters for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONBody BatchInputMarketingEventEmailSubscriber

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams defines parameters for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONBody defines parameters for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONBody BatchInputMarketingEventSubscriber

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams defines parameters for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams struct {
	// The account id associated with the marketing event
	ExternalAccountId string `json:"externalAccountId"`
}

// Postmarketingv3marketingEventsAppIdsettingsJSONBody defines parameters for Postmarketingv3marketingEventsAppIdsettings.
type Postmarketingv3marketingEventsAppIdsettingsJSONBody EventDetailSettingsUrl

// Postmarketingv3marketingEventseventsJSONRequestBody defines body for Postmarketingv3marketingEventsevents for application/json ContentType.
type Postmarketingv3marketingEventseventsJSONRequestBody Postmarketingv3marketingEventseventsJSONBody

// Postmarketingv3marketingEventseventsdeleteJSONRequestBody defines body for Postmarketingv3marketingEventseventsdelete for application/json ContentType.
type Postmarketingv3marketingEventseventsdeleteJSONRequestBody Postmarketingv3marketingEventseventsdeleteJSONBody

// Postmarketingv3marketingEventseventsupsertJSONRequestBody defines body for Postmarketingv3marketingEventseventsupsert for application/json ContentType.
type Postmarketingv3marketingEventseventsupsertJSONRequestBody Postmarketingv3marketingEventseventsupsertJSONBody

// Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody defines body for Patchmarketingv3marketingEventseventsExternalEventId for application/json ContentType.
type Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody Patchmarketingv3marketingEventseventsExternalEventIdJSONBody

// Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody defines body for Putmarketingv3marketingEventseventsExternalEventId for application/json ContentType.
type Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody Putmarketingv3marketingEventseventsExternalEventIdJSONBody

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody defines body for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert for application/json ContentType.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONBody

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody defines body for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert for application/json ContentType.
type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONBody

// Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody defines body for Postmarketingv3marketingEventsAppIdsettings for application/json ContentType.
type Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody Postmarketingv3marketingEventsAppIdsettingsJSONBody

// Getter for additional properties for BatchResponseMarketingEventPublicDefaultResponse_Links. Returns the specified
// element and whether it was found
func (a BatchResponseMarketingEventPublicDefaultResponse_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BatchResponseMarketingEventPublicDefaultResponse_Links
func (a *BatchResponseMarketingEventPublicDefaultResponse_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BatchResponseMarketingEventPublicDefaultResponse_Links to handle AdditionalProperties
func (a *BatchResponseMarketingEventPublicDefaultResponse_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BatchResponseMarketingEventPublicDefaultResponse_Links to handle AdditionalProperties
func (a BatchResponseMarketingEventPublicDefaultResponse_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Context. Returns the specified
// element and whether it was found
func (a StandardError_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Context
func (a *StandardError_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a *StandardError_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Context to handle AdditionalProperties
func (a StandardError_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for StandardError_Links. Returns the specified
// element and whether it was found
func (a StandardError_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for StandardError_Links
func (a *StandardError_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a *StandardError_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for StandardError_Links to handle AdditionalProperties
func (a StandardError_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postmarketingv3marketingEventsevents request with any body
	Postmarketingv3marketingEventseventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventsevents(ctx context.Context, body Postmarketingv3marketingEventseventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventseventsdelete request with any body
	Postmarketingv3marketingEventseventsdeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventseventsdelete(ctx context.Context, body Postmarketingv3marketingEventseventsdeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getmarketingv3marketingEventseventssearch request
	Getmarketingv3marketingEventseventssearch(ctx context.Context, params *Getmarketingv3marketingEventseventssearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventseventsupsert request with any body
	Postmarketingv3marketingEventseventsupsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventseventsupsert(ctx context.Context, body Postmarketingv3marketingEventseventsupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletemarketingv3marketingEventseventsExternalEventId request
	Deletemarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Deletemarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getmarketingv3marketingEventseventsExternalEventId request
	Getmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Getmarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Patchmarketingv3marketingEventseventsExternalEventId request with any body
	Patchmarketingv3marketingEventseventsExternalEventIdWithBody(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Patchmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, body Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putmarketingv3marketingEventseventsExternalEventId request with any body
	Putmarketingv3marketingEventseventsExternalEventIdWithBody(ctx context.Context, externalEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Putmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, body Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventseventsExternalEventIdcancel request
	Postmarketingv3marketingEventseventsExternalEventIdcancel(ctx context.Context, externalEventId string, params *Postmarketingv3marketingEventseventsExternalEventIdcancelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert request with any body
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBody(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert request with any body
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBody(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getmarketingv3marketingEventsAppIdsettings request
	Getmarketingv3marketingEventsAppIdsettings(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3marketingEventsAppIdsettings request with any body
	Postmarketingv3marketingEventsAppIdsettingsWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3marketingEventsAppIdsettings(ctx context.Context, appId int32, body Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postmarketingv3marketingEventseventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventsevents(ctx context.Context, body Postmarketingv3marketingEventseventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsdeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsdeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsdelete(ctx context.Context, body Postmarketingv3marketingEventseventsdeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsdeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getmarketingv3marketingEventseventssearch(ctx context.Context, params *Getmarketingv3marketingEventseventssearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmarketingv3marketingEventseventssearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsupsertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsupsertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsupsert(ctx context.Context, body Postmarketingv3marketingEventseventsupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsupsertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletemarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Deletemarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletemarketingv3marketingEventseventsExternalEventIdRequest(c.Server, externalEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Getmarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmarketingv3marketingEventseventsExternalEventIdRequest(c.Server, externalEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchmarketingv3marketingEventseventsExternalEventIdWithBody(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchmarketingv3marketingEventseventsExternalEventIdRequestWithBody(c.Server, externalEventId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patchmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, body Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchmarketingv3marketingEventseventsExternalEventIdRequest(c.Server, externalEventId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putmarketingv3marketingEventseventsExternalEventIdWithBody(ctx context.Context, externalEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutmarketingv3marketingEventseventsExternalEventIdRequestWithBody(c.Server, externalEventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putmarketingv3marketingEventseventsExternalEventId(ctx context.Context, externalEventId string, body Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutmarketingv3marketingEventseventsExternalEventIdRequest(c.Server, externalEventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsExternalEventIdcancel(ctx context.Context, externalEventId string, params *Postmarketingv3marketingEventseventsExternalEventIdcancelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsExternalEventIdcancelRequest(c.Server, externalEventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBody(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequestWithBody(c.Server, externalEventId, subscriberState, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequest(c.Server, externalEventId, subscriberState, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBody(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequestWithBody(c.Server, externalEventId, subscriberState, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequest(c.Server, externalEventId, subscriberState, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getmarketingv3marketingEventsAppIdsettings(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmarketingv3marketingEventsAppIdsettingsRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventsAppIdsettingsWithBody(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventsAppIdsettingsRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3marketingEventsAppIdsettings(ctx context.Context, appId int32, body Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3marketingEventsAppIdsettingsRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostmarketingv3marketingEventseventsRequest calls the generic Postmarketingv3marketingEventsevents builder with application/json body
func NewPostmarketingv3marketingEventseventsRequest(server string, body Postmarketingv3marketingEventseventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventseventsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventseventsRequestWithBody generates requests for Postmarketingv3marketingEventsevents with any type of body
func NewPostmarketingv3marketingEventseventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostmarketingv3marketingEventseventsdeleteRequest calls the generic Postmarketingv3marketingEventseventsdelete builder with application/json body
func NewPostmarketingv3marketingEventseventsdeleteRequest(server string, body Postmarketingv3marketingEventseventsdeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventseventsdeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventseventsdeleteRequestWithBody generates requests for Postmarketingv3marketingEventseventsdelete with any type of body
func NewPostmarketingv3marketingEventseventsdeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetmarketingv3marketingEventseventssearchRequest generates requests for Getmarketingv3marketingEventseventssearch
func NewGetmarketingv3marketingEventseventssearchRequest(server string, params *Getmarketingv3marketingEventseventssearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmarketingv3marketingEventseventsupsertRequest calls the generic Postmarketingv3marketingEventseventsupsert builder with application/json body
func NewPostmarketingv3marketingEventseventsupsertRequest(server string, body Postmarketingv3marketingEventseventsupsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventseventsupsertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventseventsupsertRequestWithBody generates requests for Postmarketingv3marketingEventseventsupsert with any type of body
func NewPostmarketingv3marketingEventseventsupsertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/upsert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletemarketingv3marketingEventseventsExternalEventIdRequest generates requests for Deletemarketingv3marketingEventseventsExternalEventId
func NewDeletemarketingv3marketingEventseventsExternalEventIdRequest(server string, externalEventId string, params *Deletemarketingv3marketingEventseventsExternalEventIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetmarketingv3marketingEventseventsExternalEventIdRequest generates requests for Getmarketingv3marketingEventseventsExternalEventId
func NewGetmarketingv3marketingEventseventsExternalEventIdRequest(server string, externalEventId string, params *Getmarketingv3marketingEventseventsExternalEventIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchmarketingv3marketingEventseventsExternalEventIdRequest calls the generic Patchmarketingv3marketingEventseventsExternalEventId builder with application/json body
func NewPatchmarketingv3marketingEventseventsExternalEventIdRequest(server string, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, body Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchmarketingv3marketingEventseventsExternalEventIdRequestWithBody(server, externalEventId, params, "application/json", bodyReader)
}

// NewPatchmarketingv3marketingEventseventsExternalEventIdRequestWithBody generates requests for Patchmarketingv3marketingEventseventsExternalEventId with any type of body
func NewPatchmarketingv3marketingEventseventsExternalEventIdRequestWithBody(server string, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutmarketingv3marketingEventseventsExternalEventIdRequest calls the generic Putmarketingv3marketingEventseventsExternalEventId builder with application/json body
func NewPutmarketingv3marketingEventseventsExternalEventIdRequest(server string, externalEventId string, body Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutmarketingv3marketingEventseventsExternalEventIdRequestWithBody(server, externalEventId, "application/json", bodyReader)
}

// NewPutmarketingv3marketingEventseventsExternalEventIdRequestWithBody generates requests for Putmarketingv3marketingEventseventsExternalEventId with any type of body
func NewPutmarketingv3marketingEventseventsExternalEventIdRequestWithBody(server string, externalEventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostmarketingv3marketingEventseventsExternalEventIdcancelRequest generates requests for Postmarketingv3marketingEventseventsExternalEventIdcancel
func NewPostmarketingv3marketingEventseventsExternalEventIdcancelRequest(server string, externalEventId string, params *Postmarketingv3marketingEventseventsExternalEventIdcancelParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequest calls the generic Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert builder with application/json body
func NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequest(server string, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequestWithBody(server, externalEventId, subscriberState, params, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequestWithBody generates requests for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert with any type of body
func NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertRequestWithBody(server string, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriberState", runtime.ParamLocationPath, subscriberState)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s/%s/email-upsert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequest calls the generic Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert builder with application/json body
func NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequest(server string, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequestWithBody(server, externalEventId, subscriberState, params, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequestWithBody generates requests for Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert with any type of body
func NewPostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertRequestWithBody(server string, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "externalEventId", runtime.ParamLocationPath, externalEventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subscriberState", runtime.ParamLocationPath, subscriberState)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/events/%s/%s/upsert", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalAccountId", runtime.ParamLocationQuery, params.ExternalAccountId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetmarketingv3marketingEventsAppIdsettingsRequest generates requests for Getmarketingv3marketingEventsAppIdsettings
func NewGetmarketingv3marketingEventsAppIdsettingsRequest(server string, appId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmarketingv3marketingEventsAppIdsettingsRequest calls the generic Postmarketingv3marketingEventsAppIdsettings builder with application/json body
func NewPostmarketingv3marketingEventsAppIdsettingsRequest(server string, appId int32, body Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3marketingEventsAppIdsettingsRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewPostmarketingv3marketingEventsAppIdsettingsRequestWithBody generates requests for Postmarketingv3marketingEventsAppIdsettings with any type of body
func NewPostmarketingv3marketingEventsAppIdsettingsRequestWithBody(server string, appId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/marketing-events/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postmarketingv3marketingEventsevents request with any body
	Postmarketingv3marketingEventseventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsResponse, error)
	Postmarketingv3marketingEventseventsWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsResponse, error)

	// Postmarketingv3marketingEventseventsdelete request with any body
	Postmarketingv3marketingEventseventsdeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsdeleteResponse, error)
	Postmarketingv3marketingEventseventsdeleteWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsdeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsdeleteResponse, error)

	// Getmarketingv3marketingEventseventssearch request
	Getmarketingv3marketingEventseventssearchWithResponse(ctx context.Context, params *Getmarketingv3marketingEventseventssearchParams, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventseventssearchResponse, error)

	// Postmarketingv3marketingEventseventsupsert request with any body
	Postmarketingv3marketingEventseventsupsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsupsertResponse, error)
	Postmarketingv3marketingEventseventsupsertWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsupsertResponse, error)

	// Deletemarketingv3marketingEventseventsExternalEventId request
	Deletemarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Deletemarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*Deletemarketingv3marketingEventseventsExternalEventIdResponse, error)

	// Getmarketingv3marketingEventseventsExternalEventId request
	Getmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Getmarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventseventsExternalEventIdResponse, error)

	// Patchmarketingv3marketingEventseventsExternalEventId request with any body
	Patchmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchmarketingv3marketingEventseventsExternalEventIdResponse, error)
	Patchmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, body Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchmarketingv3marketingEventseventsExternalEventIdResponse, error)

	// Putmarketingv3marketingEventseventsExternalEventId request with any body
	Putmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse(ctx context.Context, externalEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putmarketingv3marketingEventseventsExternalEventIdResponse, error)
	Putmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, body Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Putmarketingv3marketingEventseventsExternalEventIdResponse, error)

	// Postmarketingv3marketingEventseventsExternalEventIdcancel request
	Postmarketingv3marketingEventseventsExternalEventIdcancelWithResponse(ctx context.Context, externalEventId string, params *Postmarketingv3marketingEventseventsExternalEventIdcancelParams, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdcancelResponse, error)

	// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert request with any body
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBodyWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse, error)
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse, error)

	// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert request with any body
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBodyWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse, error)
	Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse, error)

	// Getmarketingv3marketingEventsAppIdsettings request
	Getmarketingv3marketingEventsAppIdsettingsWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventsAppIdsettingsResponse, error)

	// Postmarketingv3marketingEventsAppIdsettings request with any body
	Postmarketingv3marketingEventsAppIdsettingsWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventsAppIdsettingsResponse, error)
	Postmarketingv3marketingEventsAppIdsettingsWithResponse(ctx context.Context, appId int32, body Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventsAppIdsettingsResponse, error)
}

type Postmarketingv3marketingEventseventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketingEventDefaultResponse
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventseventsdeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsdeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsdeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getmarketingv3marketingEventseventssearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging
}

// Status returns HTTPResponse.Status
func (r Getmarketingv3marketingEventseventssearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getmarketingv3marketingEventseventssearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventseventsupsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchResponseMarketingEventPublicDefaultResponse
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsupsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsupsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletemarketingv3marketingEventseventsExternalEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletemarketingv3marketingEventseventsExternalEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletemarketingv3marketingEventseventsExternalEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getmarketingv3marketingEventseventsExternalEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketingEventPublicReadResponse
}

// Status returns HTTPResponse.Status
func (r Getmarketingv3marketingEventseventsExternalEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getmarketingv3marketingEventseventsExternalEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Patchmarketingv3marketingEventseventsExternalEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketingEventPublicDefaultResponse
}

// Status returns HTTPResponse.Status
func (r Patchmarketingv3marketingEventseventsExternalEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Patchmarketingv3marketingEventseventsExternalEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Putmarketingv3marketingEventseventsExternalEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketingEventPublicDefaultResponse
}

// Status returns HTTPResponse.Status
func (r Putmarketingv3marketingEventseventsExternalEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Putmarketingv3marketingEventseventsExternalEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventseventsExternalEventIdcancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketingEventDefaultResponse
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsExternalEventIdcancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsExternalEventIdcancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getmarketingv3marketingEventsAppIdsettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventDetailSettings
}

// Status returns HTTPResponse.Status
func (r Getmarketingv3marketingEventsAppIdsettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getmarketingv3marketingEventsAppIdsettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3marketingEventsAppIdsettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventDetailSettings
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3marketingEventsAppIdsettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3marketingEventsAppIdsettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postmarketingv3marketingEventseventsWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventseventsResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventseventsWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventsevents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsResponse(rsp)
}

// Postmarketingv3marketingEventseventsdeleteWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventseventsdeleteResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsdeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsdeleteResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsdeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsdeleteResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventseventsdeleteWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsdeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsdeleteResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsdelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsdeleteResponse(rsp)
}

// Getmarketingv3marketingEventseventssearchWithResponse request returning *Getmarketingv3marketingEventseventssearchResponse
func (c *ClientWithResponses) Getmarketingv3marketingEventseventssearchWithResponse(ctx context.Context, params *Getmarketingv3marketingEventseventssearchParams, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventseventssearchResponse, error) {
	rsp, err := c.Getmarketingv3marketingEventseventssearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmarketingv3marketingEventseventssearchResponse(rsp)
}

// Postmarketingv3marketingEventseventsupsertWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventseventsupsertResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsupsertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsupsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsupsertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsupsertResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventseventsupsertWithResponse(ctx context.Context, body Postmarketingv3marketingEventseventsupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsupsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsupsert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsupsertResponse(rsp)
}

// Deletemarketingv3marketingEventseventsExternalEventIdWithResponse request returning *Deletemarketingv3marketingEventseventsExternalEventIdResponse
func (c *ClientWithResponses) Deletemarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Deletemarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*Deletemarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Deletemarketingv3marketingEventseventsExternalEventId(ctx, externalEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletemarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

// Getmarketingv3marketingEventseventsExternalEventIdWithResponse request returning *Getmarketingv3marketingEventseventsExternalEventIdResponse
func (c *ClientWithResponses) Getmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Getmarketingv3marketingEventseventsExternalEventIdParams, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Getmarketingv3marketingEventseventsExternalEventId(ctx, externalEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

// Patchmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse request with arbitrary body returning *Patchmarketingv3marketingEventseventsExternalEventIdResponse
func (c *ClientWithResponses) Patchmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Patchmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Patchmarketingv3marketingEventseventsExternalEventIdWithBody(ctx, externalEventId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchmarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

func (c *ClientWithResponses) Patchmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, params *Patchmarketingv3marketingEventseventsExternalEventIdParams, body Patchmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Patchmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Patchmarketingv3marketingEventseventsExternalEventId(ctx, externalEventId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchmarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

// Putmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse request with arbitrary body returning *Putmarketingv3marketingEventseventsExternalEventIdResponse
func (c *ClientWithResponses) Putmarketingv3marketingEventseventsExternalEventIdWithBodyWithResponse(ctx context.Context, externalEventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Putmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Putmarketingv3marketingEventseventsExternalEventIdWithBody(ctx, externalEventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutmarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

func (c *ClientWithResponses) Putmarketingv3marketingEventseventsExternalEventIdWithResponse(ctx context.Context, externalEventId string, body Putmarketingv3marketingEventseventsExternalEventIdJSONRequestBody, reqEditors ...RequestEditorFn) (*Putmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	rsp, err := c.Putmarketingv3marketingEventseventsExternalEventId(ctx, externalEventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutmarketingv3marketingEventseventsExternalEventIdResponse(rsp)
}

// Postmarketingv3marketingEventseventsExternalEventIdcancelWithResponse request returning *Postmarketingv3marketingEventseventsExternalEventIdcancelResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsExternalEventIdcancelWithResponse(ctx context.Context, externalEventId string, params *Postmarketingv3marketingEventseventsExternalEventIdcancelParams, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdcancelResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsExternalEventIdcancel(ctx, externalEventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsExternalEventIdcancelResponse(rsp)
}

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBodyWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithBody(ctx, externalEventId, subscriberState, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsert(ctx, externalEventId, subscriberState, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse(rsp)
}

// Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBodyWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithBody(ctx, externalEventId, subscriberState, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithResponse(ctx context.Context, externalEventId string, subscriberState string, params *Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertParams, body Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsert(ctx, externalEventId, subscriberState, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse(rsp)
}

// Getmarketingv3marketingEventsAppIdsettingsWithResponse request returning *Getmarketingv3marketingEventsAppIdsettingsResponse
func (c *ClientWithResponses) Getmarketingv3marketingEventsAppIdsettingsWithResponse(ctx context.Context, appId int32, reqEditors ...RequestEditorFn) (*Getmarketingv3marketingEventsAppIdsettingsResponse, error) {
	rsp, err := c.Getmarketingv3marketingEventsAppIdsettings(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmarketingv3marketingEventsAppIdsettingsResponse(rsp)
}

// Postmarketingv3marketingEventsAppIdsettingsWithBodyWithResponse request with arbitrary body returning *Postmarketingv3marketingEventsAppIdsettingsResponse
func (c *ClientWithResponses) Postmarketingv3marketingEventsAppIdsettingsWithBodyWithResponse(ctx context.Context, appId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventsAppIdsettingsResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventsAppIdsettingsWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventsAppIdsettingsResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3marketingEventsAppIdsettingsWithResponse(ctx context.Context, appId int32, body Postmarketingv3marketingEventsAppIdsettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3marketingEventsAppIdsettingsResponse, error) {
	rsp, err := c.Postmarketingv3marketingEventsAppIdsettings(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3marketingEventsAppIdsettingsResponse(rsp)
}

// ParsePostmarketingv3marketingEventseventsResponse parses an HTTP response from a Postmarketingv3marketingEventseventsWithResponse call
func ParsePostmarketingv3marketingEventseventsResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketingEventDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventseventsdeleteResponse parses an HTTP response from a Postmarketingv3marketingEventseventsdeleteWithResponse call
func ParsePostmarketingv3marketingEventseventsdeleteResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsdeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsdeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetmarketingv3marketingEventseventssearchResponse parses an HTTP response from a Getmarketingv3marketingEventseventssearchWithResponse call
func ParseGetmarketingv3marketingEventseventssearchResponse(rsp *http.Response) (*Getmarketingv3marketingEventseventssearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getmarketingv3marketingEventseventssearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventseventsupsertResponse parses an HTTP response from a Postmarketingv3marketingEventseventsupsertWithResponse call
func ParsePostmarketingv3marketingEventseventsupsertResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsupsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsupsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchResponseMarketingEventPublicDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeletemarketingv3marketingEventseventsExternalEventIdResponse parses an HTTP response from a Deletemarketingv3marketingEventseventsExternalEventIdWithResponse call
func ParseDeletemarketingv3marketingEventseventsExternalEventIdResponse(rsp *http.Response) (*Deletemarketingv3marketingEventseventsExternalEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletemarketingv3marketingEventseventsExternalEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetmarketingv3marketingEventseventsExternalEventIdResponse parses an HTTP response from a Getmarketingv3marketingEventseventsExternalEventIdWithResponse call
func ParseGetmarketingv3marketingEventseventsExternalEventIdResponse(rsp *http.Response) (*Getmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getmarketingv3marketingEventseventsExternalEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketingEventPublicReadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePatchmarketingv3marketingEventseventsExternalEventIdResponse parses an HTTP response from a Patchmarketingv3marketingEventseventsExternalEventIdWithResponse call
func ParsePatchmarketingv3marketingEventseventsExternalEventIdResponse(rsp *http.Response) (*Patchmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Patchmarketingv3marketingEventseventsExternalEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketingEventPublicDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutmarketingv3marketingEventseventsExternalEventIdResponse parses an HTTP response from a Putmarketingv3marketingEventseventsExternalEventIdWithResponse call
func ParsePutmarketingv3marketingEventseventsExternalEventIdResponse(rsp *http.Response) (*Putmarketingv3marketingEventseventsExternalEventIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Putmarketingv3marketingEventseventsExternalEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketingEventPublicDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventseventsExternalEventIdcancelResponse parses an HTTP response from a Postmarketingv3marketingEventseventsExternalEventIdcancelWithResponse call
func ParsePostmarketingv3marketingEventseventsExternalEventIdcancelResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsExternalEventIdcancelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsExternalEventIdcancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketingEventDefaultResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse parses an HTTP response from a Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertWithResponse call
func ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateemailUpsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse parses an HTTP response from a Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertWithResponse call
func ParsePostmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse(rsp *http.Response) (*Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventseventsExternalEventIdSubscriberStateupsertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetmarketingv3marketingEventsAppIdsettingsResponse parses an HTTP response from a Getmarketingv3marketingEventsAppIdsettingsWithResponse call
func ParseGetmarketingv3marketingEventsAppIdsettingsResponse(rsp *http.Response) (*Getmarketingv3marketingEventsAppIdsettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getmarketingv3marketingEventsAppIdsettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventDetailSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3marketingEventsAppIdsettingsResponse parses an HTTP response from a Postmarketingv3marketingEventsAppIdsettingsWithResponse call
func ParsePostmarketingv3marketingEventsAppIdsettingsResponse(rsp *http.Response) (*Postmarketingv3marketingEventsAppIdsettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3marketingEventsAppIdsettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventDetailSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
