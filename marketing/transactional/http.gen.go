// Package transactional provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package transactional

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	HapikeyScopes       = "hapikey.Scopes"
	Oauth2_legacyScopes = "oauth2_legacy.Scopes"
)

// Defines values for EmailSendStatusViewSendResult.
const (
	EmailSendStatusViewSendResultADDRESSLISTBOMBED EmailSendStatusViewSendResult = "ADDRESS_LIST_BOMBED"

	EmailSendStatusViewSendResultADDRESSONLYACCEPTEDONPROD EmailSendStatusViewSendResult = "ADDRESS_ONLY_ACCEPTED_ON_PROD"

	EmailSendStatusViewSendResultADDRESSOPTEDOUT EmailSendStatusViewSendResult = "ADDRESS_OPTED_OUT"

	EmailSendStatusViewSendResultBLOCKEDADDRESS EmailSendStatusViewSendResult = "BLOCKED_ADDRESS"

	EmailSendStatusViewSendResultBLOCKEDDOMAIN EmailSendStatusViewSendResult = "BLOCKED_DOMAIN"

	EmailSendStatusViewSendResultCAMPAIGNCANCELLED EmailSendStatusViewSendResult = "CAMPAIGN_CANCELLED"

	EmailSendStatusViewSendResultCANCELLEDABUSE EmailSendStatusViewSendResult = "CANCELLED_ABUSE"

	EmailSendStatusViewSendResultCORRUPTINPUT EmailSendStatusViewSendResult = "CORRUPT_INPUT"

	EmailSendStatusViewSendResultEMAILDISABLED EmailSendStatusViewSendResult = "EMAIL_DISABLED"

	EmailSendStatusViewSendResultEMAILUNCONFIRMED EmailSendStatusViewSendResult = "EMAIL_UNCONFIRMED"

	EmailSendStatusViewSendResultGRAYMAILSUPPRESSED EmailSendStatusViewSendResult = "GRAYMAIL_SUPPRESSED"

	EmailSendStatusViewSendResultIDEMPOTENTFAIL EmailSendStatusViewSendResult = "IDEMPOTENT_FAIL"

	EmailSendStatusViewSendResultIDEMPOTENTIGNORE EmailSendStatusViewSendResult = "IDEMPOTENT_IGNORE"

	EmailSendStatusViewSendResultINVALIDFROMADDRESS EmailSendStatusViewSendResult = "INVALID_FROM_ADDRESS"

	EmailSendStatusViewSendResultINVALIDTOADDRESS EmailSendStatusViewSendResult = "INVALID_TO_ADDRESS"

	EmailSendStatusViewSendResultMISSINGCONTENT EmailSendStatusViewSendResult = "MISSING_CONTENT"

	EmailSendStatusViewSendResultMISSINGREQUIREDPARAMETER EmailSendStatusViewSendResult = "MISSING_REQUIRED_PARAMETER"

	EmailSendStatusViewSendResultMISSINGTEMPLATEPROPERTIES EmailSendStatusViewSendResult = "MISSING_TEMPLATE_PROPERTIES"

	EmailSendStatusViewSendResultMTAIGNORE EmailSendStatusViewSendResult = "MTA_IGNORE"

	EmailSendStatusViewSendResultNONMARKETABLECONTACT EmailSendStatusViewSendResult = "NON_MARKETABLE_CONTACT"

	EmailSendStatusViewSendResultPORTALAUTHENTICATIONFAILURE EmailSendStatusViewSendResult = "PORTAL_AUTHENTICATION_FAILURE"

	EmailSendStatusViewSendResultPORTALEXPIRED EmailSendStatusViewSendResult = "PORTAL_EXPIRED"

	EmailSendStatusViewSendResultPORTALMISSINGMARKETINGSCOPE EmailSendStatusViewSendResult = "PORTAL_MISSING_MARKETING_SCOPE"

	EmailSendStatusViewSendResultPORTALNOTAUTHORIZEDFORAPPLICATION EmailSendStatusViewSendResult = "PORTAL_NOT_AUTHORIZED_FOR_APPLICATION"

	EmailSendStatusViewSendResultPORTALOVERLIMIT EmailSendStatusViewSendResult = "PORTAL_OVER_LIMIT"

	EmailSendStatusViewSendResultPORTALSUSPENDED EmailSendStatusViewSendResult = "PORTAL_SUSPENDED"

	EmailSendStatusViewSendResultPREVIOUSLYBOUNCED EmailSendStatusViewSendResult = "PREVIOUSLY_BOUNCED"

	EmailSendStatusViewSendResultPREVIOUSLYUNSUBSCRIBEDBRAND EmailSendStatusViewSendResult = "PREVIOUSLY_UNSUBSCRIBED_BRAND"

	EmailSendStatusViewSendResultPREVIOUSLYUNSUBSCRIBEDMESSAGE EmailSendStatusViewSendResult = "PREVIOUSLY_UNSUBSCRIBED_MESSAGE"

	EmailSendStatusViewSendResultPREVIOUSLYUNSUBSCRIBEDPORTAL EmailSendStatusViewSendResult = "PREVIOUSLY_UNSUBSCRIBED_PORTAL"

	EmailSendStatusViewSendResultPREVIOUSSPAM EmailSendStatusViewSendResult = "PREVIOUS_SPAM"

	EmailSendStatusViewSendResultQUARANTINEDADDRESS EmailSendStatusViewSendResult = "QUARANTINED_ADDRESS"

	EmailSendStatusViewSendResultQUEUED EmailSendStatusViewSendResult = "QUEUED"

	EmailSendStatusViewSendResultRECIPIENTFATIGUESUPPRESSED EmailSendStatusViewSendResult = "RECIPIENT_FATIGUE_SUPPRESSED"

	EmailSendStatusViewSendResultSENT EmailSendStatusViewSendResult = "SENT"

	EmailSendStatusViewSendResultTEMPLATERENDEREXCEPTION EmailSendStatusViewSendResult = "TEMPLATE_RENDER_EXCEPTION"

	EmailSendStatusViewSendResultTHROTTLED EmailSendStatusViewSendResult = "THROTTLED"

	EmailSendStatusViewSendResultTOOMANYRECIPIENTS EmailSendStatusViewSendResult = "TOO_MANY_RECIPIENTS"

	EmailSendStatusViewSendResultUNCONFIGUREDSENDINGDOMAIN EmailSendStatusViewSendResult = "UNCONFIGURED_SENDING_DOMAIN"

	EmailSendStatusViewSendResultUNDELIVERABLE EmailSendStatusViewSendResult = "UNDELIVERABLE"

	EmailSendStatusViewSendResultVALIDATIONFAILED EmailSendStatusViewSendResult = "VALIDATION_FAILED"
)

// Defines values for EmailSendStatusViewStatus.
const (
	EmailSendStatusViewStatusCANCELED EmailSendStatusViewStatus = "CANCELED"

	EmailSendStatusViewStatusCOMPLETE EmailSendStatusViewStatus = "COMPLETE"

	EmailSendStatusViewStatusPENDING EmailSendStatusViewStatus = "PENDING"

	EmailSendStatusViewStatusPROCESSING EmailSendStatusViewStatus = "PROCESSING"
)

// A collection of SMTP API tokens.
type CollectionResponseSmtpApiTokenView struct {
	Paging *Paging `json:"paging,omitempty"`

	// The actual collection of tokens.
	Results []SmtpApiTokenView `json:"results"`
}

// Describes the status of an email send request.
type EmailSendStatusView struct {
	// Time when the send was completed.
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// The ID of a send event.
	EventId *EventIdView `json:"eventId,omitempty"`

	// Time when the send was requested.
	RequestedAt *time.Time `json:"requestedAt,omitempty"`

	// Result of the send.
	SendResult *EmailSendStatusViewSendResult `json:"sendResult,omitempty"`

	// Time when the send began processing.
	StartedAt *time.Time `json:"startedAt,omitempty"`

	// Status of the send request.
	Status EmailSendStatusViewStatus `json:"status"`

	// Identifier used to query the status of the send.
	StatusId string `json:"statusId"`
}

// Result of the send.
type EmailSendStatusViewSendResult string

// Status of the send request.
type EmailSendStatusViewStatus string

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// The ID of a send event.
type EventIdView struct {
	// Time of event creation.
	Created time.Time `json:"created"`

	// Identifier of event.
	Id string `json:"id"`
}

// NextPage defines model for NextPage.
type NextPage struct {
	After string  `json:"after"`
	Link  *string `json:"link,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *NextPage `json:"next,omitempty"`
}

// A JSON object containing anything you want to override.
type PublicSingleSendEmail struct {
	// List of email addresses to send as Bcc.
	Bcc []string `json:"bcc"`

	// List of email addresses to send as Cc.
	Cc []string `json:"cc"`

	// The From header for the email.
	From *string `json:"from,omitempty"`

	// List of Reply-To header values for the email.
	ReplyTo []string `json:"replyTo"`

	// ID for a particular send. No more than one email will be sent per sendId.
	SendId *string `json:"sendId,omitempty"`

	// The recipient of the email.
	To *string `json:"to,omitempty"`
}

// A request to send a single transactional email asynchronously.
type PublicSingleSendRequestEgg struct {
	// The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while youâ€™re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment.
	ContactProperties PublicSingleSendRequestEgg_ContactProperties `json:"contactProperties"`

	// The customProperties field is a map of property values. Each property value contains a name and value property. Each property will be visible in the template under {{ custom.NAME }}.
	// Note: Custom properties do not currently support arrays. To provide a listing in an email, one workaround is to build an HTML list (either with tables or ul) and specify it as a custom property.
	CustomProperties map[string]interface{} `json:"customProperties"`

	// The content ID for the transactional email, which can be found in email tool UI.
	EmailId int32 `json:"emailId"`

	// A JSON object containing anything you want to override.
	Message PublicSingleSendEmail `json:"message"`
}

// The contactProperties field is a map of contact property values. Each contact property value contains a name and value property. Each property will get set on the contact record and will be visible in the template under {{ contact.NAME }}. Use these properties when you want to set a contact property while youâ€™re sending the email. For example, when sending a reciept you may want to set a last_paid_date property, as the sending of the receipt will have information about the last payment.
type PublicSingleSendRequestEgg_ContactProperties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// A request object to create a SMTP API token
type SmtpApiTokenRequestEgg struct {
	// A name for the campaign tied to the SMTP API token.
	CampaignName string `json:"campaignName"`

	// Indicates whether a contact should be created for recipients of emails.
	CreateContact bool `json:"createContact"`
}

// A SMTP API token provides both an ID and password that can be used to send email through the HubSpot SMTP API.
type SmtpApiTokenView struct {
	// A name for the campaign tied to the token.
	CampaignName string `json:"campaignName"`

	// Indicates whether a contact should be created for recipients of emails.
	CreateContact bool `json:"createContact"`

	// Timestamp generated when a token is created.
	CreatedAt time.Time `json:"createdAt"`

	// Email address of the user that sent the token creation request.
	CreatedBy string `json:"createdBy"`

	// Identifier assigned to the campaign provided in the token creation request.
	EmailCampaignId string `json:"emailCampaignId"`

	// User name to log into the HubSpot SMTP server.
	Id string `json:"id"`

	// Password used to log into the HubSpot SMTP server.
	Password *string `json:"password,omitempty"`
}

// Postmarketingv3transactionalsingleEmailsendSendEmailJSONBody defines parameters for Postmarketingv3transactionalsingleEmailsendSendEmail.
type Postmarketingv3transactionalsingleEmailsendSendEmailJSONBody PublicSingleSendRequestEgg

// Getmarketingv3transactionalsmtpTokensGetTokensPageParams defines parameters for Getmarketingv3transactionalsmtpTokensGetTokensPage.
type Getmarketingv3transactionalsmtpTokensGetTokensPageParams struct {
	// A name for the campaign tied to the SMTP API token.
	CampaignName *string `json:"campaignName,omitempty"`

	// Identifier assigned to the campaign provided during the token creation.
	EmailCampaignId *string `json:"emailCampaignId,omitempty"`

	// Starting point to get the next set of results.
	After *string `json:"after,omitempty"`

	// Maximum number of tokens to return.
	Limit *int32 `json:"limit,omitempty"`
}

// Postmarketingv3transactionalsmtpTokensCreateTokenJSONBody defines parameters for Postmarketingv3transactionalsmtpTokensCreateToken.
type Postmarketingv3transactionalsmtpTokensCreateTokenJSONBody SmtpApiTokenRequestEgg

// Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody defines body for Postmarketingv3transactionalsingleEmailsendSendEmail for application/json ContentType.
type Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody Postmarketingv3transactionalsingleEmailsendSendEmailJSONBody

// Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody defines body for Postmarketingv3transactionalsmtpTokensCreateToken for application/json ContentType.
type Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody Postmarketingv3transactionalsmtpTokensCreateTokenJSONBody

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PublicSingleSendRequestEgg_ContactProperties. Returns the specified
// element and whether it was found
func (a PublicSingleSendRequestEgg_ContactProperties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PublicSingleSendRequestEgg_ContactProperties
func (a *PublicSingleSendRequestEgg_ContactProperties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PublicSingleSendRequestEgg_ContactProperties to handle AdditionalProperties
func (a *PublicSingleSendRequestEgg_ContactProperties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PublicSingleSendRequestEgg_ContactProperties to handle AdditionalProperties
func (a PublicSingleSendRequestEgg_ContactProperties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postmarketingv3transactionalsingleEmailsendSendEmail request with any body
	Postmarketingv3transactionalsingleEmailsendSendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3transactionalsingleEmailsendSendEmail(ctx context.Context, body Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getmarketingv3transactionalsmtpTokensGetTokensPage request
	Getmarketingv3transactionalsmtpTokensGetTokensPage(ctx context.Context, params *Getmarketingv3transactionalsmtpTokensGetTokensPageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3transactionalsmtpTokensCreateToken request with any body
	Postmarketingv3transactionalsmtpTokensCreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
	Postmarketingv3transactionalsmtpTokensCreateToken(ctx context.Context, body Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken request
	Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById request
	Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword request
	Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postmarketingv3transactionalsingleEmailsendSendEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3transactionalsingleEmailsendSendEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3transactionalsingleEmailsendSendEmail(ctx context.Context, body Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3transactionalsingleEmailsendSendEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getmarketingv3transactionalsmtpTokensGetTokensPage(ctx context.Context, params *Getmarketingv3transactionalsmtpTokensGetTokensPageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmarketingv3transactionalsmtpTokensGetTokensPageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3transactionalsmtpTokensCreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3transactionalsmtpTokensCreateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3transactionalsmtpTokensCreateToken(ctx context.Context, body Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3transactionalsmtpTokensCreateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostmarketingv3transactionalsingleEmailsendSendEmailRequest calls the generic Postmarketingv3transactionalsingleEmailsendSendEmail builder with application/json body
func NewPostmarketingv3transactionalsingleEmailsendSendEmailRequest(server string, body Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3transactionalsingleEmailsendSendEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewPostmarketingv3transactionalsingleEmailsendSendEmailRequestWithBody generates requests for Postmarketingv3transactionalsingleEmailsendSendEmail with any type of body
func NewPostmarketingv3transactionalsingleEmailsendSendEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/single-email/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetmarketingv3transactionalsmtpTokensGetTokensPageRequest generates requests for Getmarketingv3transactionalsmtpTokensGetTokensPage
func NewGetmarketingv3transactionalsmtpTokensGetTokensPageRequest(server string, params *Getmarketingv3transactionalsmtpTokensGetTokensPageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CampaignName != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "campaignName", runtime.ParamLocationQuery, *params.CampaignName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.EmailCampaignId != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailCampaignId", runtime.ParamLocationQuery, *params.EmailCampaignId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.After != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Limit != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmarketingv3transactionalsmtpTokensCreateTokenRequest calls the generic Postmarketingv3transactionalsmtpTokensCreateToken builder with application/json body
func NewPostmarketingv3transactionalsmtpTokensCreateTokenRequest(server string, body Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostmarketingv3transactionalsmtpTokensCreateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostmarketingv3transactionalsmtpTokensCreateTokenRequestWithBody generates requests for Postmarketingv3transactionalsmtpTokensCreateToken with any type of body
func NewPostmarketingv3transactionalsmtpTokensCreateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenRequest generates requests for Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken
func NewDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdRequest generates requests for Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById
func NewGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordRequest generates requests for Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword
func NewPostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/marketing/v3/transactional/smtp-tokens/%s/password-reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postmarketingv3transactionalsingleEmailsendSendEmail request with any body
	Postmarketingv3transactionalsingleEmailsendSendEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsingleEmailsendSendEmailResponse, error)
	Postmarketingv3transactionalsingleEmailsendSendEmailWithResponse(ctx context.Context, body Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsingleEmailsendSendEmailResponse, error)

	// Getmarketingv3transactionalsmtpTokensGetTokensPage request
	Getmarketingv3transactionalsmtpTokensGetTokensPageWithResponse(ctx context.Context, params *Getmarketingv3transactionalsmtpTokensGetTokensPageParams, reqEditors ...RequestEditorFn) (*Getmarketingv3transactionalsmtpTokensGetTokensPageResponse, error)

	// Postmarketingv3transactionalsmtpTokensCreateToken request with any body
	Postmarketingv3transactionalsmtpTokensCreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensCreateTokenResponse, error)
	Postmarketingv3transactionalsmtpTokensCreateTokenWithResponse(ctx context.Context, body Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensCreateTokenResponse, error)

	// Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken request
	Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse, error)

	// Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById request
	Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse, error)

	// Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword request
	Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse, error)
}

type Postmarketingv3transactionalsingleEmailsendSendEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailSendStatusView
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3transactionalsingleEmailsendSendEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3transactionalsingleEmailsendSendEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getmarketingv3transactionalsmtpTokensGetTokensPageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionResponseSmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r Getmarketingv3transactionalsmtpTokensGetTokensPageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getmarketingv3transactionalsmtpTokensGetTokensPageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3transactionalsmtpTokensCreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3transactionalsmtpTokensCreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3transactionalsmtpTokensCreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SmtpApiTokenView
}

// Status returns HTTPResponse.Status
func (r Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Postmarketingv3transactionalsingleEmailsendSendEmailWithBodyWithResponse request with arbitrary body returning *Postmarketingv3transactionalsingleEmailsendSendEmailResponse
func (c *ClientWithResponses) Postmarketingv3transactionalsingleEmailsendSendEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsingleEmailsendSendEmailResponse, error) {
	rsp, err := c.Postmarketingv3transactionalsingleEmailsendSendEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3transactionalsingleEmailsendSendEmailResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3transactionalsingleEmailsendSendEmailWithResponse(ctx context.Context, body Postmarketingv3transactionalsingleEmailsendSendEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsingleEmailsendSendEmailResponse, error) {
	rsp, err := c.Postmarketingv3transactionalsingleEmailsendSendEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3transactionalsingleEmailsendSendEmailResponse(rsp)
}

// Getmarketingv3transactionalsmtpTokensGetTokensPageWithResponse request returning *Getmarketingv3transactionalsmtpTokensGetTokensPageResponse
func (c *ClientWithResponses) Getmarketingv3transactionalsmtpTokensGetTokensPageWithResponse(ctx context.Context, params *Getmarketingv3transactionalsmtpTokensGetTokensPageParams, reqEditors ...RequestEditorFn) (*Getmarketingv3transactionalsmtpTokensGetTokensPageResponse, error) {
	rsp, err := c.Getmarketingv3transactionalsmtpTokensGetTokensPage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmarketingv3transactionalsmtpTokensGetTokensPageResponse(rsp)
}

// Postmarketingv3transactionalsmtpTokensCreateTokenWithBodyWithResponse request with arbitrary body returning *Postmarketingv3transactionalsmtpTokensCreateTokenResponse
func (c *ClientWithResponses) Postmarketingv3transactionalsmtpTokensCreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensCreateTokenResponse, error) {
	rsp, err := c.Postmarketingv3transactionalsmtpTokensCreateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3transactionalsmtpTokensCreateTokenResponse(rsp)
}

func (c *ClientWithResponses) Postmarketingv3transactionalsmtpTokensCreateTokenWithResponse(ctx context.Context, body Postmarketingv3transactionalsmtpTokensCreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensCreateTokenResponse, error) {
	rsp, err := c.Postmarketingv3transactionalsmtpTokensCreateToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3transactionalsmtpTokensCreateTokenResponse(rsp)
}

// Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenWithResponse request returning *Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse
func (c *ClientWithResponses) Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse, error) {
	rsp, err := c.Deletemarketingv3transactionalsmtpTokensTokenIdArchiveToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse(rsp)
}

// Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdWithResponse request returning *Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse
func (c *ClientWithResponses) Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse, error) {
	rsp, err := c.Getmarketingv3transactionalsmtpTokensTokenIdGetTokenById(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse(rsp)
}

// Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordWithResponse request returning *Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse
func (c *ClientWithResponses) Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse, error) {
	rsp, err := c.Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPassword(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse(rsp)
}

// ParsePostmarketingv3transactionalsingleEmailsendSendEmailResponse parses an HTTP response from a Postmarketingv3transactionalsingleEmailsendSendEmailWithResponse call
func ParsePostmarketingv3transactionalsingleEmailsendSendEmailResponse(rsp *http.Response) (*Postmarketingv3transactionalsingleEmailsendSendEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3transactionalsingleEmailsendSendEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailSendStatusView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetmarketingv3transactionalsmtpTokensGetTokensPageResponse parses an HTTP response from a Getmarketingv3transactionalsmtpTokensGetTokensPageWithResponse call
func ParseGetmarketingv3transactionalsmtpTokensGetTokensPageResponse(rsp *http.Response) (*Getmarketingv3transactionalsmtpTokensGetTokensPageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getmarketingv3transactionalsmtpTokensGetTokensPageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionResponseSmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3transactionalsmtpTokensCreateTokenResponse parses an HTTP response from a Postmarketingv3transactionalsmtpTokensCreateTokenWithResponse call
func ParsePostmarketingv3transactionalsmtpTokensCreateTokenResponse(rsp *http.Response) (*Postmarketingv3transactionalsmtpTokensCreateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3transactionalsmtpTokensCreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse parses an HTTP response from a Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenWithResponse call
func ParseDeletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse(rsp *http.Response) (*Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deletemarketingv3transactionalsmtpTokensTokenIdArchiveTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse parses an HTTP response from a Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdWithResponse call
func ParseGetmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse(rsp *http.Response) (*Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getmarketingv3transactionalsmtpTokensTokenIdGetTokenByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse parses an HTTP response from a Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordWithResponse call
func ParsePostmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse(rsp *http.Response) (*Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postmarketingv3transactionalsmtpTokensTokenIdpasswordResetResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SmtpApiTokenView
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
