// Package oauth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package oauth

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// AccessTokenInfoResponse defines model for AccessTokenInfoResponse.
type AccessTokenInfoResponse struct {
	AppId                     int32    `json:"app_id"`
	ExpiresIn                 int32    `json:"expires_in"`
	HubDomain                 *string  `json:"hub_domain,omitempty"`
	HubId                     int32    `json:"hub_id"`
	ScopeToScopeGroupPks      []int32  `json:"scope_to_scope_group_pks"`
	Scopes                    []string `json:"scopes"`
	Token                     string   `json:"token"`
	TokenType                 string   `json:"token_type"`
	TrialScopeToScopeGroupPks []int32  `json:"trial_scope_to_scope_group_pks"`
	TrialScopes               []string `json:"trial_scopes"`
	User                      *string  `json:"user,omitempty"`
	UserId                    int32    `json:"user_id"`
}

// Error defines model for Error.
type Error struct {
	// The error category
	Category string `json:"category"`

	// Context about the error condition
	Context *Error_Context `json:"context,omitempty"`

	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId"`

	// further information about the error
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links *Error_Links `json:"links,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type Error_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
type Error_Links struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// The status code associated with the error detail
	Code *string `json:"code,omitempty"`

	// Context about the error condition
	Context *ErrorDetail_Context `json:"context,omitempty"`

	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty"`

	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message"`

	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty"`
}

// Context about the error condition
type ErrorDetail_Context struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// RefreshTokenInfoResponse defines model for RefreshTokenInfoResponse.
type RefreshTokenInfoResponse struct {
	ClientId  string   `json:"client_id"`
	HubDomain *string  `json:"hub_domain,omitempty"`
	HubId     int32    `json:"hub_id"`
	Scopes    []string `json:"scopes"`
	Token     string   `json:"token"`
	TokenType string   `json:"token_type"`
	User      *string  `json:"user,omitempty"`
	UserId    int32    `json:"user_id"`
}

// TokenResponseIF defines model for TokenResponseIF.
type TokenResponseIF struct {
	AccessToken  string  `json:"access_token"`
	ExpiresIn    int32   `json:"expires_in"`
	IdToken      *string `json:"id_token,omitempty"`
	RefreshToken string  `json:"refresh_token"`
	TokenType    string  `json:"token_type"`
}

// Getter for additional properties for Error_Context. Returns the specified
// element and whether it was found
func (a Error_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Context
func (a *Error_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a *Error_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Context to handle AdditionalProperties
func (a Error_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error_Links. Returns the specified
// element and whether it was found
func (a Error_Links) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error_Links
func (a *Error_Links) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a *Error_Links) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error_Links to handle AdditionalProperties
func (a Error_Links) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ErrorDetail_Context. Returns the specified
// element and whether it was found
func (a ErrorDetail_Context) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ErrorDetail_Context
func (a *ErrorDetail_Context) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a *ErrorDetail_Context) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ErrorDetail_Context to handle AdditionalProperties
func (a ErrorDetail_Context) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Getoauthv1accessTokensTokenGetAccessToken request
	Getoauthv1accessTokensTokenGetAccessToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteoauthv1refreshTokensTokenArchiveRefreshToken request
	Deleteoauthv1refreshTokensTokenArchiveRefreshToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getoauthv1refreshTokensTokenGetRefreshToken request
	Getoauthv1refreshTokensTokenGetRefreshToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Postoauthv1tokenCreateToken request with any body
	Postoauthv1tokenCreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Getoauthv1accessTokensTokenGetAccessToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetoauthv1accessTokensTokenGetAccessTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteoauthv1refreshTokensTokenArchiveRefreshToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteoauthv1refreshTokensTokenArchiveRefreshTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getoauthv1refreshTokensTokenGetRefreshToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetoauthv1refreshTokensTokenGetRefreshTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Postoauthv1tokenCreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostoauthv1tokenCreateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetoauthv1accessTokensTokenGetAccessTokenRequest generates requests for Getoauthv1accessTokensTokenGetAccessToken
func NewGetoauthv1accessTokensTokenGetAccessTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/v1/access-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteoauthv1refreshTokensTokenArchiveRefreshTokenRequest generates requests for Deleteoauthv1refreshTokensTokenArchiveRefreshToken
func NewDeleteoauthv1refreshTokensTokenArchiveRefreshTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/v1/refresh-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetoauthv1refreshTokensTokenGetRefreshTokenRequest generates requests for Getoauthv1refreshTokensTokenGetRefreshToken
func NewGetoauthv1refreshTokensTokenGetRefreshTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/v1/refresh-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostoauthv1tokenCreateTokenRequestWithBody generates requests for Postoauthv1tokenCreateToken with any type of body
func NewPostoauthv1tokenCreateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth/v1/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Getoauthv1accessTokensTokenGetAccessToken request
	Getoauthv1accessTokensTokenGetAccessTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Getoauthv1accessTokensTokenGetAccessTokenResponse, error)

	// Deleteoauthv1refreshTokensTokenArchiveRefreshToken request
	Deleteoauthv1refreshTokensTokenArchiveRefreshTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse, error)

	// Getoauthv1refreshTokensTokenGetRefreshToken request
	Getoauthv1refreshTokensTokenGetRefreshTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Getoauthv1refreshTokensTokenGetRefreshTokenResponse, error)

	// Postoauthv1tokenCreateToken request with any body
	Postoauthv1tokenCreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postoauthv1tokenCreateTokenResponse, error)
}

type Getoauthv1accessTokensTokenGetAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessTokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r Getoauthv1accessTokensTokenGetAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getoauthv1accessTokensTokenGetAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Getoauthv1refreshTokensTokenGetRefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefreshTokenInfoResponse
}

// Status returns HTTPResponse.Status
func (r Getoauthv1refreshTokensTokenGetRefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Getoauthv1refreshTokensTokenGetRefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Postoauthv1tokenCreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseIF
}

// Status returns HTTPResponse.Status
func (r Postoauthv1tokenCreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Postoauthv1tokenCreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Getoauthv1accessTokensTokenGetAccessTokenWithResponse request returning *Getoauthv1accessTokensTokenGetAccessTokenResponse
func (c *ClientWithResponses) Getoauthv1accessTokensTokenGetAccessTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Getoauthv1accessTokensTokenGetAccessTokenResponse, error) {
	rsp, err := c.Getoauthv1accessTokensTokenGetAccessToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetoauthv1accessTokensTokenGetAccessTokenResponse(rsp)
}

// Deleteoauthv1refreshTokensTokenArchiveRefreshTokenWithResponse request returning *Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse
func (c *ClientWithResponses) Deleteoauthv1refreshTokensTokenArchiveRefreshTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse, error) {
	rsp, err := c.Deleteoauthv1refreshTokensTokenArchiveRefreshToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse(rsp)
}

// Getoauthv1refreshTokensTokenGetRefreshTokenWithResponse request returning *Getoauthv1refreshTokensTokenGetRefreshTokenResponse
func (c *ClientWithResponses) Getoauthv1refreshTokensTokenGetRefreshTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*Getoauthv1refreshTokensTokenGetRefreshTokenResponse, error) {
	rsp, err := c.Getoauthv1refreshTokensTokenGetRefreshToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetoauthv1refreshTokensTokenGetRefreshTokenResponse(rsp)
}

// Postoauthv1tokenCreateTokenWithBodyWithResponse request with arbitrary body returning *Postoauthv1tokenCreateTokenResponse
func (c *ClientWithResponses) Postoauthv1tokenCreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Postoauthv1tokenCreateTokenResponse, error) {
	rsp, err := c.Postoauthv1tokenCreateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostoauthv1tokenCreateTokenResponse(rsp)
}

// ParseGetoauthv1accessTokensTokenGetAccessTokenResponse parses an HTTP response from a Getoauthv1accessTokensTokenGetAccessTokenWithResponse call
func ParseGetoauthv1accessTokensTokenGetAccessTokenResponse(rsp *http.Response) (*Getoauthv1accessTokensTokenGetAccessTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getoauthv1accessTokensTokenGetAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessTokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDeleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse parses an HTTP response from a Deleteoauthv1refreshTokensTokenArchiveRefreshTokenWithResponse call
func ParseDeleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse(rsp *http.Response) (*Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Deleteoauthv1refreshTokensTokenArchiveRefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetoauthv1refreshTokensTokenGetRefreshTokenResponse parses an HTTP response from a Getoauthv1refreshTokensTokenGetRefreshTokenWithResponse call
func ParseGetoauthv1refreshTokensTokenGetRefreshTokenResponse(rsp *http.Response) (*Getoauthv1refreshTokensTokenGetRefreshTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Getoauthv1refreshTokensTokenGetRefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefreshTokenInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostoauthv1tokenCreateTokenResponse parses an HTTP response from a Postoauthv1tokenCreateTokenWithResponse call
func ParsePostoauthv1tokenCreateTokenResponse(rsp *http.Response) (*Postoauthv1tokenCreateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Postoauthv1tokenCreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseIF
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
